
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800a9e0  0800a9e0  0001a9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adec  0800adec  00020288  2**0
                  CONTENTS
  4 .ARM          00000000  0800adec  0800adec  00020288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adec  0800adec  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adf0  0800adf0  0001adf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800adf4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000288  0800b07c  00020288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800b07c  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d80  00000000  00000000  000202b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caa  00000000  00000000  00033031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00035ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00036f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7a0  00000000  00000000  00038180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015df2  00000000  00000000  00052920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939d9  00000000  00000000  00068712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc0eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  000fc13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9c8 	.word	0x0800a9c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	0800a9c8 	.word	0x0800a9c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <constrain_value>:

static float integration_sum = 0;
static float prev_error = 0;

uint16_t constrain_value(uint16_t input, uint16_t min_val, uint16_t max_val)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	460b      	mov	r3, r1
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	807b      	strh	r3, [r7, #2]
	if (input < min_val)
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d201      	bcs.n	800116e <constrain_value+0x1e>
		return min_val;
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	e006      	b.n	800117c <constrain_value+0x2c>
	else if (input > max_val)
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	429a      	cmp	r2, r3
 8001174:	d901      	bls.n	800117a <constrain_value+0x2a>
		return max_val;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	e000      	b.n	800117c <constrain_value+0x2c>
	else
		return input;
 800117a:	88fb      	ldrh	r3, [r7, #6]
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
	...

08001188 <drive_forward>:

// drive forward - speed %
void drive_forward(TIM_HandleTypeDef *htim, double speed)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b08d      	sub	sp, #52	; 0x34
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_widthL = 1.0 + (speed * L_offset / 100.0);
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <drive_forward+0xe8>)
 8001196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800119e:	f7ff f99b 	bl	80004d8 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <drive_forward+0xec>)
 80011b0:	f7ff fabc 	bl	800072c <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <drive_forward+0xf0>)
 80011c2:	f7fe ffd3 	bl	800016c <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double commandL = (pulse_widthL / 20.0) * ARR;
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <drive_forward+0xf4>)
 80011d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011d8:	f7ff faa8 	bl	800072c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <drive_forward+0xf8>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff f975 	bl	80004d8 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double pulse_widthR = 1.0 + (speed / 100.0);
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <drive_forward+0xec>)
 80011fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001200:	f7ff fa94 	bl	800072c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <drive_forward+0xf0>)
 8001212:	f7fe ffab 	bl	800016c <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double commandR = (pulse_widthR / 20.0) * ARR;
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <drive_forward+0xf4>)
 8001224:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001228:	f7ff fa80 	bl	800072c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <drive_forward+0xf8>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f94d 	bl	80004d8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	e9c7 2304 	strd	r2, r3, [r7, #16]

	TIM2->CCR1 = commandL; // left
 8001246:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800124a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124e:	f7ff fc1b 	bl	8000a88 <__aeabi_d2uiz>
 8001252:	4603      	mov	r3, r0
 8001254:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = commandR; // right
 8001256:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800125a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800125e:	f7ff fc13 	bl	8000a88 <__aeabi_d2uiz>
 8001262:	4603      	mov	r3, r0
 8001264:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001266:	bf00      	nop
 8001268:	3734      	adds	r7, #52	; 0x34
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	40590000 	.word	0x40590000
 8001278:	3ff00000 	.word	0x3ff00000
 800127c:	40340000 	.word	0x40340000
 8001280:	20000000 	.word	0x20000000

08001284 <drive_straight_PID>:
		TIM2->CCR2 = commandR;
	}
}

void drive_straight_PID(TIM_HandleTypeDef *htim, double speed, I2C_HandleTypeDef *hi2c2, float desired_angle, float current_angle, uint16_t dt)
{
 8001284:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001288:	b090      	sub	sp, #64	; 0x40
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	e9c7 2300 	strd	r2, r3, [r7]
	//    current_angle = (int)current_angle%360;

	// Offset for each side due to drivetrain differences

	// TODO: Look into removing this float logic and change to integer logic with larger scale
	double pulse_widthL = 1.0 + (speed * L_offset / 100.0);
 8001292:	4ba7      	ldr	r3, [pc, #668]	; (8001530 <drive_straight_PID+0x2ac>)
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800129c:	f7ff f91c 	bl	80004d8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4ba1      	ldr	r3, [pc, #644]	; (8001534 <drive_straight_PID+0x2b0>)
 80012ae:	f7ff fa3d 	bl	800072c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b9e      	ldr	r3, [pc, #632]	; (8001538 <drive_straight_PID+0x2b4>)
 80012c0:	f7fe ff54 	bl	800016c <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double pulse_widthR = 1.0 + (speed / 100.0);
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b98      	ldr	r3, [pc, #608]	; (8001534 <drive_straight_PID+0x2b0>)
 80012d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d6:	f7ff fa29 	bl	800072c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b94      	ldr	r3, [pc, #592]	; (8001538 <drive_straight_PID+0x2b4>)
 80012e8:	f7fe ff40 	bl	800016c <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	uint16_t commandL = (pulse_widthL / 20.0) * ARR;
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b90      	ldr	r3, [pc, #576]	; (800153c <drive_straight_PID+0x2b8>)
 80012fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80012fe:	f7ff fa15 	bl	800072c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	4b8d      	ldr	r3, [pc, #564]	; (8001540 <drive_straight_PID+0x2bc>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f8e2 	bl	80004d8 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fbb4 	bl	8000a88 <__aeabi_d2uiz>
 8001320:	4603      	mov	r3, r0
 8001322:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t commandR = (pulse_widthR / 20.0) * ARR;
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b84      	ldr	r3, [pc, #528]	; (800153c <drive_straight_PID+0x2b8>)
 800132a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800132e:	f7ff f9fd 	bl	800072c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	4b81      	ldr	r3, [pc, #516]	; (8001540 <drive_straight_PID+0x2bc>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f8ca 	bl	80004d8 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fb9c 	bl	8000a88 <__aeabi_d2uiz>
 8001350:	4603      	mov	r3, r0
 8001352:	85bb      	strh	r3, [r7, #44]	; 0x2c

	float current_error = current_angle - desired_angle;
 8001354:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001356:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001358:	f7ff fc0a 	bl	8000b70 <__aeabi_fsub>
 800135c:	4603      	mov	r3, r0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28

	// This is the PID controller calcs
	integration_sum += (current_error * (dt / 1000.0));
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <drive_straight_PID+0x2c0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f85f 	bl	8000428 <__aeabi_f2d>
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
 800136e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001370:	f7ff f85a 	bl	8000428 <__aeabi_f2d>
 8001374:	4680      	mov	r8, r0
 8001376:	4689      	mov	r9, r1
 8001378:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f841 	bl	8000404 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b70      	ldr	r3, [pc, #448]	; (8001548 <drive_straight_PID+0x2c4>)
 8001388:	f7ff f9d0 	bl	800072c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4640      	mov	r0, r8
 8001392:	4649      	mov	r1, r9
 8001394:	f7ff f8a0 	bl	80004d8 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7fe fee4 	bl	800016c <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fb8c 	bl	8000ac8 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a64      	ldr	r2, [pc, #400]	; (8001544 <drive_straight_PID+0x2c0>)
 80013b4:	6013      	str	r3, [r2, #0]
	float correction = Kp * current_error + Ki * integration_sum + Kd * (current_error - prev_error) / (dt / 1000.0);
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <drive_straight_PID+0x2c8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fce1 	bl	8000d84 <__aeabi_fmul>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461c      	mov	r4, r3
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <drive_straight_PID+0x2cc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5e      	ldr	r2, [pc, #376]	; (8001544 <drive_straight_PID+0x2c0>)
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fcd7 	bl	8000d84 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4619      	mov	r1, r3
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fbca 	bl	8000b74 <__addsf3>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f820 	bl	8000428 <__aeabi_f2d>
 80013e8:	4604      	mov	r4, r0
 80013ea:	460d      	mov	r5, r1
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <drive_straight_PID+0x2d0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f4:	f7ff fbbc 	bl	8000b70 <__aeabi_fsub>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <drive_straight_PID+0x2d4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f7ff fcbe 	bl	8000d84 <__aeabi_fmul>
 8001408:	4603      	mov	r3, r0
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f80c 	bl	8000428 <__aeabi_f2d>
 8001410:	4680      	mov	r8, r0
 8001412:	4689      	mov	r9, r1
 8001414:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fff3 	bl	8000404 <__aeabi_i2d>
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b49      	ldr	r3, [pc, #292]	; (8001548 <drive_straight_PID+0x2c4>)
 8001424:	f7ff f982 	bl	800072c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4640      	mov	r0, r8
 800142e:	4649      	mov	r1, r9
 8001430:	f7ff f97c 	bl	800072c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7fe fe96 	bl	800016c <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fb3e 	bl	8000ac8 <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
	prev_error = current_error;
 8001450:	4a40      	ldr	r2, [pc, #256]	; (8001554 <drive_straight_PID+0x2d0>)
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	6013      	str	r3, [r2, #0]

	if (current_error < 0)
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800145c:	f7ff fe30 	bl	80010c0 <__aeabi_fcmplt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d027      	beq.n	80014b6 <drive_straight_PID+0x232>
	{
		// Correct by turning left
		double new_command = commandL + correction; // results in decrease bc negative error
 8001466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fc37 	bl	8000cdc <__aeabi_i2f>
 800146e:	4603      	mov	r3, r0
 8001470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb7e 	bl	8000b74 <__addsf3>
 8001478:	4603      	mov	r3, r0
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe ffd4 	bl	8000428 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TIM2->CCR1 = constrain_value(new_command, 2000, 4000);
 8001488:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148c:	f7ff fafc 	bl	8000a88 <__aeabi_d2uiz>
 8001490:	4603      	mov	r3, r0
 8001492:	b29b      	uxth	r3, r3
 8001494:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001498:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe57 	bl	8001150 <constrain_value>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = commandR;
 80014ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014b2:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		TIM2->CCR1 = commandL;
		TIM2->CCR2 = commandR;
	}
}
 80014b4:	e037      	b.n	8001526 <drive_straight_PID+0x2a2>
	else if (current_error > 0)
 80014b6:	f04f 0100 	mov.w	r1, #0
 80014ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014bc:	f7ff fe1e 	bl	80010fc <__aeabi_fcmpgt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d027      	beq.n	8001516 <drive_straight_PID+0x292>
		double new_command = commandR - correction;
 80014c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fc07 	bl	8000cdc <__aeabi_i2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb4c 	bl	8000b70 <__aeabi_fsub>
 80014d8:	4603      	mov	r3, r0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ffa4 	bl	8000428 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TIM2->CCR1 = commandL;
 80014e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014ee:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = constrain_value(new_command, 2000, 4000);
 80014f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014f4:	f7ff fac8 	bl	8000a88 <__aeabi_d2uiz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001500:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe23 	bl	8001150 <constrain_value>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001512:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001514:	e007      	b.n	8001526 <drive_straight_PID+0x2a2>
		TIM2->CCR1 = commandL;
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = commandR;
 800151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001522:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001524:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001526:	bf00      	nop
 8001528:	3740      	adds	r7, #64	; 0x40
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001530:	20000008 	.word	0x20000008
 8001534:	40590000 	.word	0x40590000
 8001538:	3ff00000 	.word	0x3ff00000
 800153c:	40340000 	.word	0x40340000
 8001540:	20000000 	.word	0x20000000
 8001544:	200002a4 	.word	0x200002a4
 8001548:	408f4000 	.word	0x408f4000
 800154c:	0800a9f0 	.word	0x0800a9f0
 8001550:	0800a9f4 	.word	0x0800a9f4
 8001554:	200002a8 	.word	0x200002a8
 8001558:	0800a9f8 	.word	0x0800a9f8

0800155c <reset_PID_controller>:

void reset_PID_controller()
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	integration_sum = 0;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <reset_PID_controller+0x1c>)
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
	prev_error = 0;
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <reset_PID_controller+0x20>)
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	200002a4 	.word	0x200002a4
 800157c:	200002a8 	.word	0x200002a8

08001580 <stop>:

void stop(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	drive_forward(htim, 0);
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fdf9 	bl	8001188 <drive_forward>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <turn_right>:

// turn right
void turn_right(TIM_HandleTypeDef *htim, double speed)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_width = 1.0 + (speed / 100.0);
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <turn_right+0xb8>)
 80015b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b6:	f7ff f8b9 	bl	800072c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <turn_right+0xbc>)
 80015c8:	f7fe fdd0 	bl	800016c <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double command = (pulse_width / 20.0) * ARR;
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <turn_right+0xc0>)
 80015da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015de:	f7ff f8a5 	bl	800072c <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <turn_right+0xc4>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7fe ff72 	bl	80004d8 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	TIM2->CCR1 = command;
 80015fc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001604:	f7ff fa40 	bl	8000a88 <__aeabi_d2uiz>
 8001608:	4603      	mov	r3, r0
 800160a:	6363      	str	r3, [r4, #52]	; 0x34

	// hold right motor
	pulse_width = 1.0;
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <turn_right+0xbc>)
 8001612:	e9c7 2306 	strd	r2, r3, [r7, #24]
	command = (pulse_width / 20.0) * ARR;
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <turn_right+0xc0>)
 800161c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001620:	f7ff f884 	bl	800072c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <turn_right+0xc4>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ff51 	bl	80004d8 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	TIM2->CCR2 = command;
 800163e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001646:	f7ff fa1f 	bl	8000a88 <__aeabi_d2uiz>
 800164a:	4603      	mov	r3, r0
 800164c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800164e:	bf00      	nop
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	40590000 	.word	0x40590000
 800165c:	3ff00000 	.word	0x3ff00000
 8001660:	40340000 	.word	0x40340000
 8001664:	20000000 	.word	0x20000000

08001668 <turn_degree>:

void turn_degree(TIM_HandleTypeDef *htim, I2C_HandleTypeDef *hi2c2, double angle)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b091      	sub	sp, #68	; 0x44
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t tick_rate = HAL_GetTickFreq();
 8001676:	f001 fea9 	bl	80033cc <HAL_GetTickFreq>
 800167a:	4603      	mov	r3, r0
 800167c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t last_tick = HAL_GetTick();
 800167e:	f001 fe9b 	bl	80033b8 <HAL_GetTick>
 8001682:	63f8      	str	r0, [r7, #60]	; 0x3c
	double speed = 15;
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <turn_degree+0xec>)
 800168a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double curr_angle = 0;
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	float dt = 0;
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
	ICM_SelectBank(hi2c2, USER_BANK_0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	68b8      	ldr	r0, [r7, #8]
 80016a4:	f000 fb14 	bl	8001cd0 <ICM_SelectBank>
	HAL_Delay(1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f001 fe99 	bl	80033e0 <HAL_Delay>
	double error = curr_angle - (-angle);
 80016ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016b6:	f7fe fd59 	bl	800016c <__adddf3>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (error > 5)
 80016c2:	e035      	b.n	8001730 <turn_degree+0xc8>
	{
		turn_right(htim, speed);
 80016c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff ff69 	bl	80015a0 <turn_right>
		ICM_ReadAccelGyro(hi2c2);
 80016ce:	68b8      	ldr	r0, [r7, #8]
 80016d0:	f000 fa1a 	bl	8001b08 <ICM_ReadAccelGyro>
		ICM_CorrectAccelGyro(hi2c2, accel_data, gyro_data);
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <turn_degree+0xf0>)
 80016d6:	4921      	ldr	r1, [pc, #132]	; (800175c <turn_degree+0xf4>)
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	f000 fa65 	bl	8001ba8 <ICM_CorrectAccelGyro>
		dt = (float)(HAL_GetTick() - last_tick) / tick_rate;
 80016de:	f001 fe6b 	bl	80033b8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff faf3 	bl	8000cd4 <__aeabi_ui2f>
 80016ee:	4604      	mov	r4, r0
 80016f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff faf2 	bl	8000cdc <__aeabi_i2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff fbf5 	bl	8000eec <__aeabi_fdiv>
 8001702:	4603      	mov	r3, r0
 8001704:	61fb      	str	r3, [r7, #28]
		curr_angle += gyro_yaw(hi2c2, dt);
 8001706:	69f9      	ldr	r1, [r7, #28]
 8001708:	68b8      	ldr	r0, [r7, #8]
 800170a:	f000 fc11 	bl	8001f30 <gyro_yaw>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fe89 	bl	8000428 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800171e:	f7fe fd25 	bl	800016c <__adddf3>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		last_tick = HAL_GetTick();
 800172a:	f001 fe45 	bl	80033b8 <HAL_GetTick>
 800172e:	63f8      	str	r0, [r7, #60]	; 0x3c
	while (error > 5)
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <turn_degree+0xf8>)
 8001736:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800173a:	f7ff f95d 	bl	80009f8 <__aeabi_dcmpgt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1bf      	bne.n	80016c4 <turn_degree+0x5c>
	}
	stop(htim);
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f7ff ff1b 	bl	8001580 <stop>
}
 800174a:	bf00      	nop
 800174c:	3744      	adds	r7, #68	; 0x44
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	402e0000 	.word	0x402e0000
 8001758:	200002b4 	.word	0x200002b4
 800175c:	200002ac 	.word	0x200002ac
 8001760:	40140000 	.word	0x40140000

08001764 <accelerate>:

// accelerate to desired speed
void accelerate(TIM_HandleTypeDef *htim, double final_speed)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1) / ARR) * 20.0 - 1) * 100;
 8001770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe34 	bl	80003e4 <__aeabi_ui2d>
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <accelerate+0xa4>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7fe ffd3 	bl	800072c <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <accelerate+0xa8>)
 8001794:	f7fe fea0 	bl	80004d8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <accelerate+0xac>)
 80017a6:	f7fe fcdf 	bl	8000168 <__aeabi_dsub>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <accelerate+0xb0>)
 80017b8:	f7fe fe8e 	bl	80004d8 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (speed < final_speed)
 80017c4:	e012      	b.n	80017ec <accelerate+0x88>
	{
		drive_forward(htim, speed);
 80017c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fcdc 	bl	8001188 <drive_forward>
		speed += 1;
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <accelerate+0xac>)
 80017d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017da:	f7fe fcc7 	bl	800016c <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(20);
 80017e6:	2014      	movs	r0, #20
 80017e8:	f001 fdfa 	bl	80033e0 <HAL_Delay>
	while (speed < final_speed)
 80017ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017f4:	f7ff f8e2 	bl	80009bc <__aeabi_dcmplt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1e3      	bne.n	80017c6 <accelerate+0x62>
	}
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	40340000 	.word	0x40340000
 8001810:	3ff00000 	.word	0x3ff00000
 8001814:	40590000 	.word	0x40590000

08001818 <decelerate>:

// decelerate to 0
void decelerate(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1) / ARR) * 20.0 - 1) * 100;
 8001820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fddc 	bl	80003e4 <__aeabi_ui2d>
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <decelerate+0xa4>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe ff7b 	bl	800072c <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <decelerate+0xa8>)
 8001844:	f7fe fe48 	bl	80004d8 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <decelerate+0xac>)
 8001856:	f7fe fc87 	bl	8000168 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <decelerate+0xb0>)
 8001868:	f7fe fe36 	bl	80004d8 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (speed > 0)
 8001874:	e012      	b.n	800189c <decelerate+0x84>
	{
		drive_forward(htim, speed);
 8001876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fc84 	bl	8001188 <drive_forward>
		speed -= 1;
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <decelerate+0xac>)
 8001886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800188a:	f7fe fc6d 	bl	8000168 <__aeabi_dsub>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_Delay(20);
 8001896:	2014      	movs	r0, #20
 8001898:	f001 fda2 	bl	80033e0 <HAL_Delay>
	while (speed > 0)
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018a8:	f7ff f8a6 	bl	80009f8 <__aeabi_dcmpgt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1e1      	bne.n	8001876 <decelerate+0x5e>
	}
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	40340000 	.word	0x40340000
 80018c4:	3ff00000 	.word	0x3ff00000
 80018c8:	40590000 	.word	0x40590000

080018cc <ICM_WriteOneByte>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData) // ***
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	460b      	mov	r3, r1
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	72fb      	strb	r3, [r7, #11]
	reg = reg & 0x7F;
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e0:	72fb      	strb	r3, [r7, #11]
//	uint8_t Trans[2]={reg, Data};
//	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, pData, 1, 1000);
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	2301      	movs	r3, #1
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	21d2      	movs	r1, #210	; 0xd2
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f002 fc45 	bl	8004188 <HAL_I2C_Mem_Write>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value)
  {
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	70fb      	strb	r3, [r7, #3]
 8001912:	4613      	mov	r3, r2
 8001914:	70bb      	strb	r3, [r7, #2]
	uint8_t writeData = 0x30;
 8001916:	2330      	movs	r3, #48	; 0x30
 8001918:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x7F, &writeData);
 800191a:	f107 030f 	add.w	r3, r7, #15
 800191e:	461a      	mov	r2, r3
 8001920:	217f      	movs	r1, #127	; 0x7f
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffd2 	bl	80018cc <ICM_WriteOneByte>
  	HAL_Delay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f001 fd59 	bl	80033e0 <HAL_Delay>
  	writeData = 0x0C;
 800192e:	230c      	movs	r3, #12
 8001930:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x03, &writeData);//mode: write
 8001932:	f107 030f 	add.w	r3, r7, #15
 8001936:	461a      	mov	r2, r3
 8001938:	2103      	movs	r1, #3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffc6 	bl	80018cc <ICM_WriteOneByte>
  	HAL_Delay(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f001 fd4d 	bl	80033e0 <HAL_Delay>
  	writeData = reg;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x04, &writeData);//set reg addr
 800194a:	f107 030f 	add.w	r3, r7, #15
 800194e:	461a      	mov	r2, r3
 8001950:	2104      	movs	r1, #4
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffba 	bl	80018cc <ICM_WriteOneByte>
  	HAL_Delay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f001 fd41 	bl	80033e0 <HAL_Delay>
  	writeData = value;
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x06, &writeData);//send value
 8001962:	f107 030f 	add.w	r3, r7, #15
 8001966:	461a      	mov	r2, r3
 8001968:	2106      	movs	r1, #6
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffae 	bl	80018cc <ICM_WriteOneByte>
  	HAL_Delay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f001 fd35 	bl	80033e0 <HAL_Delay>
  }
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_0);
 8001986:	2100      	movs	r1, #0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f9a1 	bl	8001cd0 <ICM_SelectBank>
	HAL_Delay(5);
 800198e:	2005      	movs	r0, #5
 8001990:	f001 fd26 	bl	80033e0 <HAL_Delay>
//	ICM_Set_I2C_Clk(hi2c);
//	HAL_Delay(5);
//
//	ICM_SelectBank(hi2c, USER_BANK_0);
//	HAL_Delay(5);
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 8001994:	2101      	movs	r1, #1
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f9ad 	bl	8001cf6 <ICM_SetClock>
	HAL_Delay(5);
 800199c:	2005      	movs	r0, #5
 800199e:	f001 fd1f 	bl	80033e0 <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f9ba 	bl	8001d1c <ICM_AccelGyroOff>
	HAL_Delay(20);
 80019a8:	2014      	movs	r0, #20
 80019aa:	f001 fd19 	bl	80033e0 <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f9c5 	bl	8001d3e <ICM_AccelGyroOn>
	HAL_Delay(35);
 80019b4:	2023      	movs	r0, #35	; 0x23
 80019b6:	f001 fd13 	bl	80033e0 <HAL_Delay>
	ICM_Initialize(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f804 	bl	80019c8 <ICM_Initialize>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 80019d0:	2120      	movs	r1, #32
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f97c 	bl	8001cd0 <ICM_SelectBank>
	HAL_Delay(5);
 80019d8:	2005      	movs	r0, #5
 80019da:	f001 fd01 	bl	80033e0 <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 80019de:	2229      	movs	r2, #41	; 0x29
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f9bc 	bl	8001d60 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 80019e8:	200a      	movs	r0, #10
 80019ea:	f001 fcf9 	bl	80033e0 <HAL_Delay>
//	HAL_Delay(5);
//	ICM_WriteOneByte(hi2c, 0x67, 0x0);
//	HAL_Delay(5);

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	uint8_t i2cData = 0x0A;
 80019ee:	230a      	movs	r3, #10
 80019f0:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x00, &i2cData);
 80019f2:	f107 030f 	add.w	r3, r7, #15
 80019f6:	461a      	mov	r2, r3
 80019f8:	2100      	movs	r1, #0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff66 	bl	80018cc <ICM_WriteOneByte>
	HAL_Delay(5);
 8001a00:	2005      	movs	r0, #5
 8001a02:	f001 fced 	bl	80033e0 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	i2cData = (0x04 | 0x11);
 8001a06:	2315      	movs	r3, #21
 8001a08:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x14, &i2cData);
 8001a0a:	f107 030f 	add.w	r3, r7, #15
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2114      	movs	r1, #20
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff5a 	bl	80018cc <ICM_WriteOneByte>
	HAL_Delay(5);
 8001a18:	2005      	movs	r0, #5
 8001a1a:	f001 fce1 	bl	80033e0 <HAL_Delay>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	i2cData = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x10, &i2cData);
 8001a22:	f107 030f 	add.w	r3, r7, #15
 8001a26:	461a      	mov	r2, r3
 8001a28:	2110      	movs	r1, #16
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff4e 	bl	80018cc <ICM_WriteOneByte>
	HAL_Delay(5);
 8001a30:	2005      	movs	r0, #5
 8001a32:	f001 fcd5 	bl	80033e0 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	i2cData = 0x0A;
 8001a36:	230a      	movs	r3, #10
 8001a38:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x11, &i2cData);
 8001a3a:	f107 030f 	add.w	r3, r7, #15
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2111      	movs	r1, #17
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff42 	bl	80018cc <ICM_WriteOneByte>
	HAL_Delay(5);
 8001a48:	2005      	movs	r0, #5
 8001a4a:	f001 fcc9 	bl	80033e0 <HAL_Delay>

//	ICM_SelectBank(hi2c, USER_BANK_2);
//	HAL_Delay(20);

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	i2cData = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x7F, &i2cData); // Select user bank 0
 8001a52:	f107 030f 	add.w	r3, r7, #15
 8001a56:	461a      	mov	r2, r3
 8001a58:	217f      	movs	r1, #127	; 0x7f
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff36 	bl	80018cc <ICM_WriteOneByte>
	HAL_Delay(5);
 8001a60:	2005      	movs	r0, #5
 8001a62:	f001 fcbd 	bl	80033e0 <HAL_Delay>
	i2cData = 0x30;
 8001a66:	2330      	movs	r3, #48	; 0x30
 8001a68:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x0F, &i2cData); // INT Pin / Bypass Enable Configuration
 8001a6a:	f107 030f 	add.w	r3, r7, #15
 8001a6e:	461a      	mov	r2, r3
 8001a70:	210f      	movs	r1, #15
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff2a 	bl	80018cc <ICM_WriteOneByte>
	i2cData = 0x20;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x03, &i2cData); // I2C_MST_EN
 8001a7c:	f107 030f 	add.w	r3, r7, #15
 8001a80:	461a      	mov	r2, r3
 8001a82:	2103      	movs	r1, #3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff21 	bl	80018cc <ICM_WriteOneByte>
	i2cData = 0x30;
 8001a8a:	2330      	movs	r3, #48	; 0x30
 8001a8c:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x7F, &i2cData); // Select user bank 3
 8001a8e:	f107 030f 	add.w	r3, r7, #15
 8001a92:	461a      	mov	r2, r3
 8001a94:	217f      	movs	r1, #127	; 0x7f
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff18 	bl	80018cc <ICM_WriteOneByte>
	HAL_Delay(5);
 8001a9c:	2005      	movs	r0, #5
 8001a9e:	f001 fc9f 	bl	80033e0 <HAL_Delay>
	i2cData = 0x4D;
 8001aa2:	234d      	movs	r3, #77	; 0x4d
 8001aa4:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x01, &i2cData); // I2C Master mode and Speed 400 kHz
 8001aa6:	f107 030f 	add.w	r3, r7, #15
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2101      	movs	r1, #1
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff0c 	bl	80018cc <ICM_WriteOneByte>
	ICM_Set_I2C_Clk(hi2c);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f96b 	bl	8001d90 <ICM_Set_I2C_Clk>
	i2cData = 0x01;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x02, &i2cData); // I2C_SLV0 _DLY_ enable
 8001abe:	f107 030f 	add.w	r3, r7, #15
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff00 	bl	80018cc <ICM_WriteOneByte>
	i2cData = 0x81;
 8001acc:	2381      	movs	r3, #129	; 0x81
 8001ace:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x05, &i2cData); // enable IIC	and EXT_SENS_DATA==1 Byte
 8001ad0:	f107 030f 	add.w	r3, r7, #15
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2105      	movs	r1, #5
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fef7 	bl	80018cc <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2132      	movs	r1, #50	; 0x32
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff0f 	bl	8001906 <i2c_Mag_write>
	HAL_Delay(1000);
 8001ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aec:	f001 fc78 	bl	80033e0 <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8001af0:	2202      	movs	r2, #2
 8001af2:	2131      	movs	r1, #49	; 0x31
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff06 	bl	8001906 <i2c_Mag_write>

	return 1337;
 8001afa:	f240 5339 	movw	r3, #1337	; 0x539
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
//	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADDRESS << 1, 0x2D, I2C_MEMADD_SIZE_8BIT, raw_data, 12, 1000); //read starting from ACCEL_XOUT_H
 8001b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	230c      	movs	r3, #12
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	222d      	movs	r2, #45	; 0x2d
 8001b24:	21d2      	movs	r1, #210	; 0xd2
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f002 fc28 	bl	800437c <HAL_I2C_Mem_Read>

	accel_data[0] = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 8001b2c:	7b3b      	ldrb	r3, [r7, #12]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	7b7b      	ldrb	r3, [r7, #13]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <ICM_ReadAccelGyro+0x98>)
 8001b3c:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <ICM_ReadAccelGyro+0x98>)
 8001b4e:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 8001b50:	7c3b      	ldrb	r3, [r7, #16]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	7c7b      	ldrb	r3, [r7, #17]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <ICM_ReadAccelGyro+0x98>)
 8001b60:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (int16_t)(raw_data[6] << 8 | raw_data[7]);
 8001b62:	7cbb      	ldrb	r3, [r7, #18]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <ICM_ReadAccelGyro+0x9c>)
 8001b72:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (int16_t)(raw_data[8] << 8 | raw_data[9]);
 8001b74:	7d3b      	ldrb	r3, [r7, #20]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	7d7b      	ldrb	r3, [r7, #21]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <ICM_ReadAccelGyro+0x9c>)
 8001b84:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (int16_t)(raw_data[10] << 8 | raw_data[11]);
 8001b86:	7dbb      	ldrb	r3, [r7, #22]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <ICM_ReadAccelGyro+0x9c>)
 8001b96:	809a      	strh	r2, [r3, #4]
}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200002ac 	.word	0x200002ac
 8001ba4:	200002b4 	.word	0x200002b4

08001ba8 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, int16_t raw_accel_data[3], int16_t raw_gyro_data[3]) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
//	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
//	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
//	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;

	corr_accel_data[0] = (raw_accel_data[0] - accel_offset[0]) / 4096.0f;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <ICM_CorrectAccelGyro+0x114>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f889 	bl	8000cdc <__aeabi_i2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f98b 	bl	8000eec <__aeabi_fdiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <ICM_CorrectAccelGyro+0x118>)
 8001bdc:	601a      	str	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - accel_offset[1]) / 4096.0f;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3302      	adds	r3, #2
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <ICM_CorrectAccelGyro+0x114>)
 8001bea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f873 	bl	8000cdc <__aeabi_i2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f975 	bl	8000eec <__aeabi_fdiv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <ICM_CorrectAccelGyro+0x118>)
 8001c08:	605a      	str	r2, [r3, #4]
	corr_accel_data[2] = (raw_accel_data[2] - accel_offset[2]) / 4096.0f;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <ICM_CorrectAccelGyro+0x114>)
 8001c16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f85d 	bl	8000cdc <__aeabi_i2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f95f 	bl	8000eec <__aeabi_fdiv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <ICM_CorrectAccelGyro+0x118>)
 8001c34:	609a      	str	r2, [r3, #8]
//	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
//	corr_gyro_data[1] = (raw_gyro_data[1] - (gyro_offset[1] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
//	corr_gyro_data[2] = (raw_gyro_data[2] - (gyro_offset[2] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;


	corr_gyro_data[0] = (raw_gyro_data[0] - gyro_offset[0]) / 131.0f;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <ICM_CorrectAccelGyro+0x11c>)
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f848 	bl	8000cdc <__aeabi_i2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	491e      	ldr	r1, [pc, #120]	; (8001cc8 <ICM_CorrectAccelGyro+0x120>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f94b 	bl	8000eec <__aeabi_fdiv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <ICM_CorrectAccelGyro+0x124>)
 8001c5c:	601a      	str	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[1] - gyro_offset[1]) / 131.0f;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3302      	adds	r3, #2
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <ICM_CorrectAccelGyro+0x11c>)
 8001c6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f833 	bl	8000cdc <__aeabi_i2f>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4913      	ldr	r1, [pc, #76]	; (8001cc8 <ICM_CorrectAccelGyro+0x120>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f936 	bl	8000eec <__aeabi_fdiv>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <ICM_CorrectAccelGyro+0x124>)
 8001c86:	605a      	str	r2, [r3, #4]
	corr_gyro_data[2] = (raw_gyro_data[2] - gyro_offset[2]) / 131.0f;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <ICM_CorrectAccelGyro+0x11c>)
 8001c94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f81e 	bl	8000cdc <__aeabi_i2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4909      	ldr	r1, [pc, #36]	; (8001cc8 <ICM_CorrectAccelGyro+0x120>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f921 	bl	8000eec <__aeabi_fdiv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <ICM_CorrectAccelGyro+0x124>)
 8001cb0:	609a      	str	r2, [r3, #8]

}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200002dc 	.word	0x200002dc
 8001cc0:	200002bc 	.word	0x200002bc
 8001cc4:	200002d4 	.word	0x200002d4
 8001cc8:	43030000 	.word	0x43030000
 8001ccc:	200002c8 	.word	0x200002c8

08001cd0 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
	uint8_t i2cData = bank;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, &i2cData);
 8001ce0:	f107 030f 	add.w	r3, r7, #15
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	217f      	movs	r1, #127	; 0x7f
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fdef 	bl	80018cc <ICM_WriteOneByte>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <ICM_SetClock>:
void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) { //user bank 0
	uint8_t i2cData = 0x20;
	ICM_WriteOneByte(hi2c, 0x03, &i2cData); // Enable I2C master
}

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
	uint8_t i2cData = clk;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, &i2cData);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2106      	movs	r1, #6
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fddc 	bl	80018cc <ICM_WriteOneByte>
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) { //user bank 0
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	uint8_t i2cData = (0x38 | 0x07);
 8001d24:	233f      	movs	r3, #63	; 0x3f
 8001d26:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, &i2cData);
 8001d28:	f107 030f 	add.w	r3, r7, #15
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2107      	movs	r1, #7
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fdcb 	bl	80018cc <ICM_WriteOneByte>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) { //user bank 0
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	uint8_t i2cData = 0x00;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, &i2cData);
 8001d4a:	f107 030f 	add.w	r3, r7, #15
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2107      	movs	r1, #7
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fdba 	bl	80018cc <ICM_WriteOneByte>
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	70bb      	strb	r3, [r7, #2]
	uint8_t i2cData = (rate|lpf);
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, &i2cData);
 8001d7a:	f107 030f 	add.w	r3, r7, #15
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2101      	movs	r1, #1
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fda2 	bl	80018cc <ICM_WriteOneByte>
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <ICM_Set_I2C_Clk>:

void ICM_Set_I2C_Clk(I2C_HandleTypeDef *hi2c) { //user bank 3
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t i2cData = 0x07;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x01, &i2cData); //set I2C master clock to recommended freq
 8001d9c:	f107 030f 	add.w	r3, r7, #15
 8001da0:	461a      	mov	r2, r3
 8001da2:	2101      	movs	r1, #1
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff fd91 	bl	80018cc <ICM_WriteOneByte>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <ICM20948_Calibrate>:
//	ICM_ReadOneByte(hi2c, 0x18, &i2cData);
//	return i2cData;
}

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_0);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff86 	bl	8001cd0 <ICM_SelectBank>
	HAL_Delay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f001 fb0b 	bl	80033e0 <HAL_Delay>

	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e056      	b.n	8001e7e <ICM20948_Calibrate+0xca>
		ICM_ReadAccelGyro(hi2c);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fe99 	bl	8001b08 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 8001dd6:	4b51      	ldr	r3, [pc, #324]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <ICM20948_Calibrate+0x16c>)
 8001de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001dee:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 8001df0:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001df2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <ICM20948_Calibrate+0x16c>)
 8001dfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001e08:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <ICM20948_Calibrate+0x16c>)
 8001e14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001e22:	809a      	strh	r2, [r3, #4]

		gyro_offset[0] += gyro_data[0];
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <ICM20948_Calibrate+0x174>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001e3c:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001e40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <ICM20948_Calibrate+0x174>)
 8001e48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001e56:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001e5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <ICM20948_Calibrate+0x174>)
 8001e62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001e70:	809a      	strh	r2, [r3, #4]

		HAL_Delay(12);
 8001e72:	200c      	movs	r0, #12
 8001e74:	f001 fab4 	bl	80033e0 <HAL_Delay>
	for(int i=0; i<50; i++){
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b31      	cmp	r3, #49	; 0x31
 8001e82:	dda5      	ble.n	8001dd0 <ICM20948_Calibrate+0x1c>
	}

	accel_offset[0] /= 50;
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8a:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <ICM20948_Calibrate+0x178>)
 8001e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e90:	1112      	asrs	r2, r2, #4
 8001e92:	17db      	asrs	r3, r3, #31
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001e9a:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001e9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <ICM20948_Calibrate+0x178>)
 8001ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea8:	1112      	asrs	r2, r2, #4
 8001eaa:	17db      	asrs	r3, r3, #31
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001eb2:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001eb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <ICM20948_Calibrate+0x178>)
 8001ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec0:	1112      	asrs	r2, r2, #4
 8001ec2:	17db      	asrs	r3, r3, #31
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <ICM20948_Calibrate+0x168>)
 8001eca:	809a      	strh	r2, [r3, #4]
//		ICM_ReadAccelGyro(hi2c);
//
//		HAL_Delay(15);
//	}
//
	gyro_offset[0] /= 50;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed2:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <ICM20948_Calibrate+0x178>)
 8001ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed8:	1112      	asrs	r2, r2, #4
 8001eda:	17db      	asrs	r3, r3, #31
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001ee2:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <ICM20948_Calibrate+0x178>)
 8001eec:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef0:	1112      	asrs	r2, r2, #4
 8001ef2:	17db      	asrs	r3, r3, #31
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001efa:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001efe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <ICM20948_Calibrate+0x178>)
 8001f04:	fb82 1203 	smull	r1, r2, r2, r3
 8001f08:	1112      	asrs	r2, r2, #4
 8001f0a:	17db      	asrs	r3, r3, #31
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <ICM20948_Calibrate+0x170>)
 8001f12:	809a      	strh	r2, [r3, #4]
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200002dc 	.word	0x200002dc
 8001f20:	200002ac 	.word	0x200002ac
 8001f24:	200002d4 	.word	0x200002d4
 8001f28:	200002b4 	.word	0x200002b4
 8001f2c:	51eb851f 	.word	0x51eb851f

08001f30 <gyro_yaw>:

// Calculate yaw by integrating gyro data
float gyro_yaw(I2C_HandleTypeDef *hi2c, float dt)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	return (corr_gyro_data[2]*dt/1000);
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <gyro_yaw+0x2c>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe ff1f 	bl	8000d84 <__aeabi_fmul>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4905      	ldr	r1, [pc, #20]	; (8001f60 <gyro_yaw+0x30>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ffce 	bl	8000eec <__aeabi_fdiv>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200002c8 	.word	0x200002c8
 8001f60:	447a0000 	.word	0x447a0000

08001f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f64:	b5b0      	push	{r4, r5, r7, lr}
 8001f66:	b092      	sub	sp, #72	; 0x48
 8001f68:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	221f      	movs	r2, #31
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f006 f813 	bl	8007fa0 <memset>
	double speed = 15;
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	4b64      	ldr	r3, [pc, #400]	; (8002110 <main+0x1ac>)
 8001f80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f84:	f001 f9c0 	bl	8003308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f88:	f000 f8d6 	bl	8002138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f8c:	f000 fb12 	bl	80025b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f90:	f000 fae6 	bl	8002560 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001f94:	f000 f960 	bl	8002258 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001f98:	f000 f920 	bl	80021dc <MX_ADC1_Init>
  MX_TIM2_Init();
 8001f9c:	f000 f9e2 	bl	8002364 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fa0:	f000 fa62 	bl	8002468 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001fa4:	f000 f986 	bl	80022b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001fa8:	213c      	movs	r1, #60	; 0x3c
 8001faa:	485a      	ldr	r0, [pc, #360]	; (8002114 <main+0x1b0>)
 8001fac:	f004 fb7c 	bl	80066a8 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start_IT(&htim3);
 8001fb0:	4859      	ldr	r0, [pc, #356]	; (8002118 <main+0x1b4>)
 8001fb2:	f004 f82d 	bl	8006010 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	4857      	ldr	r0, [pc, #348]	; (8002118 <main+0x1b4>)
 8001fba:	f004 f9cd 	bl	8006358 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	4855      	ldr	r0, [pc, #340]	; (8002118 <main+0x1b4>)
 8001fc2:	f004 f9c9 	bl	8006358 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 8001fc6:	4855      	ldr	r0, [pc, #340]	; (800211c <main+0x1b8>)
 8001fc8:	f003 ffd8 	bl	8005f7c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4853      	ldr	r0, [pc, #332]	; (800211c <main+0x1b8>)
 8001fd0:	f004 f8c8 	bl	8006164 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4851      	ldr	r0, [pc, #324]	; (800211c <main+0x1b8>)
 8001fd8:	f004 f8c4 	bl	8006164 <HAL_TIM_PWM_Start>

//  // ESC Calibration Procedure
//  drive_forward(&htim2, 100);
  HAL_Delay(5000);
 8001fdc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fe0:	f001 f9fe 	bl	80033e0 <HAL_Delay>
//  stop(&htim2);
//
//  // Delay for ESCs to detect PWM Signal
//  HAL_Delay(10000);

  ICM_PowerOn(&hi2c2);
 8001fe4:	484e      	ldr	r0, [pc, #312]	; (8002120 <main+0x1bc>)
 8001fe6:	f7ff fcca 	bl	800197e <ICM_PowerOn>
  HAL_Delay(10);
 8001fea:	200a      	movs	r0, #10
 8001fec:	f001 f9f8 	bl	80033e0 <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 8001ff0:	484b      	ldr	r0, [pc, #300]	; (8002120 <main+0x1bc>)
 8001ff2:	f7ff fedf 	bl	8001db4 <ICM20948_Calibrate>
  HAL_Delay(100);
 8001ff6:	2064      	movs	r0, #100	; 0x64
 8001ff8:	f001 f9f2 	bl	80033e0 <HAL_Delay>
  uint16_t tick_rate = HAL_GetTickFreq();
 8001ffc:	f001 f9e6 	bl	80033cc <HAL_GetTickFreq>
 8002000:	4603      	mov	r3, r0
 8002002:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint32_t last_tick = HAL_GetTick();
 8002004:	f001 f9d8 	bl	80033b8 <HAL_GetTick>
 8002008:	6378      	str	r0, [r7, #52]	; 0x34
  reset_distance(&htim1);
 800200a:	4842      	ldr	r0, [pc, #264]	; (8002114 <main+0x1b0>)
 800200c:	f000 fc12 	bl	8002834 <reset_distance>
//	  sprintf(MSG, "Reset distance\n");
//	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
//	  reset_distance(&htim1);

	  // DRIVE STRAIGHT TEST --------------------------------
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8002010:	2100      	movs	r1, #0
 8002012:	4843      	ldr	r0, [pc, #268]	; (8002120 <main+0x1bc>)
 8002014:	f7ff fe5c 	bl	8001cd0 <ICM_SelectBank>
	  HAL_Delay(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f001 f9e1 	bl	80033e0 <HAL_Delay>
	  yaw_main = 0;
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <main+0x1c0>)
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
	  accelerate(&htim2, speed);
 8002026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800202a:	483c      	ldr	r0, [pc, #240]	; (800211c <main+0x1b8>)
 800202c:	f7ff fb9a 	bl	8001764 <accelerate>
      for (int i = 0; i<50; i++)
 8002030:	2300      	movs	r3, #0
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
 8002034:	e053      	b.n	80020de <main+0x17a>
      {
          ICM_ReadAccelGyro(&hi2c2);
 8002036:	483a      	ldr	r0, [pc, #232]	; (8002120 <main+0x1bc>)
 8002038:	f7ff fd66 	bl	8001b08 <ICM_ReadAccelGyro>
          ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 800203c:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <main+0x1c4>)
 800203e:	493b      	ldr	r1, [pc, #236]	; (800212c <main+0x1c8>)
 8002040:	4837      	ldr	r0, [pc, #220]	; (8002120 <main+0x1bc>)
 8002042:	f7ff fdb1 	bl	8001ba8 <ICM_CorrectAccelGyro>
          dt = (double)(HAL_GetTick() - last_tick)/tick_rate;
 8002046:	f001 f9b7 	bl	80033b8 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f9c7 	bl	80003e4 <__aeabi_ui2d>
 8002056:	4604      	mov	r4, r0
 8002058:	460d      	mov	r5, r1
 800205a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe f9d1 	bl	8000404 <__aeabi_i2d>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4620      	mov	r0, r4
 8002068:	4629      	mov	r1, r5
 800206a:	f7fe fb5f 	bl	800072c <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd27 	bl	8000ac8 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <main+0x1cc>)
 800207e:	6013      	str	r3, [r2, #0]
          yaw_main += gyro_yaw(&hi2c2, dt);
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <main+0x1cc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	4826      	ldr	r0, [pc, #152]	; (8002120 <main+0x1bc>)
 8002088:	f7ff ff52 	bl	8001f30 <gyro_yaw>
 800208c:	4602      	mov	r2, r0
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <main+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f7fe fd6d 	bl	8000b74 <__addsf3>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <main+0x1c0>)
 80020a0:	601a      	str	r2, [r3, #0]
          last_tick = HAL_GetTick();
 80020a2:	f001 f989 	bl	80033b8 <HAL_GetTick>
 80020a6:	6378      	str	r0, [r7, #52]	; 0x34
          drive_straight_PID(&htim2, speed, &hi2c2, 0, yaw_main, dt);
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <main+0x1c0>)
 80020aa:	681c      	ldr	r4, [r3, #0]
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <main+0x1cc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f82d 	bl	8001110 <__aeabi_f2uiz>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	9402      	str	r4, [sp, #8]
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <main+0x1bc>)
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020cc:	4813      	ldr	r0, [pc, #76]	; (800211c <main+0x1b8>)
 80020ce:	f7ff f8d9 	bl	8001284 <drive_straight_PID>
          HAL_Delay(5);
 80020d2:	2005      	movs	r0, #5
 80020d4:	f001 f984 	bl	80033e0 <HAL_Delay>
      for (int i = 0; i<50; i++)
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	3301      	adds	r3, #1
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	2b31      	cmp	r3, #49	; 0x31
 80020e2:	dda8      	ble.n	8002036 <main+0xd2>
      }
      decelerate(&htim2);
 80020e4:	480d      	ldr	r0, [pc, #52]	; (800211c <main+0x1b8>)
 80020e6:	f7ff fb97 	bl	8001818 <decelerate>
      reset_PID_controller();
 80020ea:	f7ff fa37 	bl	800155c <reset_PID_controller>
      HAL_Delay(3000);
 80020ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020f2:	f001 f975 	bl	80033e0 <HAL_Delay>
//	  roll_main = getRoll();
//	  pitch_main = getPitch();
//	  yaw_main = getYaw();

//	  TURN 90------------------------
	  turn_degree(&htim2, &hi2c2, 90);
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <main+0x1d0>)
 80020fc:	4908      	ldr	r1, [pc, #32]	; (8002120 <main+0x1bc>)
 80020fe:	4807      	ldr	r0, [pc, #28]	; (800211c <main+0x1b8>)
 8002100:	f7ff fab2 	bl	8001668 <turn_degree>
	  HAL_Delay(2000);
 8002104:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002108:	f001 f96a 	bl	80033e0 <HAL_Delay>
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 800210c:	e780      	b.n	8002010 <main+0xac>
 800210e:	bf00      	nop
 8002110:	402e0000 	.word	0x402e0000
 8002114:	20000368 	.word	0x20000368
 8002118:	200003f8 	.word	0x200003f8
 800211c:	200003b0 	.word	0x200003b0
 8002120:	20000314 	.word	0x20000314
 8002124:	20000484 	.word	0x20000484
 8002128:	200002b4 	.word	0x200002b4
 800212c:	200002ac 	.word	0x200002ac
 8002130:	20000488 	.word	0x20000488
 8002134:	40568000 	.word	0x40568000

08002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b094      	sub	sp, #80	; 0x50
 800213c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002142:	2228      	movs	r2, #40	; 0x28
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f005 ff2a 	bl	8007fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002168:	2302      	movs	r3, #2
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800216c:	2301      	movs	r3, #1
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002170:	2310      	movs	r3, #16
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002174:	2300      	movs	r3, #0
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217c:	4618      	mov	r0, r3
 800217e:	f003 f9dd 	bl	800553c <HAL_RCC_OscConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002188:	f000 face 	bl	8002728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218c:	230f      	movs	r3, #15
 800218e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 fc49 	bl	8005a40 <HAL_RCC_ClockConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80021b4:	f000 fab8 	bl	8002728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021b8:	2302      	movs	r3, #2
 80021ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80021bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 fdd3 	bl	8005d70 <HAL_RCCEx_PeriphCLKConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021d0:	f000 faaa 	bl	8002728 <Error_Handler>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3750      	adds	r7, #80	; 0x50
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_ADC1_Init+0x74>)
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <MX_ADC1_Init+0x78>)
 80021f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MX_ADC1_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <MX_ADC1_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_ADC1_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <MX_ADC1_Init+0x74>)
 8002206:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800220a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <MX_ADC1_Init+0x74>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_ADC1_Init+0x74>)
 8002214:	2201      	movs	r2, #1
 8002216:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <MX_ADC1_Init+0x74>)
 800221a:	f001 f905 	bl	8003428 <HAL_ADC_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002224:	f000 fa80 	bl	8002728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002228:	2304      	movs	r3, #4
 800222a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800222c:	2301      	movs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_ADC1_Init+0x74>)
 800223a:	f001 f9cd 	bl	80035d8 <HAL_ADC_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002244:	f000 fa70 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200002e4 	.word	0x200002e4
 8002254:	40012400 	.word	0x40012400

08002258 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <MX_I2C2_Init+0x54>)
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <MX_I2C2_Init+0x58>)
 8002260:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 5000;
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <MX_I2C2_Init+0x54>)
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <MX_I2C2_Init+0x54>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_I2C2_Init+0x54>)
 8002272:	22d2      	movs	r2, #210	; 0xd2
 8002274:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <MX_I2C2_Init+0x54>)
 8002278:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800227c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_I2C2_Init+0x54>)
 8002280:	2200      	movs	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_I2C2_Init+0x54>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_I2C2_Init+0x54>)
 800228c:	2200      	movs	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_I2C2_Init+0x54>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_I2C2_Init+0x54>)
 8002298:	f001 fe32 	bl	8003f00 <HAL_I2C_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 80022a2:	f000 fa41 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000314 	.word	0x20000314
 80022b0:	40005800 	.word	0x40005800

080022b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 fe6c 	bl	8007fa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <MX_TIM1_Init+0xa8>)
 80022d2:	4a23      	ldr	r2, [pc, #140]	; (8002360 <MX_TIM1_Init+0xac>)
 80022d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <MX_TIM1_Init+0xa8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <MX_TIM1_Init+0xa8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <MX_TIM1_Init+0xa8>)
 80022e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <MX_TIM1_Init+0xa8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <MX_TIM1_Init+0xa8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <MX_TIM1_Init+0xa8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022fc:	2303      	movs	r3, #3
 80022fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002300:	2302      	movs	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002304:	2301      	movs	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800230c:	2306      	movs	r3, #6
 800230e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002310:	2302      	movs	r3, #2
 8002312:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800231c:	2308      	movs	r3, #8
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	4619      	mov	r1, r3
 8002326:	480d      	ldr	r0, [pc, #52]	; (800235c <MX_TIM1_Init+0xa8>)
 8002328:	f004 f91c 	bl	8006564 <HAL_TIM_Encoder_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002332:	f000 f9f9 	bl	8002728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <MX_TIM1_Init+0xa8>)
 8002344:	f005 f996 	bl	8007674 <HAL_TIMEx_MasterConfigSynchronization>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800234e:	f000 f9eb 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	; 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000368 	.word	0x20000368
 8002360:	40012c00 	.word	0x40012c00

08002364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	f107 0320 	add.w	r3, r7, #32
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	615a      	str	r2, [r3, #20]
 8002392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002394:	4b33      	ldr	r3, [pc, #204]	; (8002464 <MX_TIM2_Init+0x100>)
 8002396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800239a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <MX_TIM2_Init+0x100>)
 800239e:	2203      	movs	r2, #3
 80023a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <MX_TIM2_Init+0x100>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 80023a8:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <MX_TIM2_Init+0x100>)
 80023aa:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80023ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <MX_TIM2_Init+0x100>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <MX_TIM2_Init+0x100>)
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023bc:	4829      	ldr	r0, [pc, #164]	; (8002464 <MX_TIM2_Init+0x100>)
 80023be:	f003 fd8d 	bl	8005edc <HAL_TIM_Base_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80023c8:	f000 f9ae 	bl	8002728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d6:	4619      	mov	r1, r3
 80023d8:	4822      	ldr	r0, [pc, #136]	; (8002464 <MX_TIM2_Init+0x100>)
 80023da:	f004 fc6d 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80023e4:	f000 f9a0 	bl	8002728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023e8:	481e      	ldr	r0, [pc, #120]	; (8002464 <MX_TIM2_Init+0x100>)
 80023ea:	f003 fe63 	bl	80060b4 <HAL_TIM_PWM_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80023f4:	f000 f998 	bl	8002728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002400:	f107 0320 	add.w	r3, r7, #32
 8002404:	4619      	mov	r1, r3
 8002406:	4817      	ldr	r0, [pc, #92]	; (8002464 <MX_TIM2_Init+0x100>)
 8002408:	f005 f934 	bl	8007674 <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002412:	f000 f989 	bl	8002728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002416:	2360      	movs	r3, #96	; 0x60
 8002418:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 800241a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800241e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2200      	movs	r2, #0
 800242c:	4619      	mov	r1, r3
 800242e:	480d      	ldr	r0, [pc, #52]	; (8002464 <MX_TIM2_Init+0x100>)
 8002430:	f004 fb84 	bl	8006b3c <HAL_TIM_PWM_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800243a:	f000 f975 	bl	8002728 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2204      	movs	r2, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4807      	ldr	r0, [pc, #28]	; (8002464 <MX_TIM2_Init+0x100>)
 8002446:	f004 fb79 	bl	8006b3c <HAL_TIM_PWM_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002450:	f000 f96a 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <MX_TIM2_Init+0x100>)
 8002456:	f000 fb99 	bl	8002b8c <HAL_TIM_MspPostInit>

}
 800245a:	bf00      	nop
 800245c:	3738      	adds	r7, #56	; 0x38
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200003b0 	.word	0x200003b0

08002468 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0318 	add.w	r3, r7, #24
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002486:	463b      	mov	r3, r7
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <MX_TIM3_Init+0xf0>)
 8002494:	4a31      	ldr	r2, [pc, #196]	; (800255c <MX_TIM3_Init+0xf4>)
 8002496:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <MX_TIM3_Init+0xf0>)
 800249a:	2207      	movs	r2, #7
 800249c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <MX_TIM3_Init+0xf0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <MX_TIM3_Init+0xf0>)
 80024a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <MX_TIM3_Init+0xf0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <MX_TIM3_Init+0xf0>)
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <MX_TIM3_Init+0xf0>)
 80024ba:	f003 fd0f 	bl	8005edc <HAL_TIM_Base_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80024c4:	f000 f930 	bl	8002728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ce:	f107 0318 	add.w	r3, r7, #24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4820      	ldr	r0, [pc, #128]	; (8002558 <MX_TIM3_Init+0xf0>)
 80024d6:	f004 fbef 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024e0:	f000 f922 	bl	8002728 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80024e4:	481c      	ldr	r0, [pc, #112]	; (8002558 <MX_TIM3_Init+0xf0>)
 80024e6:	f003 fedf 	bl	80062a8 <HAL_TIM_IC_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80024f0:	f000 f91a 	bl	8002728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	4815      	ldr	r0, [pc, #84]	; (8002558 <MX_TIM3_Init+0xf0>)
 8002504:	f005 f8b6 	bl	8007674 <HAL_TIMEx_MasterConfigSynchronization>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800250e:	f000 f90b 	bl	8002728 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002516:	2301      	movs	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002522:	463b      	mov	r3, r7
 8002524:	2204      	movs	r2, #4
 8002526:	4619      	mov	r1, r3
 8002528:	480b      	ldr	r0, [pc, #44]	; (8002558 <MX_TIM3_Init+0xf0>)
 800252a:	f004 fa73 	bl	8006a14 <HAL_TIM_IC_ConfigChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002534:	f000 f8f8 	bl	8002728 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002538:	463b      	mov	r3, r7
 800253a:	2208      	movs	r2, #8
 800253c:	4619      	mov	r1, r3
 800253e:	4806      	ldr	r0, [pc, #24]	; (8002558 <MX_TIM3_Init+0xf0>)
 8002540:	f004 fa68 	bl	8006a14 <HAL_TIM_IC_ConfigChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800254a:	f000 f8ed 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200003f8 	.word	0x200003f8
 800255c:	40000400 	.word	0x40000400

08002560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <MX_USART2_UART_Init+0x50>)
 8002568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 800256c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_USART2_UART_Init+0x4c>)
 8002598:	f005 f8dc 	bl	8007754 <HAL_UART_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025a2:	f000 f8c1 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000440 	.word	0x20000440
 80025b0:	40004400 	.word	0x40004400

080025b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <MX_GPIO_Init+0x128>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a43      	ldr	r2, [pc, #268]	; (80026dc <MX_GPIO_Init+0x128>)
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b41      	ldr	r3, [pc, #260]	; (80026dc <MX_GPIO_Init+0x128>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e0:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <MX_GPIO_Init+0x128>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a3d      	ldr	r2, [pc, #244]	; (80026dc <MX_GPIO_Init+0x128>)
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <MX_GPIO_Init+0x128>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b38      	ldr	r3, [pc, #224]	; (80026dc <MX_GPIO_Init+0x128>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a37      	ldr	r2, [pc, #220]	; (80026dc <MX_GPIO_Init+0x128>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <MX_GPIO_Init+0x128>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <MX_GPIO_Init+0x128>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <MX_GPIO_Init+0x128>)
 8002616:	f043 0308 	orr.w	r3, r3, #8
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <MX_GPIO_Init+0x128>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002628:	2200      	movs	r2, #0
 800262a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800262e:	482c      	ldr	r0, [pc, #176]	; (80026e0 <MX_GPIO_Init+0x12c>)
 8002630:	f001 fc4e 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	482a      	ldr	r0, [pc, #168]	; (80026e4 <MX_GPIO_Init+0x130>)
 800263a:	f001 fc49 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIDE_TRIG_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	215a      	movs	r1, #90	; 0x5a
 8002642:	4829      	ldr	r0, [pc, #164]	; (80026e8 <MX_GPIO_Init+0x134>)
 8002644:	f001 fc44 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264e:	2301      	movs	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2302      	movs	r3, #2
 8002658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4619      	mov	r1, r3
 8002660:	481f      	ldr	r0, [pc, #124]	; (80026e0 <MX_GPIO_Init+0x12c>)
 8002662:	f001 fab1 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8002666:	2320      	movs	r3, #32
 8002668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8002672:	f107 0310 	add.w	r3, r7, #16
 8002676:	4619      	mov	r1, r3
 8002678:	481a      	ldr	r0, [pc, #104]	; (80026e4 <MX_GPIO_Init+0x130>)
 800267a:	f001 faa5 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 800267e:	2340      	movs	r3, #64	; 0x40
 8002680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2302      	movs	r3, #2
 800268c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	4619      	mov	r1, r3
 8002694:	4813      	ldr	r0, [pc, #76]	; (80026e4 <MX_GPIO_Init+0x130>)
 8002696:	f001 fa97 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 800269a:	2302      	movs	r3, #2
 800269c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269e:	2301      	movs	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4619      	mov	r1, r3
 80026b0:	480d      	ldr	r0, [pc, #52]	; (80026e8 <MX_GPIO_Init+0x134>)
 80026b2:	f001 fa89 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80026b6:	2358      	movs	r3, #88	; 0x58
 80026b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ba:	2301      	movs	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0310 	add.w	r3, r7, #16
 80026ca:	4619      	mov	r1, r3
 80026cc:	4806      	ldr	r0, [pc, #24]	; (80026e8 <MX_GPIO_Init+0x134>)
 80026ce:	f001 fa7b 	bl	8003bc8 <HAL_GPIO_Init>

}
 80026d2:	bf00      	nop
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40011000 	.word	0x40011000
 80026e4:	40010800 	.word	0x40010800
 80026e8:	40010c00 	.word	0x40010c00

080026ec <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_TIM_IC_CaptureCallback+0x34>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d103      	bne.n	8002706 <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		encoder_timer_input_CC (htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f81a 	bl	8002738 <encoder_timer_input_CC>
	else if (htim->Instance == TIM3) //ultrasonic
	{
		HCSR04_timer_input_CC (htim);
	}

}
 8002704:	e007      	b.n	8002716 <HAL_TIM_IC_CaptureCallback+0x2a>
	else if (htim->Instance == TIM3) //ultrasonic
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_TIM_IC_CaptureCallback+0x38>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d102      	bne.n	8002716 <HAL_TIM_IC_CaptureCallback+0x2a>
		HCSR04_timer_input_CC (htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fbf1 	bl	8002ef8 <HCSR04_timer_input_CC>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40000400 	.word	0x40000400

08002728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002730:	e7fe      	b.n	8002730 <Error_Handler+0x8>
 8002732:	0000      	movs	r0, r0
 8002734:	0000      	movs	r0, r0
	...

08002738 <encoder_timer_input_CC>:
		0.07042/2.0,
		0
};

void encoder_timer_input_CC (TIM_HandleTypeDef *htim)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	Motor_Encoder *right_motor_encoder;
	right_motor_encoder= &right_encoder;
 8002740:	4b35      	ldr	r3, [pc, #212]	; (8002818 <encoder_timer_input_CC+0xe0>)
 8002742:	60fb      	str	r3, [r7, #12]

	//CW is positive
	counter = __HAL_TIM_GET_COUNTER(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	4a34      	ldr	r2, [pc, #208]	; (800281c <encoder_timer_input_CC+0xe4>)
 800274c:	6013      	str	r3, [r2, #0]
	right_motor_encoder->counter = counter;
 800274e:	4b33      	ldr	r3, [pc, #204]	; (800281c <encoder_timer_input_CC+0xe4>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	601a      	str	r2, [r3, #0]

	// overflow update
	if (counter == 65535){
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <encoder_timer_input_CC+0xe4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275e:	4293      	cmp	r3, r2
 8002760:	d104      	bne.n	800276c <encoder_timer_input_CC+0x34>
		right_motor_encoder->overflow++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	//count becomes negative rather than jumping to 65000
//	count = (int16_t)counter;
	count = counter + (right_motor_encoder->overflow*65535);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002770:	4613      	mov	r3, r2
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	1a9a      	subs	r2, r3, r2
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <encoder_timer_input_CC+0xe4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a28      	ldr	r2, [pc, #160]	; (8002820 <encoder_timer_input_CC+0xe8>)
 800277e:	6013      	str	r3, [r2, #0]
	right_motor_encoder->count = count;
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <encoder_timer_input_CC+0xe8>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]

	//a single count normally is counted by 4 points, will have to test the number
	position = count/4;
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <encoder_timer_input_CC+0xe8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <encoder_timer_input_CC+0xec>)
 8002790:	6013      	str	r3, [r2, #0]
	right_motor_encoder->position = position;
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <encoder_timer_input_CC+0xec>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]

	distance = (2*3.1415*right_motor_encoder->wheel_radius) * position/24.0 /3.0; // might have consider gear ratio in this calculation
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80027a0:	a31b      	add	r3, pc, #108	; (adr r3, 8002810 <encoder_timer_input_CC+0xd8>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd fe97 	bl	80004d8 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4614      	mov	r4, r2
 80027b0:	461d      	mov	r5, r3
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <encoder_timer_input_CC+0xec>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fe14 	bl	80003e4 <__aeabi_ui2d>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd fe88 	bl	80004d8 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <encoder_timer_input_CC+0xf0>)
 80027d6:	f7fd ffa9 	bl	800072c <__aeabi_ddiv>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <encoder_timer_input_CC+0xf4>)
 80027e8:	f7fd ffa0 	bl	800072c <__aeabi_ddiv>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	490f      	ldr	r1, [pc, #60]	; (8002830 <encoder_timer_input_CC+0xf8>)
 80027f2:	e9c1 2300 	strd	r2, r3, [r1]
	right_motor_encoder->distance = distance;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <encoder_timer_input_CC+0xf8>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bdb0      	pop	{r4, r5, r7, pc}
 800280a:	bf00      	nop
 800280c:	f3af 8000 	nop.w
 8002810:	c083126f 	.word	0xc083126f
 8002814:	401921ca 	.word	0x401921ca
 8002818:	20000010 	.word	0x20000010
 800281c:	2000048c 	.word	0x2000048c
 8002820:	20000490 	.word	0x20000490
 8002824:	20000494 	.word	0x20000494
 8002828:	40380000 	.word	0x40380000
 800282c:	40080000 	.word	0x40080000
 8002830:	20000498 	.word	0x20000498

08002834 <reset_distance>:

void reset_distance(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
	Motor_Encoder *right_motor_encoder;
	right_motor_encoder= &right_encoder;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <reset_distance+0x44>)
 8002846:	60fb      	str	r3, [r7, #12]
	right_motor_encoder->counter = 0;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
	right_motor_encoder->count = 0;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
	right_motor_encoder->position = 0;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
	right_motor_encoder->distance = 0;
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9c1 2308 	strd	r2, r3, [r1, #32]
	right_motor_encoder->overflow = 0;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	20000010 	.word	0x20000010

0800287c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_MspInit+0x5c>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_MspInit+0x5c>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6193      	str	r3, [r2, #24]
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_MspInit+0x5c>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_MspInit+0x5c>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_MspInit+0x5c>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	61d3      	str	r3, [r2, #28]
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_MspInit+0x5c>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_MspInit+0x60>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_MspInit+0x60>)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000

080028e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_ADC_MspInit+0x6c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d121      	bne.n	8002944 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_ADC_MspInit+0x70>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_ADC_MspInit+0x70>)
 8002906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_ADC_MspInit+0x70>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_ADC_MspInit+0x70>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_ADC_MspInit+0x70>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_ADC_MspInit+0x70>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8002930:	2310      	movs	r3, #16
 8002932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002934:	2303      	movs	r3, #3
 8002936:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <HAL_ADC_MspInit+0x74>)
 8002940:	f001 f942 	bl	8003bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002944:	bf00      	nop
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40012400 	.word	0x40012400
 8002950:	40021000 	.word	0x40021000
 8002954:	40010800 	.word	0x40010800

08002958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <HAL_I2C_MspInit+0x84>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d12c      	bne.n	80029d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 800297e:	f043 0308 	orr.w	r3, r3, #8
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8002990:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002996:	2312      	movs	r3, #18
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4619      	mov	r1, r3
 80029a4:	480f      	ldr	r0, [pc, #60]	; (80029e4 <HAL_I2C_MspInit+0x8c>)
 80029a6:	f001 f90f 	bl	8003bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b4:	61d3      	str	r3, [r2, #28]
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2022      	movs	r0, #34	; 0x22
 80029c8:	f001 f817 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80029cc:	2022      	movs	r0, #34	; 0x22
 80029ce:	f001 f830 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029d2:	bf00      	nop
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40005800 	.word	0x40005800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010c00 	.word	0x40010c00

080029e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <HAL_TIM_Encoder_MspInit+0xb4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d144      	bne.n	8002a92 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6193      	str	r3, [r2, #24]
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8002a4e:	f001 f8bb 	bl	8003bc8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	2018      	movs	r0, #24
 8002a58:	f000 ffcf 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002a5c:	2018      	movs	r0, #24
 8002a5e:	f000 ffe8 	bl	8003a32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2019      	movs	r0, #25
 8002a68:	f000 ffc7 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a6c:	2019      	movs	r0, #25
 8002a6e:	f000 ffe0 	bl	8003a32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	201a      	movs	r0, #26
 8002a78:	f000 ffbf 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002a7c:	201a      	movs	r0, #26
 8002a7e:	f000 ffd8 	bl	8003a32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	201b      	movs	r0, #27
 8002a88:	f000 ffb7 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a8c:	201b      	movs	r0, #27
 8002a8e:	f000 ffd0 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40010800 	.word	0x40010800

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0318 	add.w	r3, r7, #24
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	61d3      	str	r3, [r2, #28]
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ae0:	e048      	b.n	8002b74 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_TIM_Base_MspInit+0xd8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d143      	bne.n	8002b74 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	61d3      	str	r3, [r2, #28]
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002b22:	f043 0308 	orr.w	r3, r3, #8
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	4619      	mov	r1, r3
 8002b46:	480f      	ldr	r0, [pc, #60]	; (8002b84 <HAL_TIM_Base_MspInit+0xdc>)
 8002b48:	f001 f83e 	bl	8003bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480a      	ldr	r0, [pc, #40]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b60:	f001 f832 	bl	8003bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	201d      	movs	r0, #29
 8002b6a:	f000 ff46 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b6e:	201d      	movs	r0, #29
 8002b70:	f000 ff5f 	bl	8003a32 <HAL_NVIC_EnableIRQ>
}
 8002b74:	bf00      	nop
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40010800 	.word	0x40010800
 8002b88:	40010c00 	.word	0x40010c00

08002b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d117      	bne.n	8002bdc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_TIM_MspPostInit+0x58>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a0c      	ldr	r2, [pc, #48]	; (8002be4 <HAL_TIM_MspPostInit+0x58>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_TIM_MspPostInit+0x58>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <HAL_TIM_MspPostInit+0x5c>)
 8002bd8:	f000 fff6 	bl	8003bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010800 	.word	0x40010800

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_UART_MspInit+0x98>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d137      	bne.n	8002c7c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	61d3      	str	r3, [r2, #28]
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6193      	str	r3, [r2, #24]
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_UART_MspInit+0x9c>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	480f      	ldr	r0, [pc, #60]	; (8002c8c <HAL_UART_MspInit+0xa0>)
 8002c50:	f000 ffba 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c54:	2308      	movs	r3, #8
 8002c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <HAL_UART_MspInit+0xa0>)
 8002c68:	f000 ffae 	bl	8003bc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2026      	movs	r0, #38	; 0x26
 8002c72:	f000 fec2 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c76:	2026      	movs	r0, #38	; 0x26
 8002c78:	f000 fedb 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c7c:	bf00      	nop
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40010800 	.word	0x40010800

08002c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <NMI_Handler+0x4>

08002c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <HardFault_Handler+0x4>

08002c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <MemManage_Handler+0x4>

08002ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca6:	e7fe      	b.n	8002ca6 <BusFault_Handler+0x4>

08002ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cac:	e7fe      	b.n	8002cac <UsageFault_Handler+0x4>

08002cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	af00      	add	r7, sp, #0
//
//		oldpos = position;
//		indx = 0;
//	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd6:	f000 fb5d 	bl	8003394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <TIM1_BRK_IRQHandler+0x10>)
 8002ce6:	f003 fd8d 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000368 	.word	0x20000368

08002cf4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <TIM1_UP_IRQHandler+0x10>)
 8002cfa:	f003 fd83 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000368 	.word	0x20000368

08002d08 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002d0e:	f003 fd79 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000368 	.word	0x20000368

08002d1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <TIM1_CC_IRQHandler+0x10>)
 8002d22:	f003 fd6f 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000368 	.word	0x20000368

08002d30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <TIM3_IRQHandler+0x10>)
 8002d36:	f003 fd65 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200003f8 	.word	0x200003f8

08002d44 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <I2C2_ER_IRQHandler+0x10>)
 8002d4a:	f001 fd7f 	bl	800484c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000314 	.word	0x20000314

08002d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <USART2_IRQHandler+0x10>)
 8002d5e:	f004 fd47 	bl	80077f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000440 	.word	0x20000440

08002d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	return 1;
 8002d70:	2301      	movs	r3, #1
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <_kill>:

int _kill(int pid, int sig)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d84:	f005 f8e2 	bl	8007f4c <__errno>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2216      	movs	r2, #22
 8002d8c:	601a      	str	r2, [r3, #0]
	return -1;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_exit>:

void _exit (int status)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002da2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffe7 	bl	8002d7a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dac:	e7fe      	b.n	8002dac <_exit+0x12>

08002dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e00a      	b.n	8002dd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dc0:	f3af 8000 	nop.w
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	60ba      	str	r2, [r7, #8]
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dbf0      	blt.n	8002dc0 <_read+0x12>
	}

return len;
 8002dde:	687b      	ldr	r3, [r7, #4]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e009      	b.n	8002e0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dbf1      	blt.n	8002dfa <_write+0x12>
	}
	return len;
 8002e16:	687b      	ldr	r3, [r7, #4]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_close>:

int _close(int file)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e46:	605a      	str	r2, [r3, #4]
	return 0;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <_isatty>:

int _isatty(int file)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	return 1;
 8002e5c:	2301      	movs	r3, #1
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e88:	4a14      	ldr	r2, [pc, #80]	; (8002edc <_sbrk+0x5c>)
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <_sbrk+0x60>)
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <_sbrk+0x64>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <_sbrk+0x64>)
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <_sbrk+0x68>)
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d207      	bcs.n	8002ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb0:	f005 f84c 	bl	8007f4c <__errno>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ebe:	e009      	b.n	8002ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <_sbrk+0x64>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <_sbrk+0x64>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <_sbrk+0x64>)
 8002ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20005000 	.word	0x20005000
 8002ee0:	00000400 	.word	0x00000400
 8002ee4:	200004a0 	.word	0x200004a0
 8002ee8:	200004b8 	.word	0x200004b8

08002eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HCSR04_timer_input_CC>:
	0,
	0
};

void HCSR04_timer_input_CC (TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7f1b      	ldrb	r3, [r3, #28]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f040 80e5 	bne.w	80030d4 <HCSR04_timer_input_CC+0x1dc>
	{
		if (Front_US.FIRST_CAPTURED==0) // if the first value is not captured
 8002f0a:	4b8a      	ldr	r3, [pc, #552]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f0c:	7f1b      	ldrb	r3, [r3, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d16a      	bne.n	8002fe8 <HCSR04_timer_input_CC+0xf0>
		{
			Front_US.VAL1 = HAL_TIM_ReadCapturedValue(htim, Front_US.IC_TIM_CH); // read the first value
 8002f12:	4b88      	ldr	r3, [pc, #544]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f003 ff91 	bl	8006e40 <HAL_TIM_ReadCapturedValue>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4a84      	ldr	r2, [pc, #528]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f22:	6113      	str	r3, [r2, #16]
	//			Front_US.VAL1 = __HAL_TIM_GET_COUNTER(htim);
			Front_US.FIRST_CAPTURED = 1;  // set the first captured as true
 8002f24:	4b83      	ldr	r3, [pc, #524]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	771a      	strb	r2, [r3, #28]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Front_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002f2a:	4b82      	ldr	r3, [pc, #520]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HCSR04_timer_input_CC+0x4c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 020a 	bic.w	r2, r2, #10
 8002f40:	621a      	str	r2, [r3, #32]
 8002f42:	e021      	b.n	8002f88 <HCSR04_timer_input_CC+0x90>
 8002f44:	4b7b      	ldr	r3, [pc, #492]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d108      	bne.n	8002f5e <HCSR04_timer_input_CC+0x66>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	e014      	b.n	8002f88 <HCSR04_timer_input_CC+0x90>
 8002f5e:	4b75      	ldr	r3, [pc, #468]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d108      	bne.n	8002f78 <HCSR04_timer_input_CC+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f74:	6213      	str	r3, [r2, #32]
 8002f76:	e007      	b.n	8002f88 <HCSR04_timer_input_CC+0x90>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f86:	6213      	str	r3, [r2, #32]
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d108      	bne.n	8002fa2 <HCSR04_timer_input_CC+0xaa>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0202 	orr.w	r2, r2, #2
 8002f9e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, Side_US.IC_TIM_CH);
		}
	}


}
 8002fa0:	e186      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Front_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002fa2:	4b64      	ldr	r3, [pc, #400]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d108      	bne.n	8002fbc <HCSR04_timer_input_CC+0xc4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	f043 0320 	orr.w	r3, r3, #32
 8002fb8:	6213      	str	r3, [r2, #32]
 8002fba:	e179      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
 8002fbc:	4b5d      	ldr	r3, [pc, #372]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d108      	bne.n	8002fd6 <HCSR04_timer_input_CC+0xde>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	e16c      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fe4:	6213      	str	r3, [r2, #32]
}
 8002fe6:	e163      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
		else if (Front_US.FIRST_CAPTURED==1)   // if the first is already captured
 8002fe8:	4b52      	ldr	r3, [pc, #328]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002fea:	7f1b      	ldrb	r3, [r3, #28]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 815f 	bne.w	80032b0 <HCSR04_timer_input_CC+0x3b8>
			Front_US.VAL2 = HAL_TIM_ReadCapturedValue(htim, Front_US.IC_TIM_CH);  // read second value
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f003 ff21 	bl	8006e40 <HAL_TIM_ReadCapturedValue>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a4c      	ldr	r2, [pc, #304]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8003002:	6153      	str	r3, [r2, #20]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
			Front_US.FIRST_CAPTURED = 0; // set back to false
 800300c:	4b49      	ldr	r3, [pc, #292]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 800300e:	2200      	movs	r2, #0
 8003010:	771a      	strb	r2, [r3, #28]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Front_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8003012:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HCSR04_timer_input_CC+0x134>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a1a      	ldr	r2, [r3, #32]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 020a 	bic.w	r2, r2, #10
 8003028:	621a      	str	r2, [r3, #32]
 800302a:	e021      	b.n	8003070 <HCSR04_timer_input_CC+0x178>
 800302c:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d108      	bne.n	8003046 <HCSR04_timer_input_CC+0x14e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	e014      	b.n	8003070 <HCSR04_timer_input_CC+0x178>
 8003046:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d108      	bne.n	8003060 <HCSR04_timer_input_CC+0x168>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800305c:	6213      	str	r3, [r2, #32]
 800305e:	e007      	b.n	8003070 <HCSR04_timer_input_CC+0x178>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800306e:	6213      	str	r3, [r2, #32]
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HCSR04_timer_input_CC+0x18e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a12      	ldr	r2, [r2, #32]
 8003082:	621a      	str	r2, [r3, #32]
 8003084:	e01b      	b.n	80030be <HCSR04_timer_input_CC+0x1c6>
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b04      	cmp	r3, #4
 800308c:	d106      	bne.n	800309c <HCSR04_timer_input_CC+0x1a4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	6213      	str	r3, [r2, #32]
 800309a:	e010      	b.n	80030be <HCSR04_timer_input_CC+0x1c6>
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d106      	bne.n	80030b2 <HCSR04_timer_input_CC+0x1ba>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	e005      	b.n	80030be <HCSR04_timer_input_CC+0x1c6>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, Front_US.IC_TIM_CH);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68d9      	ldr	r1, [r3, #12]
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HCSR04_timer_input_CC+0x23c>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	43da      	mvns	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	400a      	ands	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
}
 80030d2:	e0ed      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7f1b      	ldrb	r3, [r3, #28]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	f040 80e9 	bne.w	80032b0 <HCSR04_timer_input_CC+0x3b8>
		if (Side_US.FIRST_CAPTURED==0) // if the first value is not captured
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HCSR04_timer_input_CC+0x240>)
 80030e0:	7f1b      	ldrb	r3, [r3, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d16f      	bne.n	80031c6 <HCSR04_timer_input_CC+0x2ce>
			Side_US.VAL1 = HAL_TIM_ReadCapturedValue(htim, Side_US.IC_TIM_CH); // read the first value
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HCSR04_timer_input_CC+0x240>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f003 fea7 	bl	8006e40 <HAL_TIM_ReadCapturedValue>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4a10      	ldr	r2, [pc, #64]	; (8003138 <HCSR04_timer_input_CC+0x240>)
 80030f6:	6113      	str	r3, [r2, #16]
			Side_US.FIRST_CAPTURED = 1;  // set the first captured as true
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HCSR04_timer_input_CC+0x240>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	771a      	strb	r2, [r3, #28]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Side_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HCSR04_timer_input_CC+0x240>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HCSR04_timer_input_CC+0x220>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a1a      	ldr	r2, [r3, #32]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 020a 	bic.w	r2, r2, #10
 8003114:	621a      	str	r2, [r3, #32]
 8003116:	e026      	b.n	8003166 <HCSR04_timer_input_CC+0x26e>
 8003118:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HCSR04_timer_input_CC+0x240>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d10d      	bne.n	800313c <HCSR04_timer_input_CC+0x244>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	e019      	b.n	8003166 <HCSR04_timer_input_CC+0x26e>
 8003132:	bf00      	nop
 8003134:	20000050 	.word	0x20000050
 8003138:	20000080 	.word	0x20000080
 800313c:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d108      	bne.n	8003156 <HCSR04_timer_input_CC+0x25e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e007      	b.n	8003166 <HCSR04_timer_input_CC+0x26e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003164:	6213      	str	r3, [r2, #32]
 8003166:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HCSR04_timer_input_CC+0x288>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0202 	orr.w	r2, r2, #2
 800317c:	621a      	str	r2, [r3, #32]
}
 800317e:	e097      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Side_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003180:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d108      	bne.n	800319a <HCSR04_timer_input_CC+0x2a2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	f043 0320 	orr.w	r3, r3, #32
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e08a      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d108      	bne.n	80031b4 <HCSR04_timer_input_CC+0x2bc>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	e07d      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031c2:	6213      	str	r3, [r2, #32]
}
 80031c4:	e074      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
		else if (Side_US.FIRST_CAPTURED==1)   // if the first is already captured
 80031c6:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 80031c8:	7f1b      	ldrb	r3, [r3, #28]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d170      	bne.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
			Side_US.VAL2 = HAL_TIM_ReadCapturedValue(htim, Side_US.IC_TIM_CH);  // read second value
 80031ce:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f003 fe33 	bl	8006e40 <HAL_TIM_ReadCapturedValue>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 80031de:	6153      	str	r3, [r2, #20]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2200      	movs	r2, #0
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
			Side_US.FIRST_CAPTURED = 0; // set back to false
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	771a      	strb	r2, [r3, #28]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Side_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HCSR04_timer_input_CC+0x310>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6a1a      	ldr	r2, [r3, #32]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 020a 	bic.w	r2, r2, #10
 8003204:	621a      	str	r2, [r3, #32]
 8003206:	e021      	b.n	800324c <HCSR04_timer_input_CC+0x354>
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d108      	bne.n	8003222 <HCSR04_timer_input_CC+0x32a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e014      	b.n	800324c <HCSR04_timer_input_CC+0x354>
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d108      	bne.n	800323c <HCSR04_timer_input_CC+0x344>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003238:	6213      	str	r3, [r2, #32]
 800323a:	e007      	b.n	800324c <HCSR04_timer_input_CC+0x354>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HCSR04_timer_input_CC+0x36a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a12      	ldr	r2, [r2, #32]
 800325e:	621a      	str	r2, [r3, #32]
 8003260:	e01b      	b.n	800329a <HCSR04_timer_input_CC+0x3a2>
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d106      	bne.n	8003278 <HCSR04_timer_input_CC+0x380>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	e010      	b.n	800329a <HCSR04_timer_input_CC+0x3a2>
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d106      	bne.n	800328e <HCSR04_timer_input_CC+0x396>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	6213      	str	r3, [r2, #32]
 800328c:	e005      	b.n	800329a <HCSR04_timer_input_CC+0x3a2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, Side_US.IC_TIM_CH);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68d9      	ldr	r1, [r3, #12]
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HCSR04_timer_input_CC+0x3c0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	400a      	ands	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
}
 80032ae:	e7ff      	b.n	80032b0 <HCSR04_timer_input_CC+0x3b8>
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000080 	.word	0x20000080

080032bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80032bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80032be:	e003      	b.n	80032c8 <LoopCopyDataInit>

080032c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80032c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80032c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80032c6:	3104      	adds	r1, #4

080032c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80032c8:	480a      	ldr	r0, [pc, #40]	; (80032f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80032cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80032ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80032d0:	d3f6      	bcc.n	80032c0 <CopyDataInit>
  ldr r2, =_sbss
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80032d4:	e002      	b.n	80032dc <LoopFillZerobss>

080032d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80032d8:	f842 3b04 	str.w	r3, [r2], #4

080032dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80032de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80032e0:	d3f9      	bcc.n	80032d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032e2:	f7ff fe03 	bl	8002eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032e6:	f004 fe37 	bl	8007f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ea:	f7fe fe3b 	bl	8001f64 <main>
  bx lr
 80032ee:	4770      	bx	lr
  ldr r3, =_sidata
 80032f0:	0800adf4 	.word	0x0800adf4
  ldr r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80032f8:	20000288 	.word	0x20000288
  ldr r2, =_sbss
 80032fc:	20000288 	.word	0x20000288
  ldr r3, = _ebss
 8003300:	200004b8 	.word	0x200004b8

08003304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003304:	e7fe      	b.n	8003304 <ADC1_2_IRQHandler>
	...

08003308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_Init+0x28>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <HAL_Init+0x28>)
 8003312:	f043 0310 	orr.w	r3, r3, #16
 8003316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003318:	2003      	movs	r0, #3
 800331a:	f000 fb63 	bl	80039e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800331e:	2000      	movs	r0, #0
 8003320:	f000 f808 	bl	8003334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003324:	f7ff faaa 	bl	800287c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40022000 	.word	0x40022000

08003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_InitTick+0x54>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_InitTick+0x58>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334a:	fbb3 f3f1 	udiv	r3, r3, r1
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fb7b 	bl	8003a4e <HAL_SYSTICK_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00e      	b.n	8003380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d80a      	bhi.n	800337e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003368:	2200      	movs	r2, #0
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003370:	f000 fb43 	bl	80039fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003374:	4a06      	ldr	r2, [pc, #24]	; (8003390 <HAL_InitTick+0x5c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000048 	.word	0x20000048
 800338c:	200000b4 	.word	0x200000b4
 8003390:	200000b0 	.word	0x200000b0

08003394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_IncTick+0x1c>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_IncTick+0x20>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a03      	ldr	r2, [pc, #12]	; (80033b4 <HAL_IncTick+0x20>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	200000b4 	.word	0x200000b4
 80033b4:	200004a4 	.word	0x200004a4

080033b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return uwTick;
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <HAL_GetTick+0x10>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	200004a4 	.word	0x200004a4

080033cc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <HAL_GetTickFreq+0x10>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	200000b4 	.word	0x200000b4

080033e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff ffe6 	bl	80033b8 <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f8:	d005      	beq.n	8003406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_Delay+0x44>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003406:	bf00      	nop
 8003408:	f7ff ffd6 	bl	80033b8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d8f7      	bhi.n	8003408 <HAL_Delay+0x28>
  {
  }
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200000b4 	.word	0x200000b4

08003428 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0be      	b.n	80035c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fa3a 	bl	80028e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f9ab 	bl	80037c8 <ADC_ConversionStop_Disable>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 8099 	bne.w	80035b6 <HAL_ADC_Init+0x18e>
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8095 	bne.w	80035b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003494:	f023 0302 	bic.w	r3, r3, #2
 8003498:	f043 0202 	orr.w	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7b1b      	ldrb	r3, [r3, #12]
 80034ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c0:	d003      	beq.n	80034ca <HAL_ADC_Init+0xa2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_ADC_Init+0xa8>
 80034ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_Init+0xaa>
 80034d0:	2300      	movs	r3, #0
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7d1b      	ldrb	r3, [r3, #20]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d119      	bne.n	8003514 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7b1b      	ldrb	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	035a      	lsls	r2, r3, #13
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	e00b      	b.n	8003514 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_ADC_Init+0x1a8>)
 8003530:	4013      	ands	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	430b      	orrs	r3, r1
 800353a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003544:	d003      	beq.n	800354e <HAL_ADC_Init+0x126>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d104      	bne.n	8003558 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	3b01      	subs	r3, #1
 8003554:	051b      	lsls	r3, r3, #20
 8003556:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	430a      	orrs	r2, r1
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_ADC_Init+0x1ac>)
 8003574:	4013      	ands	r3, r2
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	d10b      	bne.n	8003594 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003592:	e018      	b.n	80035c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	f023 0312 	bic.w	r3, r3, #18
 800359c:	f043 0210 	orr.w	r2, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035b4:	e007      	b.n	80035c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	ffe1f7fd 	.word	0xffe1f7fd
 80035d4:	ff1f0efe 	.word	0xff1f0efe

080035d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x20>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e0dc      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x1da>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b06      	cmp	r3, #6
 8003606:	d81c      	bhi.n	8003642 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	3b05      	subs	r3, #5
 800361a:	221f      	movs	r2, #31
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	4019      	ands	r1, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	3b05      	subs	r3, #5
 8003634:	fa00 f203 	lsl.w	r2, r0, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	635a      	str	r2, [r3, #52]	; 0x34
 8003640:	e03c      	b.n	80036bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d81c      	bhi.n	8003684 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	3b23      	subs	r3, #35	; 0x23
 800365c:	221f      	movs	r2, #31
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	4019      	ands	r1, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b23      	subs	r3, #35	; 0x23
 8003676:	fa00 f203 	lsl.w	r2, r0, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
 8003682:	e01b      	b.n	80036bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	3b41      	subs	r3, #65	; 0x41
 8003696:	221f      	movs	r2, #31
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	4019      	ands	r1, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	3b41      	subs	r3, #65	; 0x41
 80036b0:	fa00 f203 	lsl.w	r2, r0, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b09      	cmp	r3, #9
 80036c2:	d91c      	bls.n	80036fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68d9      	ldr	r1, [r3, #12]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	3b1e      	subs	r3, #30
 80036d6:	2207      	movs	r2, #7
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	4019      	ands	r1, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6898      	ldr	r0, [r3, #8]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	3b1e      	subs	r3, #30
 80036f0:	fa00 f203 	lsl.w	r2, r0, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	e019      	b.n	8003732 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6919      	ldr	r1, [r3, #16]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	2207      	movs	r2, #7
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	4019      	ands	r1, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6898      	ldr	r0, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	fa00 f203 	lsl.w	r2, r0, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d003      	beq.n	8003742 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800373e:	2b11      	cmp	r3, #17
 8003740:	d132      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_ADC_ConfigChannel+0x1e4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d125      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d126      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003768:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b10      	cmp	r3, #16
 8003770:	d11a      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	0c9a      	lsrs	r2, r3, #18
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003788:	e002      	b.n	8003790 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3b01      	subs	r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f9      	bne.n	800378a <HAL_ADC_ConfigChannel+0x1b2>
 8003796:	e007      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	40012400 	.word	0x40012400
 80037c0:	20000048 	.word	0x20000048
 80037c4:	431bde83 	.word	0x431bde83

080037c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d12e      	bne.n	8003840 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037f2:	f7ff fde1 	bl	80033b8 <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037f8:	e01b      	b.n	8003832 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037fa:	f7ff fddd 	bl	80033b8 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d914      	bls.n	8003832 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10d      	bne.n	8003832 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f043 0210 	orr.w	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e007      	b.n	8003842 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d0dc      	beq.n	80037fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4906      	ldr	r1, [pc, #24]	; (80038e4 <__NVIC_EnableIRQ+0x34>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	; (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	; (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1c3 0307 	rsb	r3, r3, #7
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf28      	it	cs
 800395a:	2304      	movcs	r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3304      	adds	r3, #4
 8003962:	2b06      	cmp	r3, #6
 8003964:	d902      	bls.n	800396c <NVIC_EncodePriority+0x30>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b03      	subs	r3, #3
 800396a:	e000      	b.n	800396e <NVIC_EncodePriority+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43d9      	mvns	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	4313      	orrs	r3, r2
         );
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b0:	d301      	bcc.n	80039b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00f      	b.n	80039d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <SysTick_Config+0x40>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039be:	210f      	movs	r1, #15
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039c4:	f7ff ff90 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <SysTick_Config+0x40>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SysTick_Config+0x40>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	e000e010 	.word	0xe000e010

080039e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff2d 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a0c:	f7ff ff42 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f7ff ff90 	bl	800393c <NVIC_EncodePriority>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff5f 	bl	80038e8 <__NVIC_SetPriority>
}
 8003a2a:	bf00      	nop
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff35 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffa2 	bl	80039a0 <SysTick_Config>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d008      	beq.n	8003a8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e020      	b.n	8003ad0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 020e 	bic.w	r2, r2, #14
 8003a9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d005      	beq.n	8003afe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e051      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 020e 	bic.w	r2, r2, #14
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a22      	ldr	r2, [pc, #136]	; (8003bac <HAL_DMA_Abort_IT+0xd0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d029      	beq.n	8003b7c <HAL_DMA_Abort_IT+0xa0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <HAL_DMA_Abort_IT+0xd4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x9c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_DMA_Abort_IT+0xd8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01a      	beq.n	8003b72 <HAL_DMA_Abort_IT+0x96>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_DMA_Abort_IT+0xdc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d012      	beq.n	8003b6c <HAL_DMA_Abort_IT+0x90>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_DMA_Abort_IT+0xe0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00a      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x8a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <HAL_DMA_Abort_IT+0xe4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d102      	bne.n	8003b60 <HAL_DMA_Abort_IT+0x84>
 8003b5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b5e:	e00e      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b64:	e00b      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b6a:	e008      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	e005      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b76:	e002      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	e000      	b.n	8003b7e <HAL_DMA_Abort_IT+0xa2>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HAL_DMA_Abort_IT+0xe8>)
 8003b80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    } 
  }
  return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40020008 	.word	0x40020008
 8003bb0:	4002001c 	.word	0x4002001c
 8003bb4:	40020030 	.word	0x40020030
 8003bb8:	40020044 	.word	0x40020044
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	4002006c 	.word	0x4002006c
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b08b      	sub	sp, #44	; 0x2c
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bda:	e169      	b.n	8003eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	f040 8158 	bne.w	8003eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a9a      	ldr	r2, [pc, #616]	; (8003e68 <HAL_GPIO_Init+0x2a0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d05e      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c04:	4a98      	ldr	r2, [pc, #608]	; (8003e68 <HAL_GPIO_Init+0x2a0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d875      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c0a:	4a98      	ldr	r2, [pc, #608]	; (8003e6c <HAL_GPIO_Init+0x2a4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d058      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c10:	4a96      	ldr	r2, [pc, #600]	; (8003e6c <HAL_GPIO_Init+0x2a4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d86f      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c16:	4a96      	ldr	r2, [pc, #600]	; (8003e70 <HAL_GPIO_Init+0x2a8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d052      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c1c:	4a94      	ldr	r2, [pc, #592]	; (8003e70 <HAL_GPIO_Init+0x2a8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d869      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c22:	4a94      	ldr	r2, [pc, #592]	; (8003e74 <HAL_GPIO_Init+0x2ac>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04c      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c28:	4a92      	ldr	r2, [pc, #584]	; (8003e74 <HAL_GPIO_Init+0x2ac>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d863      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c2e:	4a92      	ldr	r2, [pc, #584]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d046      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
 8003c34:	4a90      	ldr	r2, [pc, #576]	; (8003e78 <HAL_GPIO_Init+0x2b0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d85d      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c3a:	2b12      	cmp	r3, #18
 8003c3c:	d82a      	bhi.n	8003c94 <HAL_GPIO_Init+0xcc>
 8003c3e:	2b12      	cmp	r3, #18
 8003c40:	d859      	bhi.n	8003cf6 <HAL_GPIO_Init+0x12e>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_GPIO_Init+0x80>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003cc3 	.word	0x08003cc3
 8003c4c:	08003c9d 	.word	0x08003c9d
 8003c50:	08003caf 	.word	0x08003caf
 8003c54:	08003cf1 	.word	0x08003cf1
 8003c58:	08003cf7 	.word	0x08003cf7
 8003c5c:	08003cf7 	.word	0x08003cf7
 8003c60:	08003cf7 	.word	0x08003cf7
 8003c64:	08003cf7 	.word	0x08003cf7
 8003c68:	08003cf7 	.word	0x08003cf7
 8003c6c:	08003cf7 	.word	0x08003cf7
 8003c70:	08003cf7 	.word	0x08003cf7
 8003c74:	08003cf7 	.word	0x08003cf7
 8003c78:	08003cf7 	.word	0x08003cf7
 8003c7c:	08003cf7 	.word	0x08003cf7
 8003c80:	08003cf7 	.word	0x08003cf7
 8003c84:	08003cf7 	.word	0x08003cf7
 8003c88:	08003cf7 	.word	0x08003cf7
 8003c8c:	08003ca5 	.word	0x08003ca5
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	4a79      	ldr	r2, [pc, #484]	; (8003e7c <HAL_GPIO_Init+0x2b4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c9a:	e02c      	b.n	8003cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	623b      	str	r3, [r7, #32]
          break;
 8003ca2:	e029      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	623b      	str	r3, [r7, #32]
          break;
 8003cac:	e024      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	623b      	str	r3, [r7, #32]
          break;
 8003cb6:	e01f      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	623b      	str	r3, [r7, #32]
          break;
 8003cc0:	e01a      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cca:	2304      	movs	r3, #4
 8003ccc:	623b      	str	r3, [r7, #32]
          break;
 8003cce:	e013      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd8:	2308      	movs	r3, #8
 8003cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	611a      	str	r2, [r3, #16]
          break;
 8003ce2:	e009      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	615a      	str	r2, [r3, #20]
          break;
 8003cee:	e003      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	623b      	str	r3, [r7, #32]
          break;
 8003cf4:	e000      	b.n	8003cf8 <HAL_GPIO_Init+0x130>
          break;
 8003cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2bff      	cmp	r3, #255	; 0xff
 8003cfc:	d801      	bhi.n	8003d02 <HAL_GPIO_Init+0x13a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	e001      	b.n	8003d06 <HAL_GPIO_Init+0x13e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2bff      	cmp	r3, #255	; 0xff
 8003d0c:	d802      	bhi.n	8003d14 <HAL_GPIO_Init+0x14c>
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	e002      	b.n	8003d1a <HAL_GPIO_Init+0x152>
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	3b08      	subs	r3, #8
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	210f      	movs	r1, #15
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80b1 	beq.w	8003eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d48:	4b4d      	ldr	r3, [pc, #308]	; (8003e80 <HAL_GPIO_Init+0x2b8>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a4c      	ldr	r2, [pc, #304]	; (8003e80 <HAL_GPIO_Init+0x2b8>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b4a      	ldr	r3, [pc, #296]	; (8003e80 <HAL_GPIO_Init+0x2b8>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d60:	4a48      	ldr	r2, [pc, #288]	; (8003e84 <HAL_GPIO_Init+0x2bc>)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <HAL_GPIO_Init+0x2c0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_GPIO_Init+0x1ec>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3f      	ldr	r2, [pc, #252]	; (8003e8c <HAL_GPIO_Init+0x2c4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00d      	beq.n	8003db0 <HAL_GPIO_Init+0x1e8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3e      	ldr	r2, [pc, #248]	; (8003e90 <HAL_GPIO_Init+0x2c8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <HAL_GPIO_Init+0x1e4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3d      	ldr	r2, [pc, #244]	; (8003e94 <HAL_GPIO_Init+0x2cc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_GPIO_Init+0x1e0>
 8003da4:	2303      	movs	r3, #3
 8003da6:	e006      	b.n	8003db6 <HAL_GPIO_Init+0x1ee>
 8003da8:	2304      	movs	r3, #4
 8003daa:	e004      	b.n	8003db6 <HAL_GPIO_Init+0x1ee>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e002      	b.n	8003db6 <HAL_GPIO_Init+0x1ee>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <HAL_GPIO_Init+0x1ee>
 8003db4:	2300      	movs	r3, #0
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	f002 0203 	and.w	r2, r2, #3
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	4093      	lsls	r3, r2
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dc6:	492f      	ldr	r1, [pc, #188]	; (8003e84 <HAL_GPIO_Init+0x2bc>)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	3302      	adds	r3, #2
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	492c      	ldr	r1, [pc, #176]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	4928      	ldr	r1, [pc, #160]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	4922      	ldr	r1, [pc, #136]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	e006      	b.n	8003e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	491e      	ldr	r1, [pc, #120]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d006      	beq.n	8003e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4918      	ldr	r1, [pc, #96]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
 8003e3c:	e006      	b.n	8003e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	4914      	ldr	r1, [pc, #80]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d021      	beq.n	8003e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	490e      	ldr	r1, [pc, #56]	; (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60cb      	str	r3, [r1, #12]
 8003e64:	e021      	b.n	8003eaa <HAL_GPIO_Init+0x2e2>
 8003e66:	bf00      	nop
 8003e68:	10320000 	.word	0x10320000
 8003e6c:	10310000 	.word	0x10310000
 8003e70:	10220000 	.word	0x10220000
 8003e74:	10210000 	.word	0x10210000
 8003e78:	10120000 	.word	0x10120000
 8003e7c:	10110000 	.word	0x10110000
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40010800 	.word	0x40010800
 8003e8c:	40010c00 	.word	0x40010c00
 8003e90:	40011000 	.word	0x40011000
 8003e94:	40011400 	.word	0x40011400
 8003e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_GPIO_Init+0x304>)
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	4909      	ldr	r1, [pc, #36]	; (8003ecc <HAL_GPIO_Init+0x304>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	3301      	adds	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f47f ae8e 	bne.w	8003bdc <HAL_GPIO_Init+0x14>
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	372c      	adds	r7, #44	; 0x2c
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	807b      	strh	r3, [r7, #2]
 8003edc:	4613      	mov	r3, r2
 8003ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee0:	787b      	ldrb	r3, [r7, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003eec:	e003      	b.n	8003ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	041a      	lsls	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	611a      	str	r2, [r3, #16]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e12b      	b.n	800416a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe fd16 	bl	8002958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f64:	f001 febe 	bl	8005ce4 <HAL_RCC_GetPCLK1Freq>
 8003f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a81      	ldr	r2, [pc, #516]	; (8004174 <HAL_I2C_Init+0x274>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d807      	bhi.n	8003f84 <HAL_I2C_Init+0x84>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a80      	ldr	r2, [pc, #512]	; (8004178 <HAL_I2C_Init+0x278>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	bf94      	ite	ls
 8003f7c:	2301      	movls	r3, #1
 8003f7e:	2300      	movhi	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e006      	b.n	8003f92 <HAL_I2C_Init+0x92>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a7d      	ldr	r2, [pc, #500]	; (800417c <HAL_I2C_Init+0x27c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	bf94      	ite	ls
 8003f8c:	2301      	movls	r3, #1
 8003f8e:	2300      	movhi	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0e7      	b.n	800416a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a78      	ldr	r2, [pc, #480]	; (8004180 <HAL_I2C_Init+0x280>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0c9b      	lsrs	r3, r3, #18
 8003fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a6a      	ldr	r2, [pc, #424]	; (8004174 <HAL_I2C_Init+0x274>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d802      	bhi.n	8003fd4 <HAL_I2C_Init+0xd4>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	e009      	b.n	8003fe8 <HAL_I2C_Init+0xe8>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	4a69      	ldr	r2, [pc, #420]	; (8004184 <HAL_I2C_Init+0x284>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	099b      	lsrs	r3, r3, #6
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	495c      	ldr	r1, [pc, #368]	; (8004174 <HAL_I2C_Init+0x274>)
 8004004:	428b      	cmp	r3, r1
 8004006:	d819      	bhi.n	800403c <HAL_I2C_Init+0x13c>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1e59      	subs	r1, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fbb1 f3f3 	udiv	r3, r1, r3
 8004016:	1c59      	adds	r1, r3, #1
 8004018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800401c:	400b      	ands	r3, r1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_I2C_Init+0x138>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1e59      	subs	r1, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004030:	3301      	adds	r3, #1
 8004032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004036:	e051      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 8004038:	2304      	movs	r3, #4
 800403a:	e04f      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d111      	bne.n	8004068 <HAL_I2C_Init+0x168>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1e58      	subs	r0, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	440b      	add	r3, r1
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e012      	b.n	800408e <HAL_I2C_Init+0x18e>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1e58      	subs	r0, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	0099      	lsls	r1, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	fbb0 f3f3 	udiv	r3, r0, r3
 800407e:	3301      	adds	r3, #1
 8004080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Init+0x196>
 8004092:	2301      	movs	r3, #1
 8004094:	e022      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10e      	bne.n	80040bc <HAL_I2C_Init+0x1bc>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1e58      	subs	r0, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6859      	ldr	r1, [r3, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	440b      	add	r3, r1
 80040ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ba:	e00f      	b.n	80040dc <HAL_I2C_Init+0x1dc>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e58      	subs	r0, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	0099      	lsls	r1, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	6809      	ldr	r1, [r1, #0]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800410a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6911      	ldr	r1, [r2, #16]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68d2      	ldr	r2, [r2, #12]
 8004116:	4311      	orrs	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	430b      	orrs	r3, r1
 800411e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	000186a0 	.word	0x000186a0
 8004178:	001e847f 	.word	0x001e847f
 800417c:	003d08ff 	.word	0x003d08ff
 8004180:	431bde83 	.word	0x431bde83
 8004184:	10624dd3 	.word	0x10624dd3

08004188 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4603      	mov	r3, r0
 8004198:	817b      	strh	r3, [r7, #10]
 800419a:	460b      	mov	r3, r1
 800419c:	813b      	strh	r3, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a2:	f7ff f909 	bl	80033b8 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	f040 80d9 	bne.w	8004368 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2319      	movs	r3, #25
 80041bc:	2201      	movs	r2, #1
 80041be:	496d      	ldr	r1, [pc, #436]	; (8004374 <HAL_I2C_Mem_Write+0x1ec>)
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 ffdf 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	e0cc      	b.n	800436a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_I2C_Mem_Write+0x56>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0c5      	b.n	800436a <HAL_I2C_Mem_Write+0x1e2>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d007      	beq.n	8004204 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2221      	movs	r2, #33	; 0x21
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2240      	movs	r2, #64	; 0x40
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a4d      	ldr	r2, [pc, #308]	; (8004378 <HAL_I2C_Mem_Write+0x1f0>)
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004246:	88f8      	ldrh	r0, [r7, #6]
 8004248:	893a      	ldrh	r2, [r7, #8]
 800424a:	8979      	ldrh	r1, [r7, #10]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4603      	mov	r3, r0
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fd6e 	bl	8004d38 <I2C_RequestMemoryWrite>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d052      	beq.n	8004308 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e081      	b.n	800436a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f001 f860 	bl	8005330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b04      	cmp	r3, #4
 800427c:	d107      	bne.n	800428e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06b      	b.n	800436a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	781a      	ldrb	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d11b      	bne.n	8004308 <HAL_I2C_Mem_Write+0x180>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d017      	beq.n	8004308 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1aa      	bne.n	8004266 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f001 f84c 	bl	80053b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2b04      	cmp	r3, #4
 8004326:	d107      	bne.n	8004338 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e016      	b.n	800436a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	00100002 	.word	0x00100002
 8004378:	ffff0000 	.word	0xffff0000

0800437c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	; 0x30
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	460b      	mov	r3, r1
 8004390:	813b      	strh	r3, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800439a:	f7ff f80d 	bl	80033b8 <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	f040 8244 	bne.w	8004836 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2319      	movs	r3, #25
 80043b4:	2201      	movs	r2, #1
 80043b6:	4982      	ldr	r1, [pc, #520]	; (80045c0 <HAL_I2C_Mem_Read+0x244>)
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fee3 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
 80043c6:	e237      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_I2C_Mem_Read+0x5a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e230      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d007      	beq.n	80043fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800440a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2222      	movs	r2, #34	; 0x22
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2240      	movs	r2, #64	; 0x40
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800442c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a62      	ldr	r2, [pc, #392]	; (80045c4 <HAL_I2C_Mem_Read+0x248>)
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800443e:	88f8      	ldrh	r0, [r7, #6]
 8004440:	893a      	ldrh	r2, [r7, #8]
 8004442:	8979      	ldrh	r1, [r7, #10]
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4603      	mov	r3, r0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fd08 	bl	8004e64 <I2C_RequestMemoryRead>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e1ec      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	d113      	bne.n	800448e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e1c0      	b.n	8004810 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004492:	2b01      	cmp	r3, #1
 8004494:	d11e      	bne.n	80044d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044a6:	b672      	cpsid	i
}
 80044a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044d0:	b662      	cpsie	i
}
 80044d2:	e035      	b.n	8004540 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11e      	bne.n	800451a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ec:	b672      	cpsid	i
}
 80044ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004516:	b662      	cpsie	i
}
 8004518:	e012      	b.n	8004540 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004528:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004540:	e166      	b.n	8004810 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	2b03      	cmp	r3, #3
 8004548:	f200 811f 	bhi.w	800478a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	2b01      	cmp	r3, #1
 8004552:	d123      	bne.n	800459c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 ff6b 	bl	8005434 <I2C_WaitOnRXNEFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e167      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a
 800459a:	e139      	b.n	8004810 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d152      	bne.n	800464a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	2200      	movs	r2, #0
 80045ac:	4906      	ldr	r1, [pc, #24]	; (80045c8 <HAL_I2C_Mem_Read+0x24c>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fde8 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e13c      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
 80045be:	bf00      	nop
 80045c0:	00100002 	.word	0x00100002
 80045c4:	ffff0000 	.word	0xffff0000
 80045c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045cc:	b672      	cpsid	i
}
 80045ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004612:	b662      	cpsie	i
}
 8004614:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004648:	e0e2      	b.n	8004810 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	2200      	movs	r2, #0
 8004652:	497b      	ldr	r1, [pc, #492]	; (8004840 <HAL_I2C_Mem_Read+0x4c4>)
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fd95 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0e9      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004674:	b672      	cpsid	i
}
 8004676:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046aa:	4b66      	ldr	r3, [pc, #408]	; (8004844 <HAL_I2C_Mem_Read+0x4c8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	08db      	lsrs	r3, r3, #3
 80046b0:	4a65      	ldr	r2, [pc, #404]	; (8004848 <HAL_I2C_Mem_Read+0x4cc>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	0a1a      	lsrs	r2, r3, #8
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	00da      	lsls	r2, r3, #3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d118      	bne.n	8004702 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046f2:	b662      	cpsie	i
}
 80046f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e09a      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d1d9      	bne.n	80046c4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004752:	b662      	cpsie	i
}
 8004754:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004788:	e042      	b.n	8004810 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fe50 	bl	8005434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e04c      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d118      	bne.n	8004810 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	f47f ae94 	bne.w	8004542 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3728      	adds	r7, #40	; 0x28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	00010004 	.word	0x00010004
 8004844:	20000048 	.word	0x20000048
 8004848:	14f8b589 	.word	0x14f8b589

0800484c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004864:	2300      	movs	r3, #0
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <HAL_I2C_ER_IRQHandler+0x5e>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004898:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	0a5b      	lsrs	r3, r3, #9
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <HAL_I2C_ER_IRQHandler+0x88>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80048d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	0a9b      	lsrs	r3, r3, #10
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03f      	beq.n	8004960 <HAL_I2C_ER_IRQHandler+0x114>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d039      	beq.n	8004960 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80048ec:	7efb      	ldrb	r3, [r7, #27]
 80048ee:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004906:	7ebb      	ldrb	r3, [r7, #26]
 8004908:	2b20      	cmp	r3, #32
 800490a:	d112      	bne.n	8004932 <HAL_I2C_ER_IRQHandler+0xe6>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10f      	bne.n	8004932 <HAL_I2C_ER_IRQHandler+0xe6>
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	2b21      	cmp	r3, #33	; 0x21
 8004916:	d008      	beq.n	800492a <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	2b29      	cmp	r3, #41	; 0x29
 800491c:	d005      	beq.n	800492a <HAL_I2C_ER_IRQHandler+0xde>
 800491e:	7cfb      	ldrb	r3, [r7, #19]
 8004920:	2b28      	cmp	r3, #40	; 0x28
 8004922:	d106      	bne.n	8004932 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b21      	cmp	r3, #33	; 0x21
 8004928:	d103      	bne.n	8004932 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f862 	bl	80049f4 <I2C_Slave_AF>
 8004930:	e016      	b.n	8004960 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800493a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	f043 0304 	orr.w	r3, r3, #4
 8004942:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004944:	7efb      	ldrb	r3, [r7, #27]
 8004946:	2b10      	cmp	r3, #16
 8004948:	d002      	beq.n	8004950 <HAL_I2C_ER_IRQHandler+0x104>
 800494a:	7efb      	ldrb	r3, [r7, #27]
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d107      	bne.n	8004960 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	0adb      	lsrs	r3, r3, #11
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00e      	beq.n	800498a <HAL_I2C_ER_IRQHandler+0x13e>
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f043 0308 	orr.w	r3, r3, #8
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004988:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f899 	bl	8004ad4 <I2C_ITError>
  }
}
 80049a2:	bf00      	nop
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr
	...

080049f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a02:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d002      	beq.n	8004a16 <I2C_Slave_AF+0x22>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d129      	bne.n	8004a6a <I2C_Slave_AF+0x76>
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	2b28      	cmp	r3, #40	; 0x28
 8004a1a:	d126      	bne.n	8004a6a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a2c      	ldr	r2, [pc, #176]	; (8004ad0 <I2C_Slave_AF+0xdc>)
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a30:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a3a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff ffaa 	bl	80049bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a68:	e02e      	b.n	8004ac8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b21      	cmp	r3, #33	; 0x21
 8004a6e:	d126      	bne.n	8004abe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a17      	ldr	r2, [pc, #92]	; (8004ad0 <I2C_Slave_AF+0xdc>)
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2221      	movs	r2, #33	; 0x21
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a9a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aa4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff ff77 	bl	80049aa <HAL_I2C_SlaveTxCpltCallback>
}
 8004abc:	e004      	b.n	8004ac8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac6:	615a      	str	r2, [r3, #20]
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	ffff0000 	.word	0xffff0000

08004ad4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004aec:	7bbb      	ldrb	r3, [r7, #14]
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d002      	beq.n	8004af8 <I2C_ITError+0x24>
 8004af2:	7bbb      	ldrb	r3, [r7, #14]
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d10a      	bne.n	8004b0e <I2C_ITError+0x3a>
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b22      	cmp	r3, #34	; 0x22
 8004afc:	d107      	bne.n	8004b0e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b14:	2b28      	cmp	r3, #40	; 0x28
 8004b16:	d107      	bne.n	8004b28 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2228      	movs	r2, #40	; 0x28
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b26:	e015      	b.n	8004b54 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b36:	d00a      	beq.n	8004b4e <I2C_ITError+0x7a>
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b60      	cmp	r3, #96	; 0x60
 8004b3c:	d007      	beq.n	8004b4e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b62:	d161      	bne.n	8004c28 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b72:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d020      	beq.n	8004bc2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	4a6a      	ldr	r2, [pc, #424]	; (8004d30 <I2C_ITError+0x25c>)
 8004b86:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe ffa5 	bl	8003adc <HAL_DMA_Abort_IT>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8089 	beq.w	8004cac <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4798      	blx	r3
 8004bc0:	e074      	b.n	8004cac <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <I2C_ITError+0x25c>)
 8004bc8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe ff84 	bl	8003adc <HAL_DMA_Abort_IT>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d068      	beq.n	8004cac <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d10b      	bne.n	8004c00 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c22:	4610      	mov	r0, r2
 8004c24:	4798      	blx	r3
 8004c26:	e041      	b.n	8004cac <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b60      	cmp	r3, #96	; 0x60
 8004c32:	d125      	bne.n	8004c80 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d10b      	bne.n	8004c68 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff feb1 	bl	80049e0 <HAL_I2C_AbortCpltCallback>
 8004c7e:	e015      	b.n	8004cac <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d10b      	bne.n	8004ca6 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fe91 	bl	80049ce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10e      	bne.n	8004cda <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d113      	bne.n	8004d26 <I2C_ITError+0x252>
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b28      	cmp	r3, #40	; 0x28
 8004d02:	d110      	bne.n	8004d26 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <I2C_ITError+0x260>)
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff fe4b 	bl	80049bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	08005035 	.word	0x08005035
 8004d34:	ffff0000 	.word	0xffff0000

08004d38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	813b      	strh	r3, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fa08 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d88:	d103      	bne.n	8004d92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e05f      	b.n	8004e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d96:	897b      	ldrh	r3, [r7, #10]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	492d      	ldr	r1, [pc, #180]	; (8004e60 <I2C_RequestMemoryWrite+0x128>)
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fa40 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e04c      	b.n	8004e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	6a39      	ldr	r1, [r7, #32]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 faaa 	bl	8005330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d107      	bne.n	8004dfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e02b      	b.n	8004e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]
 8004e0e:	e021      	b.n	8004e54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e10:	893b      	ldrh	r3, [r7, #8]
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	6a39      	ldr	r1, [r7, #32]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fa84 	bl	8005330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d107      	bne.n	8004e46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e005      	b.n	8004e56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e4a:	893b      	ldrh	r3, [r7, #8]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	00010002 	.word	0x00010002

08004e64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	817b      	strh	r3, [r7, #10]
 8004e76:	460b      	mov	r3, r1
 8004e78:	813b      	strh	r3, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f96a 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec4:	d103      	bne.n	8004ece <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0aa      	b.n	8005028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ed2:	897b      	ldrh	r3, [r7, #10]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	4952      	ldr	r1, [pc, #328]	; (8005030 <I2C_RequestMemoryRead+0x1cc>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f9a2 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e097      	b.n	8005028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	6a39      	ldr	r1, [r7, #32]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fa0c 	bl	8005330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d107      	bne.n	8004f36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e076      	b.n	8005028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f40:	893b      	ldrh	r3, [r7, #8]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	611a      	str	r2, [r3, #16]
 8004f4a:	e021      	b.n	8004f90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f4c:	893b      	ldrh	r3, [r7, #8]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	6a39      	ldr	r1, [r7, #32]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f9e6 	bl	8005330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d107      	bne.n	8004f82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e050      	b.n	8005028 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f86:	893b      	ldrh	r3, [r7, #8]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	6a39      	ldr	r1, [r7, #32]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f9cb 	bl	8005330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d107      	bne.n	8004fb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e035      	b.n	8005028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f8d3 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff2:	d103      	bne.n	8004ffc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e013      	b.n	8005028 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005000:	897b      	ldrh	r3, [r7, #10]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	b2da      	uxtb	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	6a3a      	ldr	r2, [r7, #32]
 8005014:	4906      	ldr	r1, [pc, #24]	; (8005030 <I2C_RequestMemoryRead+0x1cc>)
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f90b 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	00010002 	.word	0x00010002

08005034 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800504e:	4b4b      	ldr	r3, [pc, #300]	; (800517c <I2C_DMAAbort+0x148>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	4a4a      	ldr	r2, [pc, #296]	; (8005180 <I2C_DMAAbort+0x14c>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	0a1a      	lsrs	r2, r3, #8
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	00da      	lsls	r2, r3, #3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800507a:	e00a      	b.n	8005092 <I2C_DMAAbort+0x5e>
    }
    count--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3b01      	subs	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005090:	d0ea      	beq.n	8005068 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	2200      	movs	r2, #0
 80050a0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	2200      	movs	r2, #0
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d4:	2200      	movs	r2, #0
 80050d6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	2200      	movs	r2, #0
 80050e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b60      	cmp	r3, #96	; 0x60
 8005102:	d10e      	bne.n	8005122 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2200      	movs	r2, #0
 8005118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f7ff fc60 	bl	80049e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005120:	e027      	b.n	8005172 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005128:	2b28      	cmp	r3, #40	; 0x28
 800512a:	d117      	bne.n	800515c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800514a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2228      	movs	r2, #40	; 0x28
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800515a:	e007      	b.n	800516c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800516c:	6978      	ldr	r0, [r7, #20]
 800516e:	f7ff fc2e 	bl	80049ce <HAL_I2C_ErrorCallback>
}
 8005172:	bf00      	nop
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000048 	.word	0x20000048
 8005180:	14f8b589 	.word	0x14f8b589

08005184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005194:	e025      	b.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519c:	d021      	beq.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fe f90b 	bl	80033b8 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e023      	b.n	800522a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10d      	bne.n	8005208 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	43da      	mvns	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	e00c      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	43da      	mvns	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d0b6      	beq.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005240:	e051      	b.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d123      	bne.n	800529a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005260:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800526a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f043 0204 	orr.w	r2, r3, #4
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e046      	b.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a0:	d021      	beq.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fe f889 	bl	80033b8 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d116      	bne.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e020      	b.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10c      	bne.n	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	43da      	mvns	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bf14      	ite	ne
 8005302:	2301      	movne	r3, #1
 8005304:	2300      	moveq	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e00b      	b.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	43da      	mvns	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d18d      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800533c:	e02d      	b.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f8ce 	bl	80054e0 <I2C_IsAcknowledgeFailed>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e02d      	b.n	80053aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005354:	d021      	beq.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7fe f82f 	bl	80033b8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d302      	bcc.n	800536c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d116      	bne.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e007      	b.n	80053aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d1ca      	bne.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053be:	e02d      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f88d 	bl	80054e0 <I2C_IsAcknowledgeFailed>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e02d      	b.n	800542c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d6:	d021      	beq.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d8:	f7fd ffee 	bl	80033b8 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d302      	bcc.n	80053ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d116      	bne.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e007      	b.n	800542c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b04      	cmp	r3, #4
 8005428:	d1ca      	bne.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005440:	e042      	b.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b10      	cmp	r3, #16
 800544e:	d119      	bne.n	8005484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0210 	mvn.w	r2, #16
 8005458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e029      	b.n	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fd ff98 	bl	80033b8 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d116      	bne.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e007      	b.n	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d1b5      	bne.n	8005442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f6:	d11b      	bne.n	8005530 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005500:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f043 0204 	orr.w	r2, r3, #4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e272      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8087 	beq.w	800566a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800555c:	4b92      	ldr	r3, [pc, #584]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b04      	cmp	r3, #4
 8005566:	d00c      	beq.n	8005582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005568:	4b8f      	ldr	r3, [pc, #572]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b08      	cmp	r3, #8
 8005572:	d112      	bne.n	800559a <HAL_RCC_OscConfig+0x5e>
 8005574:	4b8c      	ldr	r3, [pc, #560]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d10b      	bne.n	800559a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005582:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d06c      	beq.n	8005668 <HAL_RCC_OscConfig+0x12c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d168      	bne.n	8005668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e24c      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a2:	d106      	bne.n	80055b2 <HAL_RCC_OscConfig+0x76>
 80055a4:	4b80      	ldr	r3, [pc, #512]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a7f      	ldr	r2, [pc, #508]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	e02e      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x98>
 80055ba:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7a      	ldr	r2, [pc, #488]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b78      	ldr	r3, [pc, #480]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a77      	ldr	r2, [pc, #476]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e01d      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCC_OscConfig+0xbc>
 80055de:	4b72      	ldr	r3, [pc, #456]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	4b6f      	ldr	r3, [pc, #444]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6e      	ldr	r2, [pc, #440]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e00b      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055f8:	4b6b      	ldr	r3, [pc, #428]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a6a      	ldr	r2, [pc, #424]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	4b68      	ldr	r3, [pc, #416]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a67      	ldr	r2, [pc, #412]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800560a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fd fece 	bl	80033b8 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005620:	f7fd feca 	bl	80033b8 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e200      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005632:	4b5d      	ldr	r3, [pc, #372]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0xe4>
 800563e:	e014      	b.n	800566a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fd feba 	bl	80033b8 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005648:	f7fd feb6 	bl	80033b8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e1ec      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565a:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x10c>
 8005666:	e000      	b.n	800566a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d063      	beq.n	800573e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005676:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005682:	4b49      	ldr	r3, [pc, #292]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b08      	cmp	r3, #8
 800568c:	d11c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x18c>
 800568e:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d116      	bne.n	80056c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569a:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_RCC_OscConfig+0x176>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e1c0      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4939      	ldr	r1, [pc, #228]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c6:	e03a      	b.n	800573e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d0:	4b36      	ldr	r3, [pc, #216]	; (80057ac <HAL_RCC_OscConfig+0x270>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fd fe6f 	bl	80033b8 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056de:	f7fd fe6b 	bl	80033b8 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e1a1      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f0:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fc:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4927      	ldr	r1, [pc, #156]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]
 8005710:	e015      	b.n	800573e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <HAL_RCC_OscConfig+0x270>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fd fe4e 	bl	80033b8 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005720:	f7fd fe4a 	bl	80033b8 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e180      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d03a      	beq.n	80057c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d019      	beq.n	8005786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005758:	f7fd fe2e 	bl	80033b8 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005760:	f7fd fe2a 	bl	80033b8 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e160      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800577e:	2001      	movs	r0, #1
 8005780:	f000 fad8 	bl	8005d34 <RCC_Delay>
 8005784:	e01c      	b.n	80057c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578c:	f7fd fe14 	bl	80033b8 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005792:	e00f      	b.n	80057b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005794:	f7fd fe10 	bl	80033b8 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d908      	bls.n	80057b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e146      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	42420000 	.word	0x42420000
 80057b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b4:	4b92      	ldr	r3, [pc, #584]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e9      	bne.n	8005794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80a6 	beq.w	800591a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d2:	4b8b      	ldr	r3, [pc, #556]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	4b88      	ldr	r3, [pc, #544]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	4a87      	ldr	r2, [pc, #540]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	61d3      	str	r3, [r2, #28]
 80057ea:	4b85      	ldr	r3, [pc, #532]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fa:	4b82      	ldr	r3, [pc, #520]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d118      	bne.n	8005838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005806:	4b7f      	ldr	r3, [pc, #508]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7e      	ldr	r2, [pc, #504]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005812:	f7fd fdd1 	bl	80033b8 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581a:	f7fd fdcd 	bl	80033b8 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b64      	cmp	r3, #100	; 0x64
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e103      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	4b75      	ldr	r3, [pc, #468]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d106      	bne.n	800584e <HAL_RCC_OscConfig+0x312>
 8005840:	4b6f      	ldr	r3, [pc, #444]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	4a6e      	ldr	r2, [pc, #440]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6213      	str	r3, [r2, #32]
 800584c:	e02d      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0x334>
 8005856:	4b6a      	ldr	r3, [pc, #424]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4a69      	ldr	r2, [pc, #420]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6213      	str	r3, [r2, #32]
 8005862:	4b67      	ldr	r3, [pc, #412]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	4a66      	ldr	r2, [pc, #408]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	6213      	str	r3, [r2, #32]
 800586e:	e01c      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x356>
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	4a60      	ldr	r2, [pc, #384]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6213      	str	r3, [r2, #32]
 8005884:	4b5e      	ldr	r3, [pc, #376]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	4a5d      	ldr	r2, [pc, #372]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6213      	str	r3, [r2, #32]
 8005890:	e00b      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 8005892:	4b5b      	ldr	r3, [pc, #364]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	4a5a      	ldr	r2, [pc, #360]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6213      	str	r3, [r2, #32]
 800589e:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b2:	f7fd fd81 	bl	80033b8 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fd fd7d 	bl	80033b8 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0b1      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RCC_OscConfig+0x37e>
 80058dc:	e014      	b.n	8005908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fd fd6b 	bl	80033b8 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fd fd67 	bl	80033b8 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e09b      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	4b40      	ldr	r3, [pc, #256]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590e:	4b3c      	ldr	r3, [pc, #240]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4a3b      	ldr	r2, [pc, #236]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8087 	beq.w	8005a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005924:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d061      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d146      	bne.n	80059c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b33      	ldr	r3, [pc, #204]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fd fd3b 	bl	80033b8 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005946:	f7fd fd37 	bl	80033b8 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e06d      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005958:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d108      	bne.n	8005980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4921      	ldr	r1, [pc, #132]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a19      	ldr	r1, [r3, #32]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	430b      	orrs	r3, r1
 8005992:	491b      	ldr	r1, [pc, #108]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005998:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599e:	f7fd fd0b 	bl	80033b8 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a6:	f7fd fd07 	bl	80033b8 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e03d      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x46a>
 80059c4:	e035      	b.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fd fcf4 	bl	80033b8 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fd fcf0 	bl	80033b8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e026      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x498>
 80059f2:	e01e      	b.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e019      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40007000 	.word	0x40007000
 8005a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_OscConfig+0x500>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40021000 	.word	0x40021000

08005a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0d0      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a54:	4b6a      	ldr	r3, [pc, #424]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d910      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 0207 	bic.w	r2, r3, #7
 8005a6a:	4965      	ldr	r1, [pc, #404]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0b8      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a9c:	4b59      	ldr	r3, [pc, #356]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a58      	ldr	r2, [pc, #352]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab4:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4a52      	ldr	r2, [pc, #328]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005aba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac0:	4b50      	ldr	r3, [pc, #320]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	494d      	ldr	r1, [pc, #308]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d040      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d115      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005afe:	4b41      	ldr	r3, [pc, #260]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e073      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e06b      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b1e:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f023 0203 	bic.w	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4936      	ldr	r1, [pc, #216]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b30:	f7fd fc42 	bl	80033b8 <HAL_GetTick>
 8005b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b36:	e00a      	b.n	8005b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b38:	f7fd fc3e 	bl	80033b8 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e053      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 020c 	and.w	r2, r3, #12
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d1eb      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d210      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 0207 	bic.w	r2, r3, #7
 8005b76:	4922      	ldr	r1, [pc, #136]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e032      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4916      	ldr	r1, [pc, #88]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	490e      	ldr	r1, [pc, #56]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bce:	f000 f821 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	490a      	ldr	r1, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x1c8>)
 8005be0:	5ccb      	ldrb	r3, [r1, r3]
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <HAL_RCC_ClockConfig+0x1cc>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_ClockConfig+0x1d0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd fba0 	bl	8003334 <HAL_InitTick>

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40021000 	.word	0x40021000
 8005c08:	0800a9fc 	.word	0x0800a9fc
 8005c0c:	20000048 	.word	0x20000048
 8005c10:	200000b0 	.word	0x200000b0

08005c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	b490      	push	{r4, r7}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005c1a:	4b29      	ldr	r3, [pc, #164]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8005c1c:	1d3c      	adds	r4, r7, #4
 8005c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005c24:	f240 2301 	movw	r3, #513	; 0x201
 8005c28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	2300      	movs	r3, #0
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c3e:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d002      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0x40>
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d003      	beq.n	8005c5a <HAL_RCC_GetSysClockFreq+0x46>
 8005c52:	e02b      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c54:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c56:	623b      	str	r3, [r7, #32]
      break;
 8005c58:	e02b      	b.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	0c9b      	lsrs	r3, r3, #18
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	3328      	adds	r3, #40	; 0x28
 8005c64:	443b      	add	r3, r7
 8005c66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d012      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	0c5b      	lsrs	r3, r3, #17
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	3328      	adds	r3, #40	; 0x28
 8005c82:	443b      	add	r3, r7
 8005c84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c8e:	fb03 f202 	mul.w	r2, r3, r2
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9a:	e004      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca0:	fb02 f303 	mul.w	r3, r2, r3
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	623b      	str	r3, [r7, #32]
      break;
 8005caa:	e002      	b.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005cae:	623b      	str	r3, [r7, #32]
      break;
 8005cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3728      	adds	r7, #40	; 0x28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc90      	pop	{r4, r7}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	0800a9e0 	.word	0x0800a9e0
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	007a1200 	.word	0x007a1200
 8005ccc:	003d0900 	.word	0x003d0900

08005cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd4:	4b02      	ldr	r3, [pc, #8]	; (8005ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr
 8005ce0:	20000048 	.word	0x20000048

08005ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ce8:	f7ff fff2 	bl	8005cd0 <HAL_RCC_GetHCLKFreq>
 8005cec:	4602      	mov	r2, r0
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	4903      	ldr	r1, [pc, #12]	; (8005d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfa:	5ccb      	ldrb	r3, [r1, r3]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	0800aa0c 	.word	0x0800aa0c

08005d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d10:	f7ff ffde 	bl	8005cd0 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	0adb      	lsrs	r3, r3, #11
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4903      	ldr	r1, [pc, #12]	; (8005d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	0800aa0c 	.word	0x0800aa0c

08005d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <RCC_Delay+0x34>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <RCC_Delay+0x38>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	0a5b      	lsrs	r3, r3, #9
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d50:	bf00      	nop
  }
  while (Delay --);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1e5a      	subs	r2, r3, #1
 8005d56:	60fa      	str	r2, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f9      	bne.n	8005d50 <RCC_Delay+0x1c>
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	20000048 	.word	0x20000048
 8005d6c:	10624dd3 	.word	0x10624dd3

08005d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d07d      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d90:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10d      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9c:	4b4c      	ldr	r3, [pc, #304]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4a4b      	ldr	r2, [pc, #300]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da6:	61d3      	str	r3, [r2, #28]
 8005da8:	4b49      	ldr	r3, [pc, #292]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db4:	2301      	movs	r3, #1
 8005db6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db8:	4b46      	ldr	r3, [pc, #280]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d118      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dc4:	4b43      	ldr	r3, [pc, #268]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a42      	ldr	r2, [pc, #264]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd0:	f7fd faf2 	bl	80033b8 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd6:	e008      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd8:	f7fd faee 	bl	80033b8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b64      	cmp	r3, #100	; 0x64
 8005de4:	d901      	bls.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e06d      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dea:	4b3a      	ldr	r3, [pc, #232]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005df6:	4b36      	ldr	r3, [pc, #216]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d02e      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d027      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e14:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e24:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e2a:	4a29      	ldr	r2, [pc, #164]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d014      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fd fabd 	bl	80033b8 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e40:	e00a      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e42:	f7fd fab9 	bl	80033b8 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e036      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e58:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0ee      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e64:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4917      	ldr	r1, [pc, #92]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d105      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	490b      	ldr	r1, [pc, #44]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	4904      	ldr	r1, [pc, #16]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40007000 	.word	0x40007000
 8005ed8:	42420440 	.word	0x42420440

08005edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e041      	b.n	8005f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fc fdd0 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f000 fff8 	bl	8006f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d001      	beq.n	8005f94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e032      	b.n	8005ffa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a18      	ldr	r2, [pc, #96]	; (8006004 <HAL_TIM_Base_Start+0x88>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_TIM_Base_Start+0x48>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIM_Base_Start+0x48>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a14      	ldr	r2, [pc, #80]	; (8006008 <HAL_TIM_Base_Start+0x8c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIM_Base_Start+0x48>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a13      	ldr	r2, [pc, #76]	; (800600c <HAL_TIM_Base_Start+0x90>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b06      	cmp	r3, #6
 8005fd4:	d010      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0201 	orr.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	e007      	b.n	8005ff8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800

08006010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d001      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e03a      	b.n	800609e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <HAL_TIM_Base_Start_IT+0x98>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x58>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006052:	d009      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x58>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a14      	ldr	r2, [pc, #80]	; (80060ac <HAL_TIM_Base_Start_IT+0x9c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x58>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d111      	bne.n	800608c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b06      	cmp	r3, #6
 8006078:	d010      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608a:	e007      	b.n	800609c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800

080060b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e041      	b.n	800614a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f839 	bl	8006152 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f000 ff0c 	bl	8006f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr

08006164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <HAL_TIM_PWM_Start+0x24>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	bf14      	ite	ne
 8006180:	2301      	movne	r3, #1
 8006182:	2300      	moveq	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e022      	b.n	80061ce <HAL_TIM_PWM_Start+0x6a>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b04      	cmp	r3, #4
 800618c:	d109      	bne.n	80061a2 <HAL_TIM_PWM_Start+0x3e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	e015      	b.n	80061ce <HAL_TIM_PWM_Start+0x6a>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d109      	bne.n	80061bc <HAL_TIM_PWM_Start+0x58>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e008      	b.n	80061ce <HAL_TIM_PWM_Start+0x6a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e05e      	b.n	8006294 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <HAL_TIM_PWM_Start+0x82>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e4:	e013      	b.n	800620e <HAL_TIM_PWM_Start+0xaa>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_PWM_Start+0x92>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f4:	e00b      	b.n	800620e <HAL_TIM_PWM_Start+0xaa>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_PWM_Start+0xa2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006204:	e003      	b.n	800620e <HAL_TIM_PWM_Start+0xaa>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2201      	movs	r2, #1
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fa07 	bl	800762a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1e      	ldr	r2, [pc, #120]	; (800629c <HAL_TIM_PWM_Start+0x138>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d107      	bne.n	8006236 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006234:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_TIM_PWM_Start+0x138>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_TIM_PWM_Start+0xfa>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d009      	beq.n	800625e <HAL_TIM_PWM_Start+0xfa>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <HAL_TIM_PWM_Start+0x13c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIM_PWM_Start+0xfa>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a12      	ldr	r2, [pc, #72]	; (80062a4 <HAL_TIM_PWM_Start+0x140>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d111      	bne.n	8006282 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b06      	cmp	r3, #6
 800626e:	d010      	beq.n	8006292 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006280:	e007      	b.n	8006292 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800

080062a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e041      	b.n	800633e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f839 	bl	8006346 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f000 fe12 	bl	8006f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d104      	bne.n	8006372 <HAL_TIM_IC_Start_IT+0x1a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636e:	b2db      	uxtb	r3, r3
 8006370:	e013      	b.n	800639a <HAL_TIM_IC_Start_IT+0x42>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b04      	cmp	r3, #4
 8006376:	d104      	bne.n	8006382 <HAL_TIM_IC_Start_IT+0x2a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800637e:	b2db      	uxtb	r3, r3
 8006380:	e00b      	b.n	800639a <HAL_TIM_IC_Start_IT+0x42>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d104      	bne.n	8006392 <HAL_TIM_IC_Start_IT+0x3a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e003      	b.n	800639a <HAL_TIM_IC_Start_IT+0x42>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006398:	b2db      	uxtb	r3, r3
 800639a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <HAL_TIM_IC_Start_IT+0x54>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	e013      	b.n	80063d4 <HAL_TIM_IC_Start_IT+0x7c>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d104      	bne.n	80063bc <HAL_TIM_IC_Start_IT+0x64>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e00b      	b.n	80063d4 <HAL_TIM_IC_Start_IT+0x7c>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d104      	bne.n	80063cc <HAL_TIM_IC_Start_IT+0x74>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e003      	b.n	80063d4 <HAL_TIM_IC_Start_IT+0x7c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d102      	bne.n	80063e2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d001      	beq.n	80063e6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0b3      	b.n	800654e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_IC_Start_IT+0x9e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	e013      	b.n	800641e <HAL_TIM_IC_Start_IT+0xc6>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_IC_Start_IT+0xae>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006404:	e00b      	b.n	800641e <HAL_TIM_IC_Start_IT+0xc6>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d104      	bne.n	8006416 <HAL_TIM_IC_Start_IT+0xbe>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006414:	e003      	b.n	800641e <HAL_TIM_IC_Start_IT+0xc6>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <HAL_TIM_IC_Start_IT+0xd6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800642c:	e013      	b.n	8006456 <HAL_TIM_IC_Start_IT+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d104      	bne.n	800643e <HAL_TIM_IC_Start_IT+0xe6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800643c:	e00b      	b.n	8006456 <HAL_TIM_IC_Start_IT+0xfe>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d104      	bne.n	800644e <HAL_TIM_IC_Start_IT+0xf6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644c:	e003      	b.n	8006456 <HAL_TIM_IC_Start_IT+0xfe>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	d841      	bhi.n	80064e0 <HAL_TIM_IC_Start_IT+0x188>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <HAL_TIM_IC_Start_IT+0x10c>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	08006499 	.word	0x08006499
 8006468:	080064e1 	.word	0x080064e1
 800646c:	080064e1 	.word	0x080064e1
 8006470:	080064e1 	.word	0x080064e1
 8006474:	080064ab 	.word	0x080064ab
 8006478:	080064e1 	.word	0x080064e1
 800647c:	080064e1 	.word	0x080064e1
 8006480:	080064e1 	.word	0x080064e1
 8006484:	080064bd 	.word	0x080064bd
 8006488:	080064e1 	.word	0x080064e1
 800648c:	080064e1 	.word	0x080064e1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064cf 	.word	0x080064cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0202 	orr.w	r2, r2, #2
 80064a6:	60da      	str	r2, [r3, #12]
      break;
 80064a8:	e01b      	b.n	80064e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0204 	orr.w	r2, r2, #4
 80064b8:	60da      	str	r2, [r3, #12]
      break;
 80064ba:	e012      	b.n	80064e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0208 	orr.w	r2, r2, #8
 80064ca:	60da      	str	r2, [r3, #12]
      break;
 80064cc:	e009      	b.n	80064e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0210 	orr.w	r2, r2, #16
 80064dc:	60da      	str	r2, [r3, #12]
      break;
 80064de:	e000      	b.n	80064e2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80064e0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f89d 	bl	800762a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_TIM_IC_Start_IT+0x200>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00e      	beq.n	8006518 <HAL_TIM_IC_Start_IT+0x1c0>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006502:	d009      	beq.n	8006518 <HAL_TIM_IC_Start_IT+0x1c0>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a14      	ldr	r2, [pc, #80]	; (800655c <HAL_TIM_IC_Start_IT+0x204>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_TIM_IC_Start_IT+0x1c0>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a13      	ldr	r2, [pc, #76]	; (8006560 <HAL_TIM_IC_Start_IT+0x208>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d111      	bne.n	800653c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b06      	cmp	r3, #6
 8006528:	d010      	beq.n	800654c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0201 	orr.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653a:	e007      	b.n	800654c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800

08006564 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e093      	b.n	80066a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d106      	bne.n	8006592 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fc fa2b 	bl	80029e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a8:	f023 0307 	bic.w	r3, r3, #7
 80065ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 fca9 	bl	8006f10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e6:	f023 0303 	bic.w	r3, r3, #3
 80065ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	4313      	orrs	r3, r2
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006604:	f023 030c 	bic.w	r3, r3, #12
 8006608:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	4313      	orrs	r3, r2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	011a      	lsls	r2, r3, #4
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	031b      	lsls	r3, r3, #12
 8006634:	4313      	orrs	r3, r2
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4313      	orrs	r3, r2
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d110      	bne.n	80066fa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d102      	bne.n	80066e4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066de:	7b7b      	ldrb	r3, [r7, #13]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d001      	beq.n	80066e8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e089      	b.n	80067fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f8:	e031      	b.n	800675e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d110      	bne.n	8006722 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d102      	bne.n	800670c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006706:	7b3b      	ldrb	r3, [r7, #12]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d001      	beq.n	8006710 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e075      	b.n	80067fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006720:	e01d      	b.n	800675e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d108      	bne.n	800673a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d105      	bne.n	800673a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800672e:	7b7b      	ldrb	r3, [r7, #13]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d102      	bne.n	800673a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006734:	7b3b      	ldrb	r3, [r7, #12]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d001      	beq.n	800673e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e05e      	b.n	80067fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_TIM_Encoder_Start_IT+0xc4>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b04      	cmp	r3, #4
 8006768:	d010      	beq.n	800678c <HAL_TIM_Encoder_Start_IT+0xe4>
 800676a:	e01f      	b.n	80067ac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f000 ff58 	bl	800762a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0202 	orr.w	r2, r2, #2
 8006788:	60da      	str	r2, [r3, #12]
      break;
 800678a:	e02e      	b.n	80067ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2201      	movs	r2, #1
 8006792:	2104      	movs	r1, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ff48 	bl	800762a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0204 	orr.w	r2, r2, #4
 80067a8:	60da      	str	r2, [r3, #12]
      break;
 80067aa:	e01e      	b.n	80067ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 ff38 	bl	800762a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2201      	movs	r2, #1
 80067c0:	2104      	movs	r1, #4
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 ff31 	bl	800762a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0202 	orr.w	r2, r2, #2
 80067d6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0204 	orr.w	r2, r2, #4
 80067e6:	60da      	str	r2, [r3, #12]
      break;
 80067e8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b02      	cmp	r3, #2
 8006818:	d122      	bne.n	8006860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	d11b      	bne.n	8006860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0202 	mvn.w	r2, #2
 8006830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fb ff50 	bl	80026ec <HAL_TIM_IC_CaptureCallback>
 800684c:	e005      	b.n	800685a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fb43 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fb49 	bl	8006eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d122      	bne.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b04      	cmp	r3, #4
 800687a:	d11b      	bne.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0204 	mvn.w	r2, #4
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fb ff26 	bl	80026ec <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fb19 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb1f 	bl	8006eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d122      	bne.n	8006908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d11b      	bne.n	8006908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0208 	mvn.w	r2, #8
 80068d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2204      	movs	r2, #4
 80068de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fb fefc 	bl	80026ec <HAL_TIM_IC_CaptureCallback>
 80068f4:	e005      	b.n	8006902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 faef 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 faf5 	bl	8006eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b10      	cmp	r3, #16
 8006914:	d122      	bne.n	800695c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b10      	cmp	r3, #16
 8006922:	d11b      	bne.n	800695c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0210 	mvn.w	r2, #16
 800692c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2208      	movs	r2, #8
 8006932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fb fed2 	bl	80026ec <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fac5 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 facb 	bl	8006eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b01      	cmp	r3, #1
 8006968:	d10e      	bne.n	8006988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d107      	bne.n	8006988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0201 	mvn.w	r2, #1
 8006980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 faa0 	bl	8006ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d10e      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a0:	2b80      	cmp	r3, #128	; 0x80
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fec7 	bl	8007742 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d10e      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b40      	cmp	r3, #64	; 0x40
 80069ce:	d107      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa8f 	bl	8006efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d10e      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d107      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0220 	mvn.w	r2, #32
 8006a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fe92 	bl	8007730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_IC_ConfigChannel+0x1a>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e082      	b.n	8006b34 <HAL_TIM_IC_ConfigChannel+0x120>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d11b      	bne.n	8006a74 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f000 fc4a 	bl	80072e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 020c 	bic.w	r2, r2, #12
 8006a5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6999      	ldr	r1, [r3, #24]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	619a      	str	r2, [r3, #24]
 8006a72:	e05a      	b.n	8006b2a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d11c      	bne.n	8006ab4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6819      	ldr	r1, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f000 fcb3 	bl	80073f4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6999      	ldr	r1, [r3, #24]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	021a      	lsls	r2, r3, #8
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
 8006ab2:	e03a      	b.n	8006b2a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d11b      	bne.n	8006af2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f000 fcfe 	bl	80074ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 020c 	bic.w	r2, r2, #12
 8006adc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69d9      	ldr	r1, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	61da      	str	r2, [r3, #28]
 8006af0:	e01b      	b.n	8006b2a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6819      	ldr	r1, [r3, #0]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f000 fd1d 	bl	8007540 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69d9      	ldr	r1, [r3, #28]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	021a      	lsls	r2, r3, #8
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e0ac      	b.n	8006cb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b0c      	cmp	r3, #12
 8006b62:	f200 809f 	bhi.w	8006ca4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006ba1 	.word	0x08006ba1
 8006b70:	08006ca5 	.word	0x08006ca5
 8006b74:	08006ca5 	.word	0x08006ca5
 8006b78:	08006ca5 	.word	0x08006ca5
 8006b7c:	08006be1 	.word	0x08006be1
 8006b80:	08006ca5 	.word	0x08006ca5
 8006b84:	08006ca5 	.word	0x08006ca5
 8006b88:	08006ca5 	.word	0x08006ca5
 8006b8c:	08006c23 	.word	0x08006c23
 8006b90:	08006ca5 	.word	0x08006ca5
 8006b94:	08006ca5 	.word	0x08006ca5
 8006b98:	08006ca5 	.word	0x08006ca5
 8006b9c:	08006c63 	.word	0x08006c63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fa14 	bl	8006fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0208 	orr.w	r2, r2, #8
 8006bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0204 	bic.w	r2, r2, #4
 8006bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6999      	ldr	r1, [r3, #24]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	619a      	str	r2, [r3, #24]
      break;
 8006bde:	e062      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fa5a 	bl	80070a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6999      	ldr	r1, [r3, #24]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	619a      	str	r2, [r3, #24]
      break;
 8006c20:	e041      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 faa3 	bl	8007174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0208 	orr.w	r2, r2, #8
 8006c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0204 	bic.w	r2, r2, #4
 8006c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69d9      	ldr	r1, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	61da      	str	r2, [r3, #28]
      break;
 8006c60:	e021      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 faed 	bl	8007248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69d9      	ldr	r1, [r3, #28]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	021a      	lsls	r2, r3, #8
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	61da      	str	r2, [r3, #28]
      break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIM_ConfigClockSource+0x18>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e0b3      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x180>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d03e      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0xd0>
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	f200 8087 	bhi.w	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	f000 8085 	beq.w	8006e24 <HAL_TIM_ConfigClockSource+0x16c>
 8006d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1e:	d87f      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d20:	2b70      	cmp	r3, #112	; 0x70
 8006d22:	d01a      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xa2>
 8006d24:	2b70      	cmp	r3, #112	; 0x70
 8006d26:	d87b      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d28:	2b60      	cmp	r3, #96	; 0x60
 8006d2a:	d050      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0x116>
 8006d2c:	2b60      	cmp	r3, #96	; 0x60
 8006d2e:	d877      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d30:	2b50      	cmp	r3, #80	; 0x50
 8006d32:	d03c      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0xf6>
 8006d34:	2b50      	cmp	r3, #80	; 0x50
 8006d36:	d873      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d058      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x136>
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d86f      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d40:	2b30      	cmp	r3, #48	; 0x30
 8006d42:	d064      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x156>
 8006d44:	2b30      	cmp	r3, #48	; 0x30
 8006d46:	d86b      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d060      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x156>
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d867      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05c      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x156>
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d05a      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d58:	e062      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6899      	ldr	r1, [r3, #8]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f000 fc3f 	bl	80075ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	609a      	str	r2, [r3, #8]
      break;
 8006d86:	e04e      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6899      	ldr	r1, [r3, #8]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f000 fc28 	bl	80075ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006daa:	609a      	str	r2, [r3, #8]
      break;
 8006dac:	e03b      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6859      	ldr	r1, [r3, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f000 faec 	bl	8007398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2150      	movs	r1, #80	; 0x50
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fbf6 	bl	80075b8 <TIM_ITRx_SetConfig>
      break;
 8006dcc:	e02b      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 fb46 	bl	800746c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2160      	movs	r1, #96	; 0x60
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fbe6 	bl	80075b8 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e01b      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 facc 	bl	8007398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2140      	movs	r1, #64	; 0x40
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fbd6 	bl	80075b8 <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e00b      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f000 fbcd 	bl	80075b8 <TIM_ITRx_SetConfig>
        break;
 8006e1e:	e002      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e20:	bf00      	nop
 8006e22:	e000      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b0c      	cmp	r3, #12
 8006e52:	d831      	bhi.n	8006eb8 <HAL_TIM_ReadCapturedValue+0x78>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e91 	.word	0x08006e91
 8006e60:	08006eb9 	.word	0x08006eb9
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	08006eb9 	.word	0x08006eb9
 8006e6c:	08006e9b 	.word	0x08006e9b
 8006e70:	08006eb9 	.word	0x08006eb9
 8006e74:	08006eb9 	.word	0x08006eb9
 8006e78:	08006eb9 	.word	0x08006eb9
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006eb9 	.word	0x08006eb9
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006eaf 	.word	0x08006eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e96:	60fb      	str	r3, [r7, #12]

      break;
 8006e98:	e00f      	b.n	8006eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	60fb      	str	r3, [r7, #12]

      break;
 8006ea2:	e00a      	b.n	8006eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	60fb      	str	r3, [r7, #12]

      break;
 8006eac:	e005      	b.n	8006eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	60fb      	str	r3, [r7, #12]

      break;
 8006eb6:	e000      	b.n	8006eba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006eb8:	bf00      	nop
  }

  return tmpreg;
 8006eba:	68fb      	ldr	r3, [r7, #12]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bc80      	pop	{r7}
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop

08006ec8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr

08006eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a29      	ldr	r2, [pc, #164]	; (8006fc8 <TIM_Base_SetConfig+0xb8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00b      	beq.n	8006f40 <TIM_Base_SetConfig+0x30>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2e:	d007      	beq.n	8006f40 <TIM_Base_SetConfig+0x30>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a26      	ldr	r2, [pc, #152]	; (8006fcc <TIM_Base_SetConfig+0xbc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_Base_SetConfig+0x30>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a25      	ldr	r2, [pc, #148]	; (8006fd0 <TIM_Base_SetConfig+0xc0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d108      	bne.n	8006f52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a1c      	ldr	r2, [pc, #112]	; (8006fc8 <TIM_Base_SetConfig+0xb8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_Base_SetConfig+0x62>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f60:	d007      	beq.n	8006f72 <TIM_Base_SetConfig+0x62>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <TIM_Base_SetConfig+0xbc>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_Base_SetConfig+0x62>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a18      	ldr	r2, [pc, #96]	; (8006fd0 <TIM_Base_SetConfig+0xc0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a07      	ldr	r2, [pc, #28]	; (8006fc8 <TIM_Base_SetConfig+0xb8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d103      	bne.n	8006fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	615a      	str	r2, [r3, #20]
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800

08006fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f023 0201 	bic.w	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0302 	bic.w	r3, r3, #2
 800701c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a1c      	ldr	r2, [pc, #112]	; (800709c <TIM_OC1_SetConfig+0xc8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10c      	bne.n	800704a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 0308 	bic.w	r3, r3, #8
 8007036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a13      	ldr	r2, [pc, #76]	; (800709c <TIM_OC1_SetConfig+0xc8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d111      	bne.n	8007076 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	621a      	str	r2, [r3, #32]
}
 8007090:	bf00      	nop
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40012c00 	.word	0x40012c00

080070a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f023 0210 	bic.w	r2, r3, #16
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0320 	bic.w	r3, r3, #32
 80070ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a1d      	ldr	r2, [pc, #116]	; (8007170 <TIM_OC2_SetConfig+0xd0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10d      	bne.n	800711c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a14      	ldr	r2, [pc, #80]	; (8007170 <TIM_OC2_SetConfig+0xd0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d113      	bne.n	800714c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800712a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr
 8007170:	40012c00 	.word	0x40012c00

08007174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a1d      	ldr	r2, [pc, #116]	; (8007244 <TIM_OC3_SetConfig+0xd0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d10d      	bne.n	80071ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a14      	ldr	r2, [pc, #80]	; (8007244 <TIM_OC3_SetConfig+0xd0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d113      	bne.n	800721e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	621a      	str	r2, [r3, #32]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40012c00 	.word	0x40012c00

08007248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	031b      	lsls	r3, r3, #12
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a0f      	ldr	r2, [pc, #60]	; (80072e0 <TIM_OC4_SetConfig+0x98>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d109      	bne.n	80072bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	019b      	lsls	r3, r3, #6
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00

080072e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f023 0201 	bic.w	r2, r3, #1
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4a1f      	ldr	r2, [pc, #124]	; (800738c <TIM_TI1_SetConfig+0xa8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00b      	beq.n	800732a <TIM_TI1_SetConfig+0x46>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007318:	d007      	beq.n	800732a <TIM_TI1_SetConfig+0x46>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <TIM_TI1_SetConfig+0xac>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <TIM_TI1_SetConfig+0x46>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <TIM_TI1_SetConfig+0xb0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <TIM_TI1_SetConfig+0x4a>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <TIM_TI1_SetConfig+0x4c>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e003      	b.n	800734e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	b2db      	uxtb	r3, r3
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f023 030a 	bic.w	r3, r3, #10
 8007368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f003 030a 	and.w	r3, r3, #10
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40000400 	.word	0x40000400
 8007394:	40000800 	.word	0x40000800

08007398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f023 030a 	bic.w	r3, r3, #10
 80073d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr

080073f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0210 	bic.w	r2, r3, #16
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	031b      	lsls	r3, r3, #12
 8007438:	b29b      	uxth	r3, r3
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007446:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	f023 0210 	bic.w	r2, r3, #16
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007496:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	031b      	lsls	r3, r3, #12
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr

080074ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007506:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	b2db      	uxtb	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800751a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800757e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	031b      	lsls	r3, r3, #12
 8007584:	b29b      	uxth	r3, r3
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007592:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	031b      	lsls	r3, r3, #12
 8007598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4313      	orrs	r3, r2
 80075a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	621a      	str	r2, [r3, #32]
}
 80075ae:	bf00      	nop
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f043 0307 	orr.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	609a      	str	r2, [r3, #8]
}
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	021a      	lsls	r2, r3, #8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	431a      	orrs	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4313      	orrs	r3, r2
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f003 031f 	and.w	r3, r3, #31
 800763c:	2201      	movs	r2, #1
 800763e:	fa02 f303 	lsl.w	r3, r2, r3
 8007642:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	43db      	mvns	r3, r3
 800764c:	401a      	ands	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1a      	ldr	r2, [r3, #32]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	fa01 f303 	lsl.w	r3, r1, r3
 8007662:	431a      	orrs	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	621a      	str	r2, [r3, #32]
}
 8007668:	bf00      	nop
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr
	...

08007674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007688:	2302      	movs	r3, #2
 800768a:	e046      	b.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a16      	ldr	r2, [pc, #88]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d8:	d009      	beq.n	80076ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a12      	ldr	r2, [pc, #72]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a10      	ldr	r2, [pc, #64]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d10c      	bne.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800

08007730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr

08007742 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	bc80      	pop	{r7}
 8007752:	4770      	bx	lr

08007754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e03f      	b.n	80077e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fb fa36 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2224      	movs	r2, #36	; 0x24
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fb49 	bl	8007e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	695a      	ldr	r2, [r3, #20]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	; 0x28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007814:	2300      	movs	r3, #0
 8007816:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10d      	bne.n	8007842 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <HAL_UART_IRQHandler+0x52>
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa4f 	bl	8007cde <UART_Receive_IT>
      return;
 8007840:	e17b      	b.n	8007b3a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80b1 	beq.w	80079ac <HAL_UART_IRQHandler+0x1bc>
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <HAL_UART_IRQHandler+0x70>
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80a6 	beq.w	80079ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <HAL_UART_IRQHandler+0x90>
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <HAL_UART_IRQHandler+0xb0>
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007898:	f043 0202 	orr.w	r2, r3, #2
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_UART_IRQHandler+0xd0>
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	f043 0204 	orr.w	r2, r3, #4
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00f      	beq.n	80078ea <HAL_UART_IRQHandler+0xfa>
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <HAL_UART_IRQHandler+0xee>
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f043 0208 	orr.w	r2, r3, #8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 811e 	beq.w	8007b30 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d007      	beq.n	800790e <HAL_UART_IRQHandler+0x11e>
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f9e8 	bl	8007cde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	bf14      	ite	ne
 800791c:	2301      	movne	r3, #1
 800791e:	2300      	moveq	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d102      	bne.n	8007936 <HAL_UART_IRQHandler+0x146>
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d031      	beq.n	800799a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f92a 	bl	8007b90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d023      	beq.n	8007992 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695a      	ldr	r2, [r3, #20]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007958:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	2b00      	cmp	r3, #0
 8007960:	d013      	beq.n	800798a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	4a76      	ldr	r2, [pc, #472]	; (8007b40 <HAL_UART_IRQHandler+0x350>)
 8007968:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	4618      	mov	r0, r3
 8007970:	f7fc f8b4 	bl	8003adc <HAL_DMA_Abort_IT>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d016      	beq.n	80079a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	e00e      	b.n	80079a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f8ec 	bl	8007b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	e00a      	b.n	80079a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f8e8 	bl	8007b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007998:	e006      	b.n	80079a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f8e4 	bl	8007b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079a6:	e0c3      	b.n	8007b30 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a8:	bf00      	nop
    return;
 80079aa:	e0c1      	b.n	8007b30 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	f040 80a1 	bne.w	8007af8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 809b 	beq.w	8007af8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8095 	beq.w	8007af8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04e      	beq.n	8007a90 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80079fc:	8a3b      	ldrh	r3, [r7, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 8098 	beq.w	8007b34 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a08:	8a3a      	ldrh	r2, [r7, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	f080 8092 	bcs.w	8007b34 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8a3a      	ldrh	r2, [r7, #16]
 8007a14:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d02b      	beq.n	8007a78 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a2e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695a      	ldr	r2, [r3, #20]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695a      	ldr	r2, [r3, #20]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0210 	bic.w	r2, r2, #16
 8007a6c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fb fff7 	bl	8003a66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f876 	bl	8007b7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a8e:	e051      	b.n	8007b34 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d047      	beq.n	8007b38 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007aa8:	8a7b      	ldrh	r3, [r7, #18]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d044      	beq.n	8007b38 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007abc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695a      	ldr	r2, [r3, #20]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0201 	bic.w	r2, r2, #1
 8007acc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0210 	bic.w	r2, r2, #16
 8007aea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aec:	8a7b      	ldrh	r3, [r7, #18]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f842 	bl	8007b7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007af6:	e01f      	b.n	8007b38 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <HAL_UART_IRQHandler+0x324>
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f87f 	bl	8007c10 <UART_Transmit_IT>
    return;
 8007b12:	e012      	b.n	8007b3a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00d      	beq.n	8007b3a <HAL_UART_IRQHandler+0x34a>
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f8c0 	bl	8007cae <UART_EndTransmit_IT>
    return;
 8007b2e:	e004      	b.n	8007b3a <HAL_UART_IRQHandler+0x34a>
    return;
 8007b30:	bf00      	nop
 8007b32:	e002      	b.n	8007b3a <HAL_UART_IRQHandler+0x34a>
      return;
 8007b34:	bf00      	nop
 8007b36:	e000      	b.n	8007b3a <HAL_UART_IRQHandler+0x34a>
      return;
 8007b38:	bf00      	nop
  }
}
 8007b3a:	3728      	adds	r7, #40	; 0x28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	08007be9 	.word	0x08007be9

08007b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr

08007b56 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr

08007b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ba6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0201 	bic.w	r2, r2, #1
 8007bb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d107      	bne.n	8007bd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0210 	bic.w	r2, r2, #16
 8007bce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr

08007be8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f7ff ffb0 	bl	8007b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c08:	bf00      	nop
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b21      	cmp	r3, #33	; 0x21
 8007c22:	d13e      	bne.n	8007ca2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2c:	d114      	bne.n	8007c58 <UART_Transmit_IT+0x48>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d110      	bne.n	8007c58 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	1c9a      	adds	r2, r3, #2
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	621a      	str	r2, [r3, #32]
 8007c56:	e008      	b.n	8007c6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	1c59      	adds	r1, r3, #1
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6211      	str	r1, [r2, #32]
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	4619      	mov	r1, r3
 8007c78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10f      	bne.n	8007c9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e000      	b.n	8007ca4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ca2:	2302      	movs	r3, #2
  }
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr

08007cae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff ff38 	bl	8007b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b22      	cmp	r3, #34	; 0x22
 8007cf0:	f040 8099 	bne.w	8007e26 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfc:	d117      	bne.n	8007d2e <UART_Receive_IT+0x50>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d113      	bne.n	8007d2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	1c9a      	adds	r2, r3, #2
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8007d2c:	e026      	b.n	8007d7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d40:	d007      	beq.n	8007d52 <UART_Receive_IT+0x74>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <UART_Receive_IT+0x82>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	701a      	strb	r2, [r3, #0]
 8007d5e:	e008      	b.n	8007d72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d148      	bne.n	8007e22 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0220 	bic.w	r2, r2, #32
 8007d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695a      	ldr	r2, [r3, #20]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0201 	bic.w	r2, r2, #1
 8007dbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d123      	bne.n	8007e18 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0210 	bic.w	r2, r2, #16
 8007de4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b10      	cmp	r3, #16
 8007df2:	d10a      	bne.n	8007e0a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff feb2 	bl	8007b7a <HAL_UARTEx_RxEventCallback>
 8007e16:	e002      	b.n	8007e1e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fe9c 	bl	8007b56 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e002      	b.n	8007e28 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007e26:	2302      	movs	r3, #2
  }
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e6a:	f023 030c 	bic.w	r3, r3, #12
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	430b      	orrs	r3, r1
 8007e76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a2c      	ldr	r2, [pc, #176]	; (8007f44 <UART_SetConfig+0x114>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d103      	bne.n	8007ea0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007e98:	f7fd ff38 	bl	8005d0c <HAL_RCC_GetPCLK2Freq>
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	e002      	b.n	8007ea6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ea0:	f7fd ff20 	bl	8005ce4 <HAL_RCC_GetPCLK1Freq>
 8007ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009a      	lsls	r2, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebc:	4a22      	ldr	r2, [pc, #136]	; (8007f48 <UART_SetConfig+0x118>)
 8007ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	0119      	lsls	r1, r3, #4
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	009a      	lsls	r2, r3, #2
 8007ed0:	441a      	add	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007edc:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <UART_SetConfig+0x118>)
 8007ede:	fba3 0302 	umull	r0, r3, r3, r2
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	2064      	movs	r0, #100	; 0x64
 8007ee6:	fb00 f303 	mul.w	r3, r0, r3
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	3332      	adds	r3, #50	; 0x32
 8007ef0:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <UART_SetConfig+0x118>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	095b      	lsrs	r3, r3, #5
 8007ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007efc:	4419      	add	r1, r3
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009a      	lsls	r2, r3, #2
 8007f08:	441a      	add	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <UART_SetConfig+0x118>)
 8007f16:	fba3 0302 	umull	r0, r3, r3, r2
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	2064      	movs	r0, #100	; 0x64
 8007f1e:	fb00 f303 	mul.w	r3, r0, r3
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	3332      	adds	r3, #50	; 0x32
 8007f28:	4a07      	ldr	r2, [pc, #28]	; (8007f48 <UART_SetConfig+0x118>)
 8007f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	f003 020f 	and.w	r2, r3, #15
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	440a      	add	r2, r1
 8007f3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40013800 	.word	0x40013800
 8007f48:	51eb851f 	.word	0x51eb851f

08007f4c <__errno>:
 8007f4c:	4b01      	ldr	r3, [pc, #4]	; (8007f54 <__errno+0x8>)
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	200000b8 	.word	0x200000b8

08007f58 <__libc_init_array>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	4d0c      	ldr	r5, [pc, #48]	; (8007f90 <__libc_init_array+0x38>)
 8007f5e:	4c0d      	ldr	r4, [pc, #52]	; (8007f94 <__libc_init_array+0x3c>)
 8007f60:	1b64      	subs	r4, r4, r5
 8007f62:	10a4      	asrs	r4, r4, #2
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	d109      	bne.n	8007f7c <__libc_init_array+0x24>
 8007f68:	f002 fd2e 	bl	800a9c8 <_init>
 8007f6c:	2600      	movs	r6, #0
 8007f6e:	4d0a      	ldr	r5, [pc, #40]	; (8007f98 <__libc_init_array+0x40>)
 8007f70:	4c0a      	ldr	r4, [pc, #40]	; (8007f9c <__libc_init_array+0x44>)
 8007f72:	1b64      	subs	r4, r4, r5
 8007f74:	10a4      	asrs	r4, r4, #2
 8007f76:	42a6      	cmp	r6, r4
 8007f78:	d105      	bne.n	8007f86 <__libc_init_array+0x2e>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f80:	4798      	blx	r3
 8007f82:	3601      	adds	r6, #1
 8007f84:	e7ee      	b.n	8007f64 <__libc_init_array+0xc>
 8007f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8a:	4798      	blx	r3
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	e7f2      	b.n	8007f76 <__libc_init_array+0x1e>
 8007f90:	0800adec 	.word	0x0800adec
 8007f94:	0800adec 	.word	0x0800adec
 8007f98:	0800adec 	.word	0x0800adec
 8007f9c:	0800adf0 	.word	0x0800adf0

08007fa0 <memset>:
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4402      	add	r2, r0
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d100      	bne.n	8007faa <memset+0xa>
 8007fa8:	4770      	bx	lr
 8007faa:	f803 1b01 	strb.w	r1, [r3], #1
 8007fae:	e7f9      	b.n	8007fa4 <memset+0x4>

08007fb0 <__cvt>:
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb6:	461f      	mov	r7, r3
 8007fb8:	bfbb      	ittet	lt
 8007fba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007fbe:	461f      	movlt	r7, r3
 8007fc0:	2300      	movge	r3, #0
 8007fc2:	232d      	movlt	r3, #45	; 0x2d
 8007fc4:	b088      	sub	sp, #32
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007fcc:	7013      	strb	r3, [r2, #0]
 8007fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fd0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007fd4:	f023 0820 	bic.w	r8, r3, #32
 8007fd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fdc:	d005      	beq.n	8007fea <__cvt+0x3a>
 8007fde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fe2:	d100      	bne.n	8007fe6 <__cvt+0x36>
 8007fe4:	3501      	adds	r5, #1
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e000      	b.n	8007fec <__cvt+0x3c>
 8007fea:	2303      	movs	r3, #3
 8007fec:	aa07      	add	r2, sp, #28
 8007fee:	9204      	str	r2, [sp, #16]
 8007ff0:	aa06      	add	r2, sp, #24
 8007ff2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007ff6:	e9cd 3500 	strd	r3, r5, [sp]
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	f000 fcc3 	bl	8008988 <_dtoa_r>
 8008002:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008006:	4606      	mov	r6, r0
 8008008:	d102      	bne.n	8008010 <__cvt+0x60>
 800800a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800800c:	07db      	lsls	r3, r3, #31
 800800e:	d522      	bpl.n	8008056 <__cvt+0xa6>
 8008010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008014:	eb06 0905 	add.w	r9, r6, r5
 8008018:	d110      	bne.n	800803c <__cvt+0x8c>
 800801a:	7833      	ldrb	r3, [r6, #0]
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d10a      	bne.n	8008036 <__cvt+0x86>
 8008020:	2200      	movs	r2, #0
 8008022:	2300      	movs	r3, #0
 8008024:	4620      	mov	r0, r4
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 fcbe 	bl	80009a8 <__aeabi_dcmpeq>
 800802c:	b918      	cbnz	r0, 8008036 <__cvt+0x86>
 800802e:	f1c5 0501 	rsb	r5, r5, #1
 8008032:	f8ca 5000 	str.w	r5, [sl]
 8008036:	f8da 3000 	ldr.w	r3, [sl]
 800803a:	4499      	add	r9, r3
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	4620      	mov	r0, r4
 8008042:	4639      	mov	r1, r7
 8008044:	f7f8 fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 8008048:	b108      	cbz	r0, 800804e <__cvt+0x9e>
 800804a:	f8cd 901c 	str.w	r9, [sp, #28]
 800804e:	2230      	movs	r2, #48	; 0x30
 8008050:	9b07      	ldr	r3, [sp, #28]
 8008052:	454b      	cmp	r3, r9
 8008054:	d307      	bcc.n	8008066 <__cvt+0xb6>
 8008056:	4630      	mov	r0, r6
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800805c:	1b9b      	subs	r3, r3, r6
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	b008      	add	sp, #32
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	9107      	str	r1, [sp, #28]
 800806a:	701a      	strb	r2, [r3, #0]
 800806c:	e7f0      	b.n	8008050 <__cvt+0xa0>

0800806e <__exponent>:
 800806e:	4603      	mov	r3, r0
 8008070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008072:	2900      	cmp	r1, #0
 8008074:	f803 2b02 	strb.w	r2, [r3], #2
 8008078:	bfb6      	itet	lt
 800807a:	222d      	movlt	r2, #45	; 0x2d
 800807c:	222b      	movge	r2, #43	; 0x2b
 800807e:	4249      	neglt	r1, r1
 8008080:	2909      	cmp	r1, #9
 8008082:	7042      	strb	r2, [r0, #1]
 8008084:	dd2b      	ble.n	80080de <__exponent+0x70>
 8008086:	f10d 0407 	add.w	r4, sp, #7
 800808a:	46a4      	mov	ip, r4
 800808c:	270a      	movs	r7, #10
 800808e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008092:	460a      	mov	r2, r1
 8008094:	46a6      	mov	lr, r4
 8008096:	fb07 1516 	mls	r5, r7, r6, r1
 800809a:	2a63      	cmp	r2, #99	; 0x63
 800809c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80080a0:	4631      	mov	r1, r6
 80080a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80080a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080aa:	dcf0      	bgt.n	800808e <__exponent+0x20>
 80080ac:	3130      	adds	r1, #48	; 0x30
 80080ae:	f1ae 0502 	sub.w	r5, lr, #2
 80080b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080b6:	4629      	mov	r1, r5
 80080b8:	1c44      	adds	r4, r0, #1
 80080ba:	4561      	cmp	r1, ip
 80080bc:	d30a      	bcc.n	80080d4 <__exponent+0x66>
 80080be:	f10d 0209 	add.w	r2, sp, #9
 80080c2:	eba2 020e 	sub.w	r2, r2, lr
 80080c6:	4565      	cmp	r5, ip
 80080c8:	bf88      	it	hi
 80080ca:	2200      	movhi	r2, #0
 80080cc:	4413      	add	r3, r2
 80080ce:	1a18      	subs	r0, r3, r0
 80080d0:	b003      	add	sp, #12
 80080d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080dc:	e7ed      	b.n	80080ba <__exponent+0x4c>
 80080de:	2330      	movs	r3, #48	; 0x30
 80080e0:	3130      	adds	r1, #48	; 0x30
 80080e2:	7083      	strb	r3, [r0, #2]
 80080e4:	70c1      	strb	r1, [r0, #3]
 80080e6:	1d03      	adds	r3, r0, #4
 80080e8:	e7f1      	b.n	80080ce <__exponent+0x60>
	...

080080ec <_printf_float>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	b091      	sub	sp, #68	; 0x44
 80080f2:	460c      	mov	r4, r1
 80080f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080f8:	4616      	mov	r6, r2
 80080fa:	461f      	mov	r7, r3
 80080fc:	4605      	mov	r5, r0
 80080fe:	f001 fa31 	bl	8009564 <_localeconv_r>
 8008102:	6803      	ldr	r3, [r0, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	9309      	str	r3, [sp, #36]	; 0x24
 8008108:	f7f8 f822 	bl	8000150 <strlen>
 800810c:	2300      	movs	r3, #0
 800810e:	930e      	str	r3, [sp, #56]	; 0x38
 8008110:	f8d8 3000 	ldr.w	r3, [r8]
 8008114:	900a      	str	r0, [sp, #40]	; 0x28
 8008116:	3307      	adds	r3, #7
 8008118:	f023 0307 	bic.w	r3, r3, #7
 800811c:	f103 0208 	add.w	r2, r3, #8
 8008120:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008124:	f8d4 b000 	ldr.w	fp, [r4]
 8008128:	f8c8 2000 	str.w	r2, [r8]
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008134:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008138:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800813c:	930b      	str	r3, [sp, #44]	; 0x2c
 800813e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008142:	4640      	mov	r0, r8
 8008144:	4b9c      	ldr	r3, [pc, #624]	; (80083b8 <_printf_float+0x2cc>)
 8008146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008148:	f7f8 fc60 	bl	8000a0c <__aeabi_dcmpun>
 800814c:	bb70      	cbnz	r0, 80081ac <_printf_float+0xc0>
 800814e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008152:	4640      	mov	r0, r8
 8008154:	4b98      	ldr	r3, [pc, #608]	; (80083b8 <_printf_float+0x2cc>)
 8008156:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008158:	f7f8 fc3a 	bl	80009d0 <__aeabi_dcmple>
 800815c:	bb30      	cbnz	r0, 80081ac <_printf_float+0xc0>
 800815e:	2200      	movs	r2, #0
 8008160:	2300      	movs	r3, #0
 8008162:	4640      	mov	r0, r8
 8008164:	4651      	mov	r1, sl
 8008166:	f7f8 fc29 	bl	80009bc <__aeabi_dcmplt>
 800816a:	b110      	cbz	r0, 8008172 <_printf_float+0x86>
 800816c:	232d      	movs	r3, #45	; 0x2d
 800816e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008172:	4b92      	ldr	r3, [pc, #584]	; (80083bc <_printf_float+0x2d0>)
 8008174:	4892      	ldr	r0, [pc, #584]	; (80083c0 <_printf_float+0x2d4>)
 8008176:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800817a:	bf94      	ite	ls
 800817c:	4698      	movls	r8, r3
 800817e:	4680      	movhi	r8, r0
 8008180:	2303      	movs	r3, #3
 8008182:	f04f 0a00 	mov.w	sl, #0
 8008186:	6123      	str	r3, [r4, #16]
 8008188:	f02b 0304 	bic.w	r3, fp, #4
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	4633      	mov	r3, r6
 8008190:	4621      	mov	r1, r4
 8008192:	4628      	mov	r0, r5
 8008194:	9700      	str	r7, [sp, #0]
 8008196:	aa0f      	add	r2, sp, #60	; 0x3c
 8008198:	f000 f9d4 	bl	8008544 <_printf_common>
 800819c:	3001      	adds	r0, #1
 800819e:	f040 8090 	bne.w	80082c2 <_printf_float+0x1d6>
 80081a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a6:	b011      	add	sp, #68	; 0x44
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	4642      	mov	r2, r8
 80081ae:	4653      	mov	r3, sl
 80081b0:	4640      	mov	r0, r8
 80081b2:	4651      	mov	r1, sl
 80081b4:	f7f8 fc2a 	bl	8000a0c <__aeabi_dcmpun>
 80081b8:	b148      	cbz	r0, 80081ce <_printf_float+0xe2>
 80081ba:	f1ba 0f00 	cmp.w	sl, #0
 80081be:	bfb8      	it	lt
 80081c0:	232d      	movlt	r3, #45	; 0x2d
 80081c2:	4880      	ldr	r0, [pc, #512]	; (80083c4 <_printf_float+0x2d8>)
 80081c4:	bfb8      	it	lt
 80081c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081ca:	4b7f      	ldr	r3, [pc, #508]	; (80083c8 <_printf_float+0x2dc>)
 80081cc:	e7d3      	b.n	8008176 <_printf_float+0x8a>
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	d142      	bne.n	800825e <_printf_float+0x172>
 80081d8:	2306      	movs	r3, #6
 80081da:	6063      	str	r3, [r4, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	9206      	str	r2, [sp, #24]
 80081e0:	aa0e      	add	r2, sp, #56	; 0x38
 80081e2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80081e6:	aa0d      	add	r2, sp, #52	; 0x34
 80081e8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081ec:	9203      	str	r2, [sp, #12]
 80081ee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	6863      	ldr	r3, [r4, #4]
 80081fa:	4642      	mov	r2, r8
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	4628      	mov	r0, r5
 8008200:	4653      	mov	r3, sl
 8008202:	910b      	str	r1, [sp, #44]	; 0x2c
 8008204:	f7ff fed4 	bl	8007fb0 <__cvt>
 8008208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800820a:	4680      	mov	r8, r0
 800820c:	2947      	cmp	r1, #71	; 0x47
 800820e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008210:	d108      	bne.n	8008224 <_printf_float+0x138>
 8008212:	1cc8      	adds	r0, r1, #3
 8008214:	db02      	blt.n	800821c <_printf_float+0x130>
 8008216:	6863      	ldr	r3, [r4, #4]
 8008218:	4299      	cmp	r1, r3
 800821a:	dd40      	ble.n	800829e <_printf_float+0x1b2>
 800821c:	f1a9 0902 	sub.w	r9, r9, #2
 8008220:	fa5f f989 	uxtb.w	r9, r9
 8008224:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008228:	d81f      	bhi.n	800826a <_printf_float+0x17e>
 800822a:	464a      	mov	r2, r9
 800822c:	3901      	subs	r1, #1
 800822e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008232:	910d      	str	r1, [sp, #52]	; 0x34
 8008234:	f7ff ff1b 	bl	800806e <__exponent>
 8008238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800823a:	4682      	mov	sl, r0
 800823c:	1813      	adds	r3, r2, r0
 800823e:	2a01      	cmp	r2, #1
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	dc02      	bgt.n	800824a <_printf_float+0x15e>
 8008244:	6822      	ldr	r2, [r4, #0]
 8008246:	07d2      	lsls	r2, r2, #31
 8008248:	d501      	bpl.n	800824e <_printf_float+0x162>
 800824a:	3301      	adds	r3, #1
 800824c:	6123      	str	r3, [r4, #16]
 800824e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008252:	2b00      	cmp	r3, #0
 8008254:	d09b      	beq.n	800818e <_printf_float+0xa2>
 8008256:	232d      	movs	r3, #45	; 0x2d
 8008258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825c:	e797      	b.n	800818e <_printf_float+0xa2>
 800825e:	2947      	cmp	r1, #71	; 0x47
 8008260:	d1bc      	bne.n	80081dc <_printf_float+0xf0>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1ba      	bne.n	80081dc <_printf_float+0xf0>
 8008266:	2301      	movs	r3, #1
 8008268:	e7b7      	b.n	80081da <_printf_float+0xee>
 800826a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800826e:	d118      	bne.n	80082a2 <_printf_float+0x1b6>
 8008270:	2900      	cmp	r1, #0
 8008272:	6863      	ldr	r3, [r4, #4]
 8008274:	dd0b      	ble.n	800828e <_printf_float+0x1a2>
 8008276:	6121      	str	r1, [r4, #16]
 8008278:	b913      	cbnz	r3, 8008280 <_printf_float+0x194>
 800827a:	6822      	ldr	r2, [r4, #0]
 800827c:	07d0      	lsls	r0, r2, #31
 800827e:	d502      	bpl.n	8008286 <_printf_float+0x19a>
 8008280:	3301      	adds	r3, #1
 8008282:	440b      	add	r3, r1
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	f04f 0a00 	mov.w	sl, #0
 800828a:	65a1      	str	r1, [r4, #88]	; 0x58
 800828c:	e7df      	b.n	800824e <_printf_float+0x162>
 800828e:	b913      	cbnz	r3, 8008296 <_printf_float+0x1aa>
 8008290:	6822      	ldr	r2, [r4, #0]
 8008292:	07d2      	lsls	r2, r2, #31
 8008294:	d501      	bpl.n	800829a <_printf_float+0x1ae>
 8008296:	3302      	adds	r3, #2
 8008298:	e7f4      	b.n	8008284 <_printf_float+0x198>
 800829a:	2301      	movs	r3, #1
 800829c:	e7f2      	b.n	8008284 <_printf_float+0x198>
 800829e:	f04f 0967 	mov.w	r9, #103	; 0x67
 80082a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a4:	4299      	cmp	r1, r3
 80082a6:	db05      	blt.n	80082b4 <_printf_float+0x1c8>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	6121      	str	r1, [r4, #16]
 80082ac:	07d8      	lsls	r0, r3, #31
 80082ae:	d5ea      	bpl.n	8008286 <_printf_float+0x19a>
 80082b0:	1c4b      	adds	r3, r1, #1
 80082b2:	e7e7      	b.n	8008284 <_printf_float+0x198>
 80082b4:	2900      	cmp	r1, #0
 80082b6:	bfcc      	ite	gt
 80082b8:	2201      	movgt	r2, #1
 80082ba:	f1c1 0202 	rsble	r2, r1, #2
 80082be:	4413      	add	r3, r2
 80082c0:	e7e0      	b.n	8008284 <_printf_float+0x198>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	055a      	lsls	r2, r3, #21
 80082c6:	d407      	bmi.n	80082d8 <_printf_float+0x1ec>
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	4642      	mov	r2, r8
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	d12b      	bne.n	800832e <_printf_float+0x242>
 80082d6:	e764      	b.n	80081a2 <_printf_float+0xb6>
 80082d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082dc:	f240 80dd 	bls.w	800849a <_printf_float+0x3ae>
 80082e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082e4:	2200      	movs	r2, #0
 80082e6:	2300      	movs	r3, #0
 80082e8:	f7f8 fb5e 	bl	80009a8 <__aeabi_dcmpeq>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d033      	beq.n	8008358 <_printf_float+0x26c>
 80082f0:	2301      	movs	r3, #1
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	4a35      	ldr	r2, [pc, #212]	; (80083cc <_printf_float+0x2e0>)
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	f43f af51 	beq.w	80081a2 <_printf_float+0xb6>
 8008300:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008304:	429a      	cmp	r2, r3
 8008306:	db02      	blt.n	800830e <_printf_float+0x222>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	07d8      	lsls	r0, r3, #31
 800830c:	d50f      	bpl.n	800832e <_printf_float+0x242>
 800830e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f af42 	beq.w	80081a2 <_printf_float+0xb6>
 800831e:	f04f 0800 	mov.w	r8, #0
 8008322:	f104 091a 	add.w	r9, r4, #26
 8008326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008328:	3b01      	subs	r3, #1
 800832a:	4543      	cmp	r3, r8
 800832c:	dc09      	bgt.n	8008342 <_printf_float+0x256>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	079b      	lsls	r3, r3, #30
 8008332:	f100 8102 	bmi.w	800853a <_printf_float+0x44e>
 8008336:	68e0      	ldr	r0, [r4, #12]
 8008338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800833a:	4298      	cmp	r0, r3
 800833c:	bfb8      	it	lt
 800833e:	4618      	movlt	r0, r3
 8008340:	e731      	b.n	80081a6 <_printf_float+0xba>
 8008342:	2301      	movs	r3, #1
 8008344:	464a      	mov	r2, r9
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	f43f af28 	beq.w	80081a2 <_printf_float+0xb6>
 8008352:	f108 0801 	add.w	r8, r8, #1
 8008356:	e7e6      	b.n	8008326 <_printf_float+0x23a>
 8008358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835a:	2b00      	cmp	r3, #0
 800835c:	dc38      	bgt.n	80083d0 <_printf_float+0x2e4>
 800835e:	2301      	movs	r3, #1
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	4a19      	ldr	r2, [pc, #100]	; (80083cc <_printf_float+0x2e0>)
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f af1a 	beq.w	80081a2 <_printf_float+0xb6>
 800836e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008372:	4313      	orrs	r3, r2
 8008374:	d102      	bne.n	800837c <_printf_float+0x290>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	07d9      	lsls	r1, r3, #31
 800837a:	d5d8      	bpl.n	800832e <_printf_float+0x242>
 800837c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f af0b 	beq.w	80081a2 <_printf_float+0xb6>
 800838c:	f04f 0900 	mov.w	r9, #0
 8008390:	f104 0a1a 	add.w	sl, r4, #26
 8008394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008396:	425b      	negs	r3, r3
 8008398:	454b      	cmp	r3, r9
 800839a:	dc01      	bgt.n	80083a0 <_printf_float+0x2b4>
 800839c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800839e:	e794      	b.n	80082ca <_printf_float+0x1de>
 80083a0:	2301      	movs	r3, #1
 80083a2:	4652      	mov	r2, sl
 80083a4:	4631      	mov	r1, r6
 80083a6:	4628      	mov	r0, r5
 80083a8:	47b8      	blx	r7
 80083aa:	3001      	adds	r0, #1
 80083ac:	f43f aef9 	beq.w	80081a2 <_printf_float+0xb6>
 80083b0:	f109 0901 	add.w	r9, r9, #1
 80083b4:	e7ee      	b.n	8008394 <_printf_float+0x2a8>
 80083b6:	bf00      	nop
 80083b8:	7fefffff 	.word	0x7fefffff
 80083bc:	0800aa18 	.word	0x0800aa18
 80083c0:	0800aa1c 	.word	0x0800aa1c
 80083c4:	0800aa24 	.word	0x0800aa24
 80083c8:	0800aa20 	.word	0x0800aa20
 80083cc:	0800aa28 	.word	0x0800aa28
 80083d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083d4:	429a      	cmp	r2, r3
 80083d6:	bfa8      	it	ge
 80083d8:	461a      	movge	r2, r3
 80083da:	2a00      	cmp	r2, #0
 80083dc:	4691      	mov	r9, r2
 80083de:	dc37      	bgt.n	8008450 <_printf_float+0x364>
 80083e0:	f04f 0b00 	mov.w	fp, #0
 80083e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e8:	f104 021a 	add.w	r2, r4, #26
 80083ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083f0:	ebaa 0309 	sub.w	r3, sl, r9
 80083f4:	455b      	cmp	r3, fp
 80083f6:	dc33      	bgt.n	8008460 <_printf_float+0x374>
 80083f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083fc:	429a      	cmp	r2, r3
 80083fe:	db3b      	blt.n	8008478 <_printf_float+0x38c>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	07da      	lsls	r2, r3, #31
 8008404:	d438      	bmi.n	8008478 <_printf_float+0x38c>
 8008406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008408:	990d      	ldr	r1, [sp, #52]	; 0x34
 800840a:	eba3 020a 	sub.w	r2, r3, sl
 800840e:	eba3 0901 	sub.w	r9, r3, r1
 8008412:	4591      	cmp	r9, r2
 8008414:	bfa8      	it	ge
 8008416:	4691      	movge	r9, r2
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	dc34      	bgt.n	8008488 <_printf_float+0x39c>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008426:	f104 0a1a 	add.w	sl, r4, #26
 800842a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	eba3 0309 	sub.w	r3, r3, r9
 8008434:	4543      	cmp	r3, r8
 8008436:	f77f af7a 	ble.w	800832e <_printf_float+0x242>
 800843a:	2301      	movs	r3, #1
 800843c:	4652      	mov	r2, sl
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	f43f aeac 	beq.w	80081a2 <_printf_float+0xb6>
 800844a:	f108 0801 	add.w	r8, r8, #1
 800844e:	e7ec      	b.n	800842a <_printf_float+0x33e>
 8008450:	4613      	mov	r3, r2
 8008452:	4631      	mov	r1, r6
 8008454:	4642      	mov	r2, r8
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	d1c0      	bne.n	80083e0 <_printf_float+0x2f4>
 800845e:	e6a0      	b.n	80081a2 <_printf_float+0xb6>
 8008460:	2301      	movs	r3, #1
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	920b      	str	r2, [sp, #44]	; 0x2c
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	f43f ae99 	beq.w	80081a2 <_printf_float+0xb6>
 8008470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008472:	f10b 0b01 	add.w	fp, fp, #1
 8008476:	e7b9      	b.n	80083ec <_printf_float+0x300>
 8008478:	4631      	mov	r1, r6
 800847a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	d1bf      	bne.n	8008406 <_printf_float+0x31a>
 8008486:	e68c      	b.n	80081a2 <_printf_float+0xb6>
 8008488:	464b      	mov	r3, r9
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	eb08 020a 	add.w	r2, r8, sl
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	d1c2      	bne.n	800841e <_printf_float+0x332>
 8008498:	e683      	b.n	80081a2 <_printf_float+0xb6>
 800849a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849c:	2a01      	cmp	r2, #1
 800849e:	dc01      	bgt.n	80084a4 <_printf_float+0x3b8>
 80084a0:	07db      	lsls	r3, r3, #31
 80084a2:	d537      	bpl.n	8008514 <_printf_float+0x428>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4642      	mov	r2, r8
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	f43f ae77 	beq.w	80081a2 <_printf_float+0xb6>
 80084b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084b8:	4631      	mov	r1, r6
 80084ba:	4628      	mov	r0, r5
 80084bc:	47b8      	blx	r7
 80084be:	3001      	adds	r0, #1
 80084c0:	f43f ae6f 	beq.w	80081a2 <_printf_float+0xb6>
 80084c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084c8:	2200      	movs	r2, #0
 80084ca:	2300      	movs	r3, #0
 80084cc:	f7f8 fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80084d0:	b9d8      	cbnz	r0, 800850a <_printf_float+0x41e>
 80084d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d4:	f108 0201 	add.w	r2, r8, #1
 80084d8:	3b01      	subs	r3, #1
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	d10e      	bne.n	8008502 <_printf_float+0x416>
 80084e4:	e65d      	b.n	80081a2 <_printf_float+0xb6>
 80084e6:	2301      	movs	r3, #1
 80084e8:	464a      	mov	r2, r9
 80084ea:	4631      	mov	r1, r6
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	f43f ae56 	beq.w	80081a2 <_printf_float+0xb6>
 80084f6:	f108 0801 	add.w	r8, r8, #1
 80084fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4543      	cmp	r3, r8
 8008500:	dcf1      	bgt.n	80084e6 <_printf_float+0x3fa>
 8008502:	4653      	mov	r3, sl
 8008504:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008508:	e6e0      	b.n	80082cc <_printf_float+0x1e0>
 800850a:	f04f 0800 	mov.w	r8, #0
 800850e:	f104 091a 	add.w	r9, r4, #26
 8008512:	e7f2      	b.n	80084fa <_printf_float+0x40e>
 8008514:	2301      	movs	r3, #1
 8008516:	4642      	mov	r2, r8
 8008518:	e7df      	b.n	80084da <_printf_float+0x3ee>
 800851a:	2301      	movs	r3, #1
 800851c:	464a      	mov	r2, r9
 800851e:	4631      	mov	r1, r6
 8008520:	4628      	mov	r0, r5
 8008522:	47b8      	blx	r7
 8008524:	3001      	adds	r0, #1
 8008526:	f43f ae3c 	beq.w	80081a2 <_printf_float+0xb6>
 800852a:	f108 0801 	add.w	r8, r8, #1
 800852e:	68e3      	ldr	r3, [r4, #12]
 8008530:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008532:	1a5b      	subs	r3, r3, r1
 8008534:	4543      	cmp	r3, r8
 8008536:	dcf0      	bgt.n	800851a <_printf_float+0x42e>
 8008538:	e6fd      	b.n	8008336 <_printf_float+0x24a>
 800853a:	f04f 0800 	mov.w	r8, #0
 800853e:	f104 0919 	add.w	r9, r4, #25
 8008542:	e7f4      	b.n	800852e <_printf_float+0x442>

08008544 <_printf_common>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	4616      	mov	r6, r2
 800854a:	4699      	mov	r9, r3
 800854c:	688a      	ldr	r2, [r1, #8]
 800854e:	690b      	ldr	r3, [r1, #16]
 8008550:	4607      	mov	r7, r0
 8008552:	4293      	cmp	r3, r2
 8008554:	bfb8      	it	lt
 8008556:	4613      	movlt	r3, r2
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800855e:	460c      	mov	r4, r1
 8008560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008564:	b10a      	cbz	r2, 800856a <_printf_common+0x26>
 8008566:	3301      	adds	r3, #1
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	0699      	lsls	r1, r3, #26
 800856e:	bf42      	ittt	mi
 8008570:	6833      	ldrmi	r3, [r6, #0]
 8008572:	3302      	addmi	r3, #2
 8008574:	6033      	strmi	r3, [r6, #0]
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	f015 0506 	ands.w	r5, r5, #6
 800857c:	d106      	bne.n	800858c <_printf_common+0x48>
 800857e:	f104 0a19 	add.w	sl, r4, #25
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	6832      	ldr	r2, [r6, #0]
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	42ab      	cmp	r3, r5
 800858a:	dc28      	bgt.n	80085de <_printf_common+0x9a>
 800858c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008590:	1e13      	subs	r3, r2, #0
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	bf18      	it	ne
 8008596:	2301      	movne	r3, #1
 8008598:	0692      	lsls	r2, r2, #26
 800859a:	d42d      	bmi.n	80085f8 <_printf_common+0xb4>
 800859c:	4649      	mov	r1, r9
 800859e:	4638      	mov	r0, r7
 80085a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a4:	47c0      	blx	r8
 80085a6:	3001      	adds	r0, #1
 80085a8:	d020      	beq.n	80085ec <_printf_common+0xa8>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	68e5      	ldr	r5, [r4, #12]
 80085ae:	f003 0306 	and.w	r3, r3, #6
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	bf18      	it	ne
 80085b6:	2500      	movne	r5, #0
 80085b8:	6832      	ldr	r2, [r6, #0]
 80085ba:	f04f 0600 	mov.w	r6, #0
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	bf08      	it	eq
 80085c2:	1aad      	subeq	r5, r5, r2
 80085c4:	6922      	ldr	r2, [r4, #16]
 80085c6:	bf08      	it	eq
 80085c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085cc:	4293      	cmp	r3, r2
 80085ce:	bfc4      	itt	gt
 80085d0:	1a9b      	subgt	r3, r3, r2
 80085d2:	18ed      	addgt	r5, r5, r3
 80085d4:	341a      	adds	r4, #26
 80085d6:	42b5      	cmp	r5, r6
 80085d8:	d11a      	bne.n	8008610 <_printf_common+0xcc>
 80085da:	2000      	movs	r0, #0
 80085dc:	e008      	b.n	80085f0 <_printf_common+0xac>
 80085de:	2301      	movs	r3, #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	4649      	mov	r1, r9
 80085e4:	4638      	mov	r0, r7
 80085e6:	47c0      	blx	r8
 80085e8:	3001      	adds	r0, #1
 80085ea:	d103      	bne.n	80085f4 <_printf_common+0xb0>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f4:	3501      	adds	r5, #1
 80085f6:	e7c4      	b.n	8008582 <_printf_common+0x3e>
 80085f8:	2030      	movs	r0, #48	; 0x30
 80085fa:	18e1      	adds	r1, r4, r3
 80085fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008606:	4422      	add	r2, r4
 8008608:	3302      	adds	r3, #2
 800860a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800860e:	e7c5      	b.n	800859c <_printf_common+0x58>
 8008610:	2301      	movs	r3, #1
 8008612:	4622      	mov	r2, r4
 8008614:	4649      	mov	r1, r9
 8008616:	4638      	mov	r0, r7
 8008618:	47c0      	blx	r8
 800861a:	3001      	adds	r0, #1
 800861c:	d0e6      	beq.n	80085ec <_printf_common+0xa8>
 800861e:	3601      	adds	r6, #1
 8008620:	e7d9      	b.n	80085d6 <_printf_common+0x92>
	...

08008624 <_printf_i>:
 8008624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	7e0f      	ldrb	r7, [r1, #24]
 800862a:	4691      	mov	r9, r2
 800862c:	2f78      	cmp	r7, #120	; 0x78
 800862e:	4680      	mov	r8, r0
 8008630:	460c      	mov	r4, r1
 8008632:	469a      	mov	sl, r3
 8008634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800863a:	d807      	bhi.n	800864c <_printf_i+0x28>
 800863c:	2f62      	cmp	r7, #98	; 0x62
 800863e:	d80a      	bhi.n	8008656 <_printf_i+0x32>
 8008640:	2f00      	cmp	r7, #0
 8008642:	f000 80d9 	beq.w	80087f8 <_printf_i+0x1d4>
 8008646:	2f58      	cmp	r7, #88	; 0x58
 8008648:	f000 80a4 	beq.w	8008794 <_printf_i+0x170>
 800864c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008654:	e03a      	b.n	80086cc <_printf_i+0xa8>
 8008656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800865a:	2b15      	cmp	r3, #21
 800865c:	d8f6      	bhi.n	800864c <_printf_i+0x28>
 800865e:	a101      	add	r1, pc, #4	; (adr r1, 8008664 <_printf_i+0x40>)
 8008660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086d1 	.word	0x080086d1
 800866c:	0800864d 	.word	0x0800864d
 8008670:	0800864d 	.word	0x0800864d
 8008674:	0800864d 	.word	0x0800864d
 8008678:	0800864d 	.word	0x0800864d
 800867c:	080086d1 	.word	0x080086d1
 8008680:	0800864d 	.word	0x0800864d
 8008684:	0800864d 	.word	0x0800864d
 8008688:	0800864d 	.word	0x0800864d
 800868c:	0800864d 	.word	0x0800864d
 8008690:	080087df 	.word	0x080087df
 8008694:	08008701 	.word	0x08008701
 8008698:	080087c1 	.word	0x080087c1
 800869c:	0800864d 	.word	0x0800864d
 80086a0:	0800864d 	.word	0x0800864d
 80086a4:	08008801 	.word	0x08008801
 80086a8:	0800864d 	.word	0x0800864d
 80086ac:	08008701 	.word	0x08008701
 80086b0:	0800864d 	.word	0x0800864d
 80086b4:	0800864d 	.word	0x0800864d
 80086b8:	080087c9 	.word	0x080087c9
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	602a      	str	r2, [r5, #0]
 80086c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0a4      	b.n	800881a <_printf_i+0x1f6>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	6829      	ldr	r1, [r5, #0]
 80086d4:	0606      	lsls	r6, r0, #24
 80086d6:	f101 0304 	add.w	r3, r1, #4
 80086da:	d50a      	bpl.n	80086f2 <_printf_i+0xce>
 80086dc:	680e      	ldr	r6, [r1, #0]
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	da03      	bge.n	80086ec <_printf_i+0xc8>
 80086e4:	232d      	movs	r3, #45	; 0x2d
 80086e6:	4276      	negs	r6, r6
 80086e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ec:	230a      	movs	r3, #10
 80086ee:	485e      	ldr	r0, [pc, #376]	; (8008868 <_printf_i+0x244>)
 80086f0:	e019      	b.n	8008726 <_printf_i+0x102>
 80086f2:	680e      	ldr	r6, [r1, #0]
 80086f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	bf18      	it	ne
 80086fc:	b236      	sxthne	r6, r6
 80086fe:	e7ef      	b.n	80086e0 <_printf_i+0xbc>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6820      	ldr	r0, [r4, #0]
 8008704:	1d19      	adds	r1, r3, #4
 8008706:	6029      	str	r1, [r5, #0]
 8008708:	0601      	lsls	r1, r0, #24
 800870a:	d501      	bpl.n	8008710 <_printf_i+0xec>
 800870c:	681e      	ldr	r6, [r3, #0]
 800870e:	e002      	b.n	8008716 <_printf_i+0xf2>
 8008710:	0646      	lsls	r6, r0, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0xe8>
 8008714:	881e      	ldrh	r6, [r3, #0]
 8008716:	2f6f      	cmp	r7, #111	; 0x6f
 8008718:	bf0c      	ite	eq
 800871a:	2308      	moveq	r3, #8
 800871c:	230a      	movne	r3, #10
 800871e:	4852      	ldr	r0, [pc, #328]	; (8008868 <_printf_i+0x244>)
 8008720:	2100      	movs	r1, #0
 8008722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008726:	6865      	ldr	r5, [r4, #4]
 8008728:	2d00      	cmp	r5, #0
 800872a:	bfa8      	it	ge
 800872c:	6821      	ldrge	r1, [r4, #0]
 800872e:	60a5      	str	r5, [r4, #8]
 8008730:	bfa4      	itt	ge
 8008732:	f021 0104 	bicge.w	r1, r1, #4
 8008736:	6021      	strge	r1, [r4, #0]
 8008738:	b90e      	cbnz	r6, 800873e <_printf_i+0x11a>
 800873a:	2d00      	cmp	r5, #0
 800873c:	d04d      	beq.n	80087da <_printf_i+0x1b6>
 800873e:	4615      	mov	r5, r2
 8008740:	fbb6 f1f3 	udiv	r1, r6, r3
 8008744:	fb03 6711 	mls	r7, r3, r1, r6
 8008748:	5dc7      	ldrb	r7, [r0, r7]
 800874a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800874e:	4637      	mov	r7, r6
 8008750:	42bb      	cmp	r3, r7
 8008752:	460e      	mov	r6, r1
 8008754:	d9f4      	bls.n	8008740 <_printf_i+0x11c>
 8008756:	2b08      	cmp	r3, #8
 8008758:	d10b      	bne.n	8008772 <_printf_i+0x14e>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	07de      	lsls	r6, r3, #31
 800875e:	d508      	bpl.n	8008772 <_printf_i+0x14e>
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	6861      	ldr	r1, [r4, #4]
 8008764:	4299      	cmp	r1, r3
 8008766:	bfde      	ittt	le
 8008768:	2330      	movle	r3, #48	; 0x30
 800876a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800876e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008772:	1b52      	subs	r2, r2, r5
 8008774:	6122      	str	r2, [r4, #16]
 8008776:	464b      	mov	r3, r9
 8008778:	4621      	mov	r1, r4
 800877a:	4640      	mov	r0, r8
 800877c:	f8cd a000 	str.w	sl, [sp]
 8008780:	aa03      	add	r2, sp, #12
 8008782:	f7ff fedf 	bl	8008544 <_printf_common>
 8008786:	3001      	adds	r0, #1
 8008788:	d14c      	bne.n	8008824 <_printf_i+0x200>
 800878a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800878e:	b004      	add	sp, #16
 8008790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008794:	4834      	ldr	r0, [pc, #208]	; (8008868 <_printf_i+0x244>)
 8008796:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800879a:	6829      	ldr	r1, [r5, #0]
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	f851 6b04 	ldr.w	r6, [r1], #4
 80087a2:	6029      	str	r1, [r5, #0]
 80087a4:	061d      	lsls	r5, r3, #24
 80087a6:	d514      	bpl.n	80087d2 <_printf_i+0x1ae>
 80087a8:	07df      	lsls	r7, r3, #31
 80087aa:	bf44      	itt	mi
 80087ac:	f043 0320 	orrmi.w	r3, r3, #32
 80087b0:	6023      	strmi	r3, [r4, #0]
 80087b2:	b91e      	cbnz	r6, 80087bc <_printf_i+0x198>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	f023 0320 	bic.w	r3, r3, #32
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	2310      	movs	r3, #16
 80087be:	e7af      	b.n	8008720 <_printf_i+0xfc>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	f043 0320 	orr.w	r3, r3, #32
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	2378      	movs	r3, #120	; 0x78
 80087ca:	4828      	ldr	r0, [pc, #160]	; (800886c <_printf_i+0x248>)
 80087cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087d0:	e7e3      	b.n	800879a <_printf_i+0x176>
 80087d2:	0659      	lsls	r1, r3, #25
 80087d4:	bf48      	it	mi
 80087d6:	b2b6      	uxthmi	r6, r6
 80087d8:	e7e6      	b.n	80087a8 <_printf_i+0x184>
 80087da:	4615      	mov	r5, r2
 80087dc:	e7bb      	b.n	8008756 <_printf_i+0x132>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	6826      	ldr	r6, [r4, #0]
 80087e2:	1d18      	adds	r0, r3, #4
 80087e4:	6961      	ldr	r1, [r4, #20]
 80087e6:	6028      	str	r0, [r5, #0]
 80087e8:	0635      	lsls	r5, r6, #24
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	d501      	bpl.n	80087f2 <_printf_i+0x1ce>
 80087ee:	6019      	str	r1, [r3, #0]
 80087f0:	e002      	b.n	80087f8 <_printf_i+0x1d4>
 80087f2:	0670      	lsls	r0, r6, #25
 80087f4:	d5fb      	bpl.n	80087ee <_printf_i+0x1ca>
 80087f6:	8019      	strh	r1, [r3, #0]
 80087f8:	2300      	movs	r3, #0
 80087fa:	4615      	mov	r5, r2
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	e7ba      	b.n	8008776 <_printf_i+0x152>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	2100      	movs	r1, #0
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	602a      	str	r2, [r5, #0]
 8008808:	681d      	ldr	r5, [r3, #0]
 800880a:	6862      	ldr	r2, [r4, #4]
 800880c:	4628      	mov	r0, r5
 800880e:	f000 feb5 	bl	800957c <memchr>
 8008812:	b108      	cbz	r0, 8008818 <_printf_i+0x1f4>
 8008814:	1b40      	subs	r0, r0, r5
 8008816:	6060      	str	r0, [r4, #4]
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	2300      	movs	r3, #0
 800881e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008822:	e7a8      	b.n	8008776 <_printf_i+0x152>
 8008824:	462a      	mov	r2, r5
 8008826:	4649      	mov	r1, r9
 8008828:	4640      	mov	r0, r8
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	47d0      	blx	sl
 800882e:	3001      	adds	r0, #1
 8008830:	d0ab      	beq.n	800878a <_printf_i+0x166>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	079b      	lsls	r3, r3, #30
 8008836:	d413      	bmi.n	8008860 <_printf_i+0x23c>
 8008838:	68e0      	ldr	r0, [r4, #12]
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	4298      	cmp	r0, r3
 800883e:	bfb8      	it	lt
 8008840:	4618      	movlt	r0, r3
 8008842:	e7a4      	b.n	800878e <_printf_i+0x16a>
 8008844:	2301      	movs	r3, #1
 8008846:	4632      	mov	r2, r6
 8008848:	4649      	mov	r1, r9
 800884a:	4640      	mov	r0, r8
 800884c:	47d0      	blx	sl
 800884e:	3001      	adds	r0, #1
 8008850:	d09b      	beq.n	800878a <_printf_i+0x166>
 8008852:	3501      	adds	r5, #1
 8008854:	68e3      	ldr	r3, [r4, #12]
 8008856:	9903      	ldr	r1, [sp, #12]
 8008858:	1a5b      	subs	r3, r3, r1
 800885a:	42ab      	cmp	r3, r5
 800885c:	dcf2      	bgt.n	8008844 <_printf_i+0x220>
 800885e:	e7eb      	b.n	8008838 <_printf_i+0x214>
 8008860:	2500      	movs	r5, #0
 8008862:	f104 0619 	add.w	r6, r4, #25
 8008866:	e7f5      	b.n	8008854 <_printf_i+0x230>
 8008868:	0800aa2a 	.word	0x0800aa2a
 800886c:	0800aa3b 	.word	0x0800aa3b

08008870 <quorem>:
 8008870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	6903      	ldr	r3, [r0, #16]
 8008876:	690c      	ldr	r4, [r1, #16]
 8008878:	4607      	mov	r7, r0
 800887a:	42a3      	cmp	r3, r4
 800887c:	f2c0 8082 	blt.w	8008984 <quorem+0x114>
 8008880:	3c01      	subs	r4, #1
 8008882:	f100 0514 	add.w	r5, r0, #20
 8008886:	f101 0814 	add.w	r8, r1, #20
 800888a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008898:	3301      	adds	r3, #1
 800889a:	429a      	cmp	r2, r3
 800889c:	fbb2 f6f3 	udiv	r6, r2, r3
 80088a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088a8:	d331      	bcc.n	800890e <quorem+0x9e>
 80088aa:	f04f 0e00 	mov.w	lr, #0
 80088ae:	4640      	mov	r0, r8
 80088b0:	46ac      	mov	ip, r5
 80088b2:	46f2      	mov	sl, lr
 80088b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80088b8:	b293      	uxth	r3, r2
 80088ba:	fb06 e303 	mla	r3, r6, r3, lr
 80088be:	0c12      	lsrs	r2, r2, #16
 80088c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	fb06 e202 	mla	r2, r6, r2, lr
 80088ca:	ebaa 0303 	sub.w	r3, sl, r3
 80088ce:	f8dc a000 	ldr.w	sl, [ip]
 80088d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088d6:	fa1f fa8a 	uxth.w	sl, sl
 80088da:	4453      	add	r3, sl
 80088dc:	f8dc a000 	ldr.w	sl, [ip]
 80088e0:	b292      	uxth	r2, r2
 80088e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f0:	4581      	cmp	r9, r0
 80088f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088f6:	f84c 3b04 	str.w	r3, [ip], #4
 80088fa:	d2db      	bcs.n	80088b4 <quorem+0x44>
 80088fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008900:	b92b      	cbnz	r3, 800890e <quorem+0x9e>
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	3b04      	subs	r3, #4
 8008906:	429d      	cmp	r5, r3
 8008908:	461a      	mov	r2, r3
 800890a:	d32f      	bcc.n	800896c <quorem+0xfc>
 800890c:	613c      	str	r4, [r7, #16]
 800890e:	4638      	mov	r0, r7
 8008910:	f001 f8ce 	bl	8009ab0 <__mcmp>
 8008914:	2800      	cmp	r0, #0
 8008916:	db25      	blt.n	8008964 <quorem+0xf4>
 8008918:	4628      	mov	r0, r5
 800891a:	f04f 0c00 	mov.w	ip, #0
 800891e:	3601      	adds	r6, #1
 8008920:	f858 1b04 	ldr.w	r1, [r8], #4
 8008924:	f8d0 e000 	ldr.w	lr, [r0]
 8008928:	b28b      	uxth	r3, r1
 800892a:	ebac 0303 	sub.w	r3, ip, r3
 800892e:	fa1f f28e 	uxth.w	r2, lr
 8008932:	4413      	add	r3, r2
 8008934:	0c0a      	lsrs	r2, r1, #16
 8008936:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800893a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800893e:	b29b      	uxth	r3, r3
 8008940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008944:	45c1      	cmp	r9, r8
 8008946:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800894a:	f840 3b04 	str.w	r3, [r0], #4
 800894e:	d2e7      	bcs.n	8008920 <quorem+0xb0>
 8008950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008954:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008958:	b922      	cbnz	r2, 8008964 <quorem+0xf4>
 800895a:	3b04      	subs	r3, #4
 800895c:	429d      	cmp	r5, r3
 800895e:	461a      	mov	r2, r3
 8008960:	d30a      	bcc.n	8008978 <quorem+0x108>
 8008962:	613c      	str	r4, [r7, #16]
 8008964:	4630      	mov	r0, r6
 8008966:	b003      	add	sp, #12
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	3b04      	subs	r3, #4
 8008970:	2a00      	cmp	r2, #0
 8008972:	d1cb      	bne.n	800890c <quorem+0x9c>
 8008974:	3c01      	subs	r4, #1
 8008976:	e7c6      	b.n	8008906 <quorem+0x96>
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	3b04      	subs	r3, #4
 800897c:	2a00      	cmp	r2, #0
 800897e:	d1f0      	bne.n	8008962 <quorem+0xf2>
 8008980:	3c01      	subs	r4, #1
 8008982:	e7eb      	b.n	800895c <quorem+0xec>
 8008984:	2000      	movs	r0, #0
 8008986:	e7ee      	b.n	8008966 <quorem+0xf6>

08008988 <_dtoa_r>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	4616      	mov	r6, r2
 800898e:	461f      	mov	r7, r3
 8008990:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008992:	b099      	sub	sp, #100	; 0x64
 8008994:	4605      	mov	r5, r0
 8008996:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800899a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800899e:	b974      	cbnz	r4, 80089be <_dtoa_r+0x36>
 80089a0:	2010      	movs	r0, #16
 80089a2:	f000 fde3 	bl	800956c <malloc>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6268      	str	r0, [r5, #36]	; 0x24
 80089aa:	b920      	cbnz	r0, 80089b6 <_dtoa_r+0x2e>
 80089ac:	21ea      	movs	r1, #234	; 0xea
 80089ae:	4ba8      	ldr	r3, [pc, #672]	; (8008c50 <_dtoa_r+0x2c8>)
 80089b0:	48a8      	ldr	r0, [pc, #672]	; (8008c54 <_dtoa_r+0x2cc>)
 80089b2:	f001 fa81 	bl	8009eb8 <__assert_func>
 80089b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089ba:	6004      	str	r4, [r0, #0]
 80089bc:	60c4      	str	r4, [r0, #12]
 80089be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089c0:	6819      	ldr	r1, [r3, #0]
 80089c2:	b151      	cbz	r1, 80089da <_dtoa_r+0x52>
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	2301      	movs	r3, #1
 80089c8:	4093      	lsls	r3, r2
 80089ca:	604a      	str	r2, [r1, #4]
 80089cc:	608b      	str	r3, [r1, #8]
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 fe30 	bl	8009634 <_Bfree>
 80089d4:	2200      	movs	r2, #0
 80089d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	1e3b      	subs	r3, r7, #0
 80089dc:	bfaf      	iteee	ge
 80089de:	2300      	movge	r3, #0
 80089e0:	2201      	movlt	r2, #1
 80089e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	9305      	strlt	r3, [sp, #20]
 80089e8:	bfa8      	it	ge
 80089ea:	f8c8 3000 	strge.w	r3, [r8]
 80089ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80089f2:	4b99      	ldr	r3, [pc, #612]	; (8008c58 <_dtoa_r+0x2d0>)
 80089f4:	bfb8      	it	lt
 80089f6:	f8c8 2000 	strlt.w	r2, [r8]
 80089fa:	ea33 0309 	bics.w	r3, r3, r9
 80089fe:	d119      	bne.n	8008a34 <_dtoa_r+0xac>
 8008a00:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a0c:	4333      	orrs	r3, r6
 8008a0e:	f000 857f 	beq.w	8009510 <_dtoa_r+0xb88>
 8008a12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a14:	b953      	cbnz	r3, 8008a2c <_dtoa_r+0xa4>
 8008a16:	4b91      	ldr	r3, [pc, #580]	; (8008c5c <_dtoa_r+0x2d4>)
 8008a18:	e022      	b.n	8008a60 <_dtoa_r+0xd8>
 8008a1a:	4b91      	ldr	r3, [pc, #580]	; (8008c60 <_dtoa_r+0x2d8>)
 8008a1c:	9303      	str	r3, [sp, #12]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	9803      	ldr	r0, [sp, #12]
 8008a26:	b019      	add	sp, #100	; 0x64
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	4b8b      	ldr	r3, [pc, #556]	; (8008c5c <_dtoa_r+0x2d4>)
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	3303      	adds	r3, #3
 8008a32:	e7f5      	b.n	8008a20 <_dtoa_r+0x98>
 8008a34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008a38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a40:	2200      	movs	r2, #0
 8008a42:	2300      	movs	r3, #0
 8008a44:	f7f7 ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8008a48:	4680      	mov	r8, r0
 8008a4a:	b158      	cbz	r0, 8008a64 <_dtoa_r+0xdc>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8558 	beq.w	800950a <_dtoa_r+0xb82>
 8008a5a:	4882      	ldr	r0, [pc, #520]	; (8008c64 <_dtoa_r+0x2dc>)
 8008a5c:	6018      	str	r0, [r3, #0]
 8008a5e:	1e43      	subs	r3, r0, #1
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	e7df      	b.n	8008a24 <_dtoa_r+0x9c>
 8008a64:	ab16      	add	r3, sp, #88	; 0x58
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	ab17      	add	r3, sp, #92	; 0x5c
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a72:	f001 f8c5 	bl	8009c00 <__d2b>
 8008a76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008a7a:	4683      	mov	fp, r0
 8008a7c:	2c00      	cmp	r4, #0
 8008a7e:	d07f      	beq.n	8008b80 <_dtoa_r+0x1f8>
 8008a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008a92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4b72      	ldr	r3, [pc, #456]	; (8008c68 <_dtoa_r+0x2e0>)
 8008a9e:	f7f7 fb63 	bl	8000168 <__aeabi_dsub>
 8008aa2:	a365      	add	r3, pc, #404	; (adr r3, 8008c38 <_dtoa_r+0x2b0>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f7f7 fd16 	bl	80004d8 <__aeabi_dmul>
 8008aac:	a364      	add	r3, pc, #400	; (adr r3, 8008c40 <_dtoa_r+0x2b8>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	f7f7 fb5b 	bl	800016c <__adddf3>
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	4620      	mov	r0, r4
 8008aba:	460f      	mov	r7, r1
 8008abc:	f7f7 fca2 	bl	8000404 <__aeabi_i2d>
 8008ac0:	a361      	add	r3, pc, #388	; (adr r3, 8008c48 <_dtoa_r+0x2c0>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fd07 	bl	80004d8 <__aeabi_dmul>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	f7f7 fb4b 	bl	800016c <__adddf3>
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	f7f7 ffad 	bl	8000a38 <__aeabi_d2iz>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 ff68 	bl	80009bc <__aeabi_dcmplt>
 8008aec:	b148      	cbz	r0, 8008b02 <_dtoa_r+0x17a>
 8008aee:	4650      	mov	r0, sl
 8008af0:	f7f7 fc88 	bl	8000404 <__aeabi_i2d>
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	f7f7 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8008afc:	b908      	cbnz	r0, 8008b02 <_dtoa_r+0x17a>
 8008afe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b02:	f1ba 0f16 	cmp.w	sl, #22
 8008b06:	d858      	bhi.n	8008bba <_dtoa_r+0x232>
 8008b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b0c:	4b57      	ldr	r3, [pc, #348]	; (8008c6c <_dtoa_r+0x2e4>)
 8008b0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 ff51 	bl	80009bc <__aeabi_dcmplt>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d04f      	beq.n	8008bbe <_dtoa_r+0x236>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b24:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b28:	1b1c      	subs	r4, r3, r4
 8008b2a:	1e63      	subs	r3, r4, #1
 8008b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2e:	bf49      	itett	mi
 8008b30:	f1c4 0301 	rsbmi	r3, r4, #1
 8008b34:	2300      	movpl	r3, #0
 8008b36:	9306      	strmi	r3, [sp, #24]
 8008b38:	2300      	movmi	r3, #0
 8008b3a:	bf54      	ite	pl
 8008b3c:	9306      	strpl	r3, [sp, #24]
 8008b3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	db3d      	blt.n	8008bc2 <_dtoa_r+0x23a>
 8008b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008b4c:	4453      	add	r3, sl
 8008b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b50:	2300      	movs	r3, #0
 8008b52:	930a      	str	r3, [sp, #40]	; 0x28
 8008b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	f200 808c 	bhi.w	8008c74 <_dtoa_r+0x2ec>
 8008b5c:	2b05      	cmp	r3, #5
 8008b5e:	bfc4      	itt	gt
 8008b60:	3b04      	subgt	r3, #4
 8008b62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b66:	bfc8      	it	gt
 8008b68:	2400      	movgt	r4, #0
 8008b6a:	f1a3 0302 	sub.w	r3, r3, #2
 8008b6e:	bfd8      	it	le
 8008b70:	2401      	movle	r4, #1
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	f200 808a 	bhi.w	8008c8c <_dtoa_r+0x304>
 8008b78:	e8df f003 	tbb	[pc, r3]
 8008b7c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008b80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008b84:	441c      	add	r4, r3
 8008b86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	bfc3      	ittte	gt
 8008b8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008b96:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b9a:	f1c3 0320 	rsble	r3, r3, #32
 8008b9e:	bfc6      	itte	gt
 8008ba0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ba4:	4318      	orrgt	r0, r3
 8008ba6:	fa06 f003 	lslle.w	r0, r6, r3
 8008baa:	f7f7 fc1b 	bl	80003e4 <__aeabi_ui2d>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008bb4:	3c01      	subs	r4, #1
 8008bb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bb8:	e76f      	b.n	8008a9a <_dtoa_r+0x112>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e7b2      	b.n	8008b24 <_dtoa_r+0x19c>
 8008bbe:	900f      	str	r0, [sp, #60]	; 0x3c
 8008bc0:	e7b1      	b.n	8008b26 <_dtoa_r+0x19e>
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	eba3 030a 	sub.w	r3, r3, sl
 8008bc8:	9306      	str	r3, [sp, #24]
 8008bca:	f1ca 0300 	rsb	r3, sl, #0
 8008bce:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	930e      	str	r3, [sp, #56]	; 0x38
 8008bd4:	e7be      	b.n	8008b54 <_dtoa_r+0x1cc>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dc58      	bgt.n	8008c92 <_dtoa_r+0x30a>
 8008be0:	f04f 0901 	mov.w	r9, #1
 8008be4:	464b      	mov	r3, r9
 8008be6:	f8cd 9020 	str.w	r9, [sp, #32]
 8008bea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008bee:	2200      	movs	r2, #0
 8008bf0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008bf2:	6042      	str	r2, [r0, #4]
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	f102 0614 	add.w	r6, r2, #20
 8008bfa:	429e      	cmp	r6, r3
 8008bfc:	6841      	ldr	r1, [r0, #4]
 8008bfe:	d94e      	bls.n	8008c9e <_dtoa_r+0x316>
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 fcd7 	bl	80095b4 <_Balloc>
 8008c06:	9003      	str	r0, [sp, #12]
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d14c      	bne.n	8008ca6 <_dtoa_r+0x31e>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c12:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <_dtoa_r+0x2e8>)
 8008c14:	e6cc      	b.n	80089b0 <_dtoa_r+0x28>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e7de      	b.n	8008bd8 <_dtoa_r+0x250>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c20:	eb0a 0903 	add.w	r9, sl, r3
 8008c24:	f109 0301 	add.w	r3, r9, #1
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	9308      	str	r3, [sp, #32]
 8008c2c:	bfb8      	it	lt
 8008c2e:	2301      	movlt	r3, #1
 8008c30:	e7dd      	b.n	8008bee <_dtoa_r+0x266>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e7f2      	b.n	8008c1c <_dtoa_r+0x294>
 8008c36:	bf00      	nop
 8008c38:	636f4361 	.word	0x636f4361
 8008c3c:	3fd287a7 	.word	0x3fd287a7
 8008c40:	8b60c8b3 	.word	0x8b60c8b3
 8008c44:	3fc68a28 	.word	0x3fc68a28
 8008c48:	509f79fb 	.word	0x509f79fb
 8008c4c:	3fd34413 	.word	0x3fd34413
 8008c50:	0800aa59 	.word	0x0800aa59
 8008c54:	0800aa70 	.word	0x0800aa70
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	0800aa55 	.word	0x0800aa55
 8008c60:	0800aa4c 	.word	0x0800aa4c
 8008c64:	0800aa29 	.word	0x0800aa29
 8008c68:	3ff80000 	.word	0x3ff80000
 8008c6c:	0800ab60 	.word	0x0800ab60
 8008c70:	0800aacb 	.word	0x0800aacb
 8008c74:	2401      	movs	r4, #1
 8008c76:	2300      	movs	r3, #0
 8008c78:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c7a:	9322      	str	r3, [sp, #136]	; 0x88
 8008c7c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008c80:	2200      	movs	r2, #0
 8008c82:	2312      	movs	r3, #18
 8008c84:	f8cd 9020 	str.w	r9, [sp, #32]
 8008c88:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c8a:	e7b0      	b.n	8008bee <_dtoa_r+0x266>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c90:	e7f4      	b.n	8008c7c <_dtoa_r+0x2f4>
 8008c92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008c96:	464b      	mov	r3, r9
 8008c98:	f8cd 9020 	str.w	r9, [sp, #32]
 8008c9c:	e7a7      	b.n	8008bee <_dtoa_r+0x266>
 8008c9e:	3101      	adds	r1, #1
 8008ca0:	6041      	str	r1, [r0, #4]
 8008ca2:	0052      	lsls	r2, r2, #1
 8008ca4:	e7a7      	b.n	8008bf6 <_dtoa_r+0x26e>
 8008ca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ca8:	9a03      	ldr	r2, [sp, #12]
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	9b08      	ldr	r3, [sp, #32]
 8008cae:	2b0e      	cmp	r3, #14
 8008cb0:	f200 80a8 	bhi.w	8008e04 <_dtoa_r+0x47c>
 8008cb4:	2c00      	cmp	r4, #0
 8008cb6:	f000 80a5 	beq.w	8008e04 <_dtoa_r+0x47c>
 8008cba:	f1ba 0f00 	cmp.w	sl, #0
 8008cbe:	dd34      	ble.n	8008d2a <_dtoa_r+0x3a2>
 8008cc0:	4a9a      	ldr	r2, [pc, #616]	; (8008f2c <_dtoa_r+0x5a4>)
 8008cc2:	f00a 030f 	and.w	r3, sl, #15
 8008cc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008cce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008cd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008cda:	d016      	beq.n	8008d0a <_dtoa_r+0x382>
 8008cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ce0:	4b93      	ldr	r3, [pc, #588]	; (8008f30 <_dtoa_r+0x5a8>)
 8008ce2:	2703      	movs	r7, #3
 8008ce4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ce8:	f7f7 fd20 	bl	800072c <__aeabi_ddiv>
 8008cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cf0:	f004 040f 	and.w	r4, r4, #15
 8008cf4:	4e8e      	ldr	r6, [pc, #568]	; (8008f30 <_dtoa_r+0x5a8>)
 8008cf6:	b954      	cbnz	r4, 8008d0e <_dtoa_r+0x386>
 8008cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d00:	f7f7 fd14 	bl	800072c <__aeabi_ddiv>
 8008d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d08:	e029      	b.n	8008d5e <_dtoa_r+0x3d6>
 8008d0a:	2702      	movs	r7, #2
 8008d0c:	e7f2      	b.n	8008cf4 <_dtoa_r+0x36c>
 8008d0e:	07e1      	lsls	r1, r4, #31
 8008d10:	d508      	bpl.n	8008d24 <_dtoa_r+0x39c>
 8008d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d1a:	f7f7 fbdd 	bl	80004d8 <__aeabi_dmul>
 8008d1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d22:	3701      	adds	r7, #1
 8008d24:	1064      	asrs	r4, r4, #1
 8008d26:	3608      	adds	r6, #8
 8008d28:	e7e5      	b.n	8008cf6 <_dtoa_r+0x36e>
 8008d2a:	f000 80a5 	beq.w	8008e78 <_dtoa_r+0x4f0>
 8008d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d32:	f1ca 0400 	rsb	r4, sl, #0
 8008d36:	4b7d      	ldr	r3, [pc, #500]	; (8008f2c <_dtoa_r+0x5a4>)
 8008d38:	f004 020f 	and.w	r2, r4, #15
 8008d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fbc8 	bl	80004d8 <__aeabi_dmul>
 8008d48:	2702      	movs	r7, #2
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d50:	4e77      	ldr	r6, [pc, #476]	; (8008f30 <_dtoa_r+0x5a8>)
 8008d52:	1124      	asrs	r4, r4, #4
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	f040 8084 	bne.w	8008e62 <_dtoa_r+0x4da>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1d2      	bne.n	8008d04 <_dtoa_r+0x37c>
 8008d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 808b 	beq.w	8008e7c <_dtoa_r+0x4f4>
 8008d66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d72:	2200      	movs	r2, #0
 8008d74:	4b6f      	ldr	r3, [pc, #444]	; (8008f34 <_dtoa_r+0x5ac>)
 8008d76:	f7f7 fe21 	bl	80009bc <__aeabi_dcmplt>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d07e      	beq.n	8008e7c <_dtoa_r+0x4f4>
 8008d7e:	9b08      	ldr	r3, [sp, #32]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d07b      	beq.n	8008e7c <_dtoa_r+0x4f4>
 8008d84:	f1b9 0f00 	cmp.w	r9, #0
 8008d88:	dd38      	ble.n	8008dfc <_dtoa_r+0x474>
 8008d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4b69      	ldr	r3, [pc, #420]	; (8008f38 <_dtoa_r+0x5b0>)
 8008d92:	f7f7 fba1 	bl	80004d8 <__aeabi_dmul>
 8008d96:	464c      	mov	r4, r9
 8008d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d9c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008da0:	3701      	adds	r7, #1
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7f7 fb2e 	bl	8000404 <__aeabi_i2d>
 8008da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dac:	f7f7 fb94 	bl	80004d8 <__aeabi_dmul>
 8008db0:	2200      	movs	r2, #0
 8008db2:	4b62      	ldr	r3, [pc, #392]	; (8008f3c <_dtoa_r+0x5b4>)
 8008db4:	f7f7 f9da 	bl	800016c <__adddf3>
 8008db8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008dbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dc0:	9611      	str	r6, [sp, #68]	; 0x44
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	d15d      	bne.n	8008e82 <_dtoa_r+0x4fa>
 8008dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4b5c      	ldr	r3, [pc, #368]	; (8008f40 <_dtoa_r+0x5b8>)
 8008dce:	f7f7 f9cb 	bl	8000168 <__aeabi_dsub>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dda:	4633      	mov	r3, r6
 8008ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dde:	f7f7 fe0b 	bl	80009f8 <__aeabi_dcmpgt>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f040 829c 	bne.w	8009320 <_dtoa_r+0x998>
 8008de8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008df2:	f7f7 fde3 	bl	80009bc <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 8290 	bne.w	800931c <_dtoa_r+0x994>
 8008dfc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008e00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f2c0 8152 	blt.w	80090b0 <_dtoa_r+0x728>
 8008e0c:	f1ba 0f0e 	cmp.w	sl, #14
 8008e10:	f300 814e 	bgt.w	80090b0 <_dtoa_r+0x728>
 8008e14:	4b45      	ldr	r3, [pc, #276]	; (8008f2c <_dtoa_r+0x5a4>)
 8008e16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008e22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f280 80db 	bge.w	8008fe0 <_dtoa_r+0x658>
 8008e2a:	9b08      	ldr	r3, [sp, #32]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f300 80d7 	bgt.w	8008fe0 <_dtoa_r+0x658>
 8008e32:	f040 8272 	bne.w	800931a <_dtoa_r+0x992>
 8008e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4b40      	ldr	r3, [pc, #256]	; (8008f40 <_dtoa_r+0x5b8>)
 8008e3e:	f7f7 fb4b 	bl	80004d8 <__aeabi_dmul>
 8008e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e46:	f7f7 fdcd 	bl	80009e4 <__aeabi_dcmpge>
 8008e4a:	9c08      	ldr	r4, [sp, #32]
 8008e4c:	4626      	mov	r6, r4
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	f040 8248 	bne.w	80092e4 <_dtoa_r+0x95c>
 8008e54:	2331      	movs	r3, #49	; 0x31
 8008e56:	9f03      	ldr	r7, [sp, #12]
 8008e58:	f10a 0a01 	add.w	sl, sl, #1
 8008e5c:	f807 3b01 	strb.w	r3, [r7], #1
 8008e60:	e244      	b.n	80092ec <_dtoa_r+0x964>
 8008e62:	07e2      	lsls	r2, r4, #31
 8008e64:	d505      	bpl.n	8008e72 <_dtoa_r+0x4ea>
 8008e66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e6a:	f7f7 fb35 	bl	80004d8 <__aeabi_dmul>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	3701      	adds	r7, #1
 8008e72:	1064      	asrs	r4, r4, #1
 8008e74:	3608      	adds	r6, #8
 8008e76:	e76d      	b.n	8008d54 <_dtoa_r+0x3cc>
 8008e78:	2702      	movs	r7, #2
 8008e7a:	e770      	b.n	8008d5e <_dtoa_r+0x3d6>
 8008e7c:	46d0      	mov	r8, sl
 8008e7e:	9c08      	ldr	r4, [sp, #32]
 8008e80:	e78f      	b.n	8008da2 <_dtoa_r+0x41a>
 8008e82:	9903      	ldr	r1, [sp, #12]
 8008e84:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <_dtoa_r+0x5a4>)
 8008e86:	4421      	add	r1, r4
 8008e88:	9112      	str	r1, [sp, #72]	; 0x48
 8008e8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e98:	2900      	cmp	r1, #0
 8008e9a:	d055      	beq.n	8008f48 <_dtoa_r+0x5c0>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	4929      	ldr	r1, [pc, #164]	; (8008f44 <_dtoa_r+0x5bc>)
 8008ea0:	f7f7 fc44 	bl	800072c <__aeabi_ddiv>
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	4632      	mov	r2, r6
 8008ea8:	f7f7 f95e 	bl	8000168 <__aeabi_dsub>
 8008eac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008eb0:	9f03      	ldr	r7, [sp, #12]
 8008eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eb6:	f7f7 fdbf 	bl	8000a38 <__aeabi_d2iz>
 8008eba:	4604      	mov	r4, r0
 8008ebc:	f7f7 faa2 	bl	8000404 <__aeabi_i2d>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec8:	f7f7 f94e 	bl	8000168 <__aeabi_dsub>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	3430      	adds	r4, #48	; 0x30
 8008ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ed6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008eda:	f807 4b01 	strb.w	r4, [r7], #1
 8008ede:	f7f7 fd6d 	bl	80009bc <__aeabi_dcmplt>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d174      	bne.n	8008fd0 <_dtoa_r+0x648>
 8008ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eea:	2000      	movs	r0, #0
 8008eec:	4911      	ldr	r1, [pc, #68]	; (8008f34 <_dtoa_r+0x5ac>)
 8008eee:	f7f7 f93b 	bl	8000168 <__aeabi_dsub>
 8008ef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ef6:	f7f7 fd61 	bl	80009bc <__aeabi_dcmplt>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	f040 80b7 	bne.w	800906e <_dtoa_r+0x6e6>
 8008f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f02:	429f      	cmp	r7, r3
 8008f04:	f43f af7a 	beq.w	8008dfc <_dtoa_r+0x474>
 8008f08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <_dtoa_r+0x5b0>)
 8008f10:	f7f7 fae2 	bl	80004d8 <__aeabi_dmul>
 8008f14:	2200      	movs	r2, #0
 8008f16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f1e:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <_dtoa_r+0x5b0>)
 8008f20:	f7f7 fada 	bl	80004d8 <__aeabi_dmul>
 8008f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f28:	e7c3      	b.n	8008eb2 <_dtoa_r+0x52a>
 8008f2a:	bf00      	nop
 8008f2c:	0800ab60 	.word	0x0800ab60
 8008f30:	0800ab38 	.word	0x0800ab38
 8008f34:	3ff00000 	.word	0x3ff00000
 8008f38:	40240000 	.word	0x40240000
 8008f3c:	401c0000 	.word	0x401c0000
 8008f40:	40140000 	.word	0x40140000
 8008f44:	3fe00000 	.word	0x3fe00000
 8008f48:	4630      	mov	r0, r6
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	f7f7 fac4 	bl	80004d8 <__aeabi_dmul>
 8008f50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f56:	9c03      	ldr	r4, [sp, #12]
 8008f58:	9314      	str	r3, [sp, #80]	; 0x50
 8008f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f5e:	f7f7 fd6b 	bl	8000a38 <__aeabi_d2iz>
 8008f62:	9015      	str	r0, [sp, #84]	; 0x54
 8008f64:	f7f7 fa4e 	bl	8000404 <__aeabi_i2d>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f70:	f7f7 f8fa 	bl	8000168 <__aeabi_dsub>
 8008f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f76:	4606      	mov	r6, r0
 8008f78:	3330      	adds	r3, #48	; 0x30
 8008f7a:	f804 3b01 	strb.w	r3, [r4], #1
 8008f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f80:	460f      	mov	r7, r1
 8008f82:	429c      	cmp	r4, r3
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	d124      	bne.n	8008fd4 <_dtoa_r+0x64c>
 8008f8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f8e:	4bb0      	ldr	r3, [pc, #704]	; (8009250 <_dtoa_r+0x8c8>)
 8008f90:	f7f7 f8ec 	bl	800016c <__adddf3>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d163      	bne.n	800906c <_dtoa_r+0x6e4>
 8008fa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fa8:	2000      	movs	r0, #0
 8008faa:	49a9      	ldr	r1, [pc, #676]	; (8009250 <_dtoa_r+0x8c8>)
 8008fac:	f7f7 f8dc 	bl	8000168 <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fd00 	bl	80009bc <__aeabi_dcmplt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f43f af1d 	beq.w	8008dfc <_dtoa_r+0x474>
 8008fc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008fc4:	1e7b      	subs	r3, r7, #1
 8008fc6:	9314      	str	r3, [sp, #80]	; 0x50
 8008fc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008fcc:	2b30      	cmp	r3, #48	; 0x30
 8008fce:	d0f8      	beq.n	8008fc2 <_dtoa_r+0x63a>
 8008fd0:	46c2      	mov	sl, r8
 8008fd2:	e03b      	b.n	800904c <_dtoa_r+0x6c4>
 8008fd4:	4b9f      	ldr	r3, [pc, #636]	; (8009254 <_dtoa_r+0x8cc>)
 8008fd6:	f7f7 fa7f 	bl	80004d8 <__aeabi_dmul>
 8008fda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fde:	e7bc      	b.n	8008f5a <_dtoa_r+0x5d2>
 8008fe0:	9f03      	ldr	r7, [sp, #12]
 8008fe2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fea:	4640      	mov	r0, r8
 8008fec:	4649      	mov	r1, r9
 8008fee:	f7f7 fb9d 	bl	800072c <__aeabi_ddiv>
 8008ff2:	f7f7 fd21 	bl	8000a38 <__aeabi_d2iz>
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	f7f7 fa04 	bl	8000404 <__aeabi_i2d>
 8008ffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009000:	f7f7 fa6a 	bl	80004d8 <__aeabi_dmul>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4640      	mov	r0, r8
 800900a:	4649      	mov	r1, r9
 800900c:	f7f7 f8ac 	bl	8000168 <__aeabi_dsub>
 8009010:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009014:	f807 6b01 	strb.w	r6, [r7], #1
 8009018:	9e03      	ldr	r6, [sp, #12]
 800901a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800901e:	1bbe      	subs	r6, r7, r6
 8009020:	45b4      	cmp	ip, r6
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	d136      	bne.n	8009096 <_dtoa_r+0x70e>
 8009028:	f7f7 f8a0 	bl	800016c <__adddf3>
 800902c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009030:	4680      	mov	r8, r0
 8009032:	4689      	mov	r9, r1
 8009034:	f7f7 fce0 	bl	80009f8 <__aeabi_dcmpgt>
 8009038:	bb58      	cbnz	r0, 8009092 <_dtoa_r+0x70a>
 800903a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 fcb1 	bl	80009a8 <__aeabi_dcmpeq>
 8009046:	b108      	cbz	r0, 800904c <_dtoa_r+0x6c4>
 8009048:	07e1      	lsls	r1, r4, #31
 800904a:	d422      	bmi.n	8009092 <_dtoa_r+0x70a>
 800904c:	4628      	mov	r0, r5
 800904e:	4659      	mov	r1, fp
 8009050:	f000 faf0 	bl	8009634 <_Bfree>
 8009054:	2300      	movs	r3, #0
 8009056:	703b      	strb	r3, [r7, #0]
 8009058:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800905a:	f10a 0001 	add.w	r0, sl, #1
 800905e:	6018      	str	r0, [r3, #0]
 8009060:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009062:	2b00      	cmp	r3, #0
 8009064:	f43f acde 	beq.w	8008a24 <_dtoa_r+0x9c>
 8009068:	601f      	str	r7, [r3, #0]
 800906a:	e4db      	b.n	8008a24 <_dtoa_r+0x9c>
 800906c:	4627      	mov	r7, r4
 800906e:	463b      	mov	r3, r7
 8009070:	461f      	mov	r7, r3
 8009072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009076:	2a39      	cmp	r2, #57	; 0x39
 8009078:	d107      	bne.n	800908a <_dtoa_r+0x702>
 800907a:	9a03      	ldr	r2, [sp, #12]
 800907c:	429a      	cmp	r2, r3
 800907e:	d1f7      	bne.n	8009070 <_dtoa_r+0x6e8>
 8009080:	2230      	movs	r2, #48	; 0x30
 8009082:	9903      	ldr	r1, [sp, #12]
 8009084:	f108 0801 	add.w	r8, r8, #1
 8009088:	700a      	strb	r2, [r1, #0]
 800908a:	781a      	ldrb	r2, [r3, #0]
 800908c:	3201      	adds	r2, #1
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	e79e      	b.n	8008fd0 <_dtoa_r+0x648>
 8009092:	46d0      	mov	r8, sl
 8009094:	e7eb      	b.n	800906e <_dtoa_r+0x6e6>
 8009096:	2200      	movs	r2, #0
 8009098:	4b6e      	ldr	r3, [pc, #440]	; (8009254 <_dtoa_r+0x8cc>)
 800909a:	f7f7 fa1d 	bl	80004d8 <__aeabi_dmul>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4680      	mov	r8, r0
 80090a4:	4689      	mov	r9, r1
 80090a6:	f7f7 fc7f 	bl	80009a8 <__aeabi_dcmpeq>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d09b      	beq.n	8008fe6 <_dtoa_r+0x65e>
 80090ae:	e7cd      	b.n	800904c <_dtoa_r+0x6c4>
 80090b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	f000 80d0 	beq.w	8009258 <_dtoa_r+0x8d0>
 80090b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80090ba:	2a01      	cmp	r2, #1
 80090bc:	f300 80ae 	bgt.w	800921c <_dtoa_r+0x894>
 80090c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	f000 80a6 	beq.w	8009214 <_dtoa_r+0x88c>
 80090c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090ce:	9f06      	ldr	r7, [sp, #24]
 80090d0:	9a06      	ldr	r2, [sp, #24]
 80090d2:	2101      	movs	r1, #1
 80090d4:	441a      	add	r2, r3
 80090d6:	9206      	str	r2, [sp, #24]
 80090d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090da:	4628      	mov	r0, r5
 80090dc:	441a      	add	r2, r3
 80090de:	9209      	str	r2, [sp, #36]	; 0x24
 80090e0:	f000 fb5e 	bl	80097a0 <__i2b>
 80090e4:	4606      	mov	r6, r0
 80090e6:	2f00      	cmp	r7, #0
 80090e8:	dd0c      	ble.n	8009104 <_dtoa_r+0x77c>
 80090ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dd09      	ble.n	8009104 <_dtoa_r+0x77c>
 80090f0:	42bb      	cmp	r3, r7
 80090f2:	bfa8      	it	ge
 80090f4:	463b      	movge	r3, r7
 80090f6:	9a06      	ldr	r2, [sp, #24]
 80090f8:	1aff      	subs	r7, r7, r3
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	9206      	str	r2, [sp, #24]
 80090fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	9309      	str	r3, [sp, #36]	; 0x24
 8009104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009106:	b1f3      	cbz	r3, 8009146 <_dtoa_r+0x7be>
 8009108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 80a8 	beq.w	8009260 <_dtoa_r+0x8d8>
 8009110:	2c00      	cmp	r4, #0
 8009112:	dd10      	ble.n	8009136 <_dtoa_r+0x7ae>
 8009114:	4631      	mov	r1, r6
 8009116:	4622      	mov	r2, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f000 fbff 	bl	800991c <__pow5mult>
 800911e:	465a      	mov	r2, fp
 8009120:	4601      	mov	r1, r0
 8009122:	4606      	mov	r6, r0
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fb51 	bl	80097cc <__multiply>
 800912a:	4680      	mov	r8, r0
 800912c:	4659      	mov	r1, fp
 800912e:	4628      	mov	r0, r5
 8009130:	f000 fa80 	bl	8009634 <_Bfree>
 8009134:	46c3      	mov	fp, r8
 8009136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009138:	1b1a      	subs	r2, r3, r4
 800913a:	d004      	beq.n	8009146 <_dtoa_r+0x7be>
 800913c:	4659      	mov	r1, fp
 800913e:	4628      	mov	r0, r5
 8009140:	f000 fbec 	bl	800991c <__pow5mult>
 8009144:	4683      	mov	fp, r0
 8009146:	2101      	movs	r1, #1
 8009148:	4628      	mov	r0, r5
 800914a:	f000 fb29 	bl	80097a0 <__i2b>
 800914e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009150:	4604      	mov	r4, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	f340 8086 	ble.w	8009264 <_dtoa_r+0x8dc>
 8009158:	461a      	mov	r2, r3
 800915a:	4601      	mov	r1, r0
 800915c:	4628      	mov	r0, r5
 800915e:	f000 fbdd 	bl	800991c <__pow5mult>
 8009162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009164:	4604      	mov	r4, r0
 8009166:	2b01      	cmp	r3, #1
 8009168:	dd7f      	ble.n	800926a <_dtoa_r+0x8e2>
 800916a:	f04f 0800 	mov.w	r8, #0
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009174:	6918      	ldr	r0, [r3, #16]
 8009176:	f000 fac5 	bl	8009704 <__hi0bits>
 800917a:	f1c0 0020 	rsb	r0, r0, #32
 800917e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009180:	4418      	add	r0, r3
 8009182:	f010 001f 	ands.w	r0, r0, #31
 8009186:	f000 8092 	beq.w	80092ae <_dtoa_r+0x926>
 800918a:	f1c0 0320 	rsb	r3, r0, #32
 800918e:	2b04      	cmp	r3, #4
 8009190:	f340 808a 	ble.w	80092a8 <_dtoa_r+0x920>
 8009194:	f1c0 001c 	rsb	r0, r0, #28
 8009198:	9b06      	ldr	r3, [sp, #24]
 800919a:	4407      	add	r7, r0
 800919c:	4403      	add	r3, r0
 800919e:	9306      	str	r3, [sp, #24]
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	4403      	add	r3, r0
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	9b06      	ldr	r3, [sp, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dd05      	ble.n	80091b8 <_dtoa_r+0x830>
 80091ac:	4659      	mov	r1, fp
 80091ae:	461a      	mov	r2, r3
 80091b0:	4628      	mov	r0, r5
 80091b2:	f000 fc0d 	bl	80099d0 <__lshift>
 80091b6:	4683      	mov	fp, r0
 80091b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd05      	ble.n	80091ca <_dtoa_r+0x842>
 80091be:	4621      	mov	r1, r4
 80091c0:	461a      	mov	r2, r3
 80091c2:	4628      	mov	r0, r5
 80091c4:	f000 fc04 	bl	80099d0 <__lshift>
 80091c8:	4604      	mov	r4, r0
 80091ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d070      	beq.n	80092b2 <_dtoa_r+0x92a>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4658      	mov	r0, fp
 80091d4:	f000 fc6c 	bl	8009ab0 <__mcmp>
 80091d8:	2800      	cmp	r0, #0
 80091da:	da6a      	bge.n	80092b2 <_dtoa_r+0x92a>
 80091dc:	2300      	movs	r3, #0
 80091de:	4659      	mov	r1, fp
 80091e0:	220a      	movs	r2, #10
 80091e2:	4628      	mov	r0, r5
 80091e4:	f000 fa48 	bl	8009678 <__multadd>
 80091e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ea:	4683      	mov	fp, r0
 80091ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 8194 	beq.w	800951e <_dtoa_r+0xb96>
 80091f6:	4631      	mov	r1, r6
 80091f8:	2300      	movs	r3, #0
 80091fa:	220a      	movs	r2, #10
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 fa3b 	bl	8009678 <__multadd>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	4606      	mov	r6, r0
 8009208:	f300 8093 	bgt.w	8009332 <_dtoa_r+0x9aa>
 800920c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800920e:	2b02      	cmp	r3, #2
 8009210:	dc57      	bgt.n	80092c2 <_dtoa_r+0x93a>
 8009212:	e08e      	b.n	8009332 <_dtoa_r+0x9aa>
 8009214:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800921a:	e757      	b.n	80090cc <_dtoa_r+0x744>
 800921c:	9b08      	ldr	r3, [sp, #32]
 800921e:	1e5c      	subs	r4, r3, #1
 8009220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009222:	42a3      	cmp	r3, r4
 8009224:	bfb7      	itett	lt
 8009226:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009228:	1b1c      	subge	r4, r3, r4
 800922a:	1ae2      	sublt	r2, r4, r3
 800922c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800922e:	bfbe      	ittt	lt
 8009230:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009232:	189b      	addlt	r3, r3, r2
 8009234:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009236:	9b08      	ldr	r3, [sp, #32]
 8009238:	bfb8      	it	lt
 800923a:	2400      	movlt	r4, #0
 800923c:	2b00      	cmp	r3, #0
 800923e:	bfbb      	ittet	lt
 8009240:	9b06      	ldrlt	r3, [sp, #24]
 8009242:	9a08      	ldrlt	r2, [sp, #32]
 8009244:	9f06      	ldrge	r7, [sp, #24]
 8009246:	1a9f      	sublt	r7, r3, r2
 8009248:	bfac      	ite	ge
 800924a:	9b08      	ldrge	r3, [sp, #32]
 800924c:	2300      	movlt	r3, #0
 800924e:	e73f      	b.n	80090d0 <_dtoa_r+0x748>
 8009250:	3fe00000 	.word	0x3fe00000
 8009254:	40240000 	.word	0x40240000
 8009258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800925a:	9f06      	ldr	r7, [sp, #24]
 800925c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800925e:	e742      	b.n	80090e6 <_dtoa_r+0x75e>
 8009260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009262:	e76b      	b.n	800913c <_dtoa_r+0x7b4>
 8009264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009266:	2b01      	cmp	r3, #1
 8009268:	dc19      	bgt.n	800929e <_dtoa_r+0x916>
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	b9bb      	cbnz	r3, 800929e <_dtoa_r+0x916>
 800926e:	9b05      	ldr	r3, [sp, #20]
 8009270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009274:	b99b      	cbnz	r3, 800929e <_dtoa_r+0x916>
 8009276:	9b05      	ldr	r3, [sp, #20]
 8009278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800927c:	0d1b      	lsrs	r3, r3, #20
 800927e:	051b      	lsls	r3, r3, #20
 8009280:	b183      	cbz	r3, 80092a4 <_dtoa_r+0x91c>
 8009282:	f04f 0801 	mov.w	r8, #1
 8009286:	9b06      	ldr	r3, [sp, #24]
 8009288:	3301      	adds	r3, #1
 800928a:	9306      	str	r3, [sp, #24]
 800928c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928e:	3301      	adds	r3, #1
 8009290:	9309      	str	r3, [sp, #36]	; 0x24
 8009292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009294:	2b00      	cmp	r3, #0
 8009296:	f47f af6a 	bne.w	800916e <_dtoa_r+0x7e6>
 800929a:	2001      	movs	r0, #1
 800929c:	e76f      	b.n	800917e <_dtoa_r+0x7f6>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	e7f6      	b.n	8009292 <_dtoa_r+0x90a>
 80092a4:	4698      	mov	r8, r3
 80092a6:	e7f4      	b.n	8009292 <_dtoa_r+0x90a>
 80092a8:	f43f af7d 	beq.w	80091a6 <_dtoa_r+0x81e>
 80092ac:	4618      	mov	r0, r3
 80092ae:	301c      	adds	r0, #28
 80092b0:	e772      	b.n	8009198 <_dtoa_r+0x810>
 80092b2:	9b08      	ldr	r3, [sp, #32]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dc36      	bgt.n	8009326 <_dtoa_r+0x99e>
 80092b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	dd33      	ble.n	8009326 <_dtoa_r+0x99e>
 80092be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092c2:	f1b9 0f00 	cmp.w	r9, #0
 80092c6:	d10d      	bne.n	80092e4 <_dtoa_r+0x95c>
 80092c8:	4621      	mov	r1, r4
 80092ca:	464b      	mov	r3, r9
 80092cc:	2205      	movs	r2, #5
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 f9d2 	bl	8009678 <__multadd>
 80092d4:	4601      	mov	r1, r0
 80092d6:	4604      	mov	r4, r0
 80092d8:	4658      	mov	r0, fp
 80092da:	f000 fbe9 	bl	8009ab0 <__mcmp>
 80092de:	2800      	cmp	r0, #0
 80092e0:	f73f adb8 	bgt.w	8008e54 <_dtoa_r+0x4cc>
 80092e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092e6:	9f03      	ldr	r7, [sp, #12]
 80092e8:	ea6f 0a03 	mvn.w	sl, r3
 80092ec:	f04f 0800 	mov.w	r8, #0
 80092f0:	4621      	mov	r1, r4
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 f99e 	bl	8009634 <_Bfree>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	f43f aea7 	beq.w	800904c <_dtoa_r+0x6c4>
 80092fe:	f1b8 0f00 	cmp.w	r8, #0
 8009302:	d005      	beq.n	8009310 <_dtoa_r+0x988>
 8009304:	45b0      	cmp	r8, r6
 8009306:	d003      	beq.n	8009310 <_dtoa_r+0x988>
 8009308:	4641      	mov	r1, r8
 800930a:	4628      	mov	r0, r5
 800930c:	f000 f992 	bl	8009634 <_Bfree>
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	f000 f98e 	bl	8009634 <_Bfree>
 8009318:	e698      	b.n	800904c <_dtoa_r+0x6c4>
 800931a:	2400      	movs	r4, #0
 800931c:	4626      	mov	r6, r4
 800931e:	e7e1      	b.n	80092e4 <_dtoa_r+0x95c>
 8009320:	46c2      	mov	sl, r8
 8009322:	4626      	mov	r6, r4
 8009324:	e596      	b.n	8008e54 <_dtoa_r+0x4cc>
 8009326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80fd 	beq.w	800952c <_dtoa_r+0xba4>
 8009332:	2f00      	cmp	r7, #0
 8009334:	dd05      	ble.n	8009342 <_dtoa_r+0x9ba>
 8009336:	4631      	mov	r1, r6
 8009338:	463a      	mov	r2, r7
 800933a:	4628      	mov	r0, r5
 800933c:	f000 fb48 	bl	80099d0 <__lshift>
 8009340:	4606      	mov	r6, r0
 8009342:	f1b8 0f00 	cmp.w	r8, #0
 8009346:	d05c      	beq.n	8009402 <_dtoa_r+0xa7a>
 8009348:	4628      	mov	r0, r5
 800934a:	6871      	ldr	r1, [r6, #4]
 800934c:	f000 f932 	bl	80095b4 <_Balloc>
 8009350:	4607      	mov	r7, r0
 8009352:	b928      	cbnz	r0, 8009360 <_dtoa_r+0x9d8>
 8009354:	4602      	mov	r2, r0
 8009356:	f240 21ea 	movw	r1, #746	; 0x2ea
 800935a:	4b7f      	ldr	r3, [pc, #508]	; (8009558 <_dtoa_r+0xbd0>)
 800935c:	f7ff bb28 	b.w	80089b0 <_dtoa_r+0x28>
 8009360:	6932      	ldr	r2, [r6, #16]
 8009362:	f106 010c 	add.w	r1, r6, #12
 8009366:	3202      	adds	r2, #2
 8009368:	0092      	lsls	r2, r2, #2
 800936a:	300c      	adds	r0, #12
 800936c:	f000 f914 	bl	8009598 <memcpy>
 8009370:	2201      	movs	r2, #1
 8009372:	4639      	mov	r1, r7
 8009374:	4628      	mov	r0, r5
 8009376:	f000 fb2b 	bl	80099d0 <__lshift>
 800937a:	46b0      	mov	r8, r6
 800937c:	4606      	mov	r6, r0
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	9308      	str	r3, [sp, #32]
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	444b      	add	r3, r9
 8009388:	930a      	str	r3, [sp, #40]	; 0x28
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	9309      	str	r3, [sp, #36]	; 0x24
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	4621      	mov	r1, r4
 8009396:	3b01      	subs	r3, #1
 8009398:	4658      	mov	r0, fp
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	f7ff fa68 	bl	8008870 <quorem>
 80093a0:	4603      	mov	r3, r0
 80093a2:	4641      	mov	r1, r8
 80093a4:	3330      	adds	r3, #48	; 0x30
 80093a6:	9006      	str	r0, [sp, #24]
 80093a8:	4658      	mov	r0, fp
 80093aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ac:	f000 fb80 	bl	8009ab0 <__mcmp>
 80093b0:	4632      	mov	r2, r6
 80093b2:	4681      	mov	r9, r0
 80093b4:	4621      	mov	r1, r4
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 fb96 	bl	8009ae8 <__mdiff>
 80093bc:	68c2      	ldr	r2, [r0, #12]
 80093be:	4607      	mov	r7, r0
 80093c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c2:	bb02      	cbnz	r2, 8009406 <_dtoa_r+0xa7e>
 80093c4:	4601      	mov	r1, r0
 80093c6:	4658      	mov	r0, fp
 80093c8:	f000 fb72 	bl	8009ab0 <__mcmp>
 80093cc:	4602      	mov	r2, r0
 80093ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d0:	4639      	mov	r1, r7
 80093d2:	4628      	mov	r0, r5
 80093d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80093d8:	f000 f92c 	bl	8009634 <_Bfree>
 80093dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093e0:	9f08      	ldr	r7, [sp, #32]
 80093e2:	ea43 0102 	orr.w	r1, r3, r2
 80093e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e8:	430b      	orrs	r3, r1
 80093ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ec:	d10d      	bne.n	800940a <_dtoa_r+0xa82>
 80093ee:	2b39      	cmp	r3, #57	; 0x39
 80093f0:	d029      	beq.n	8009446 <_dtoa_r+0xabe>
 80093f2:	f1b9 0f00 	cmp.w	r9, #0
 80093f6:	dd01      	ble.n	80093fc <_dtoa_r+0xa74>
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	3331      	adds	r3, #49	; 0x31
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	7013      	strb	r3, [r2, #0]
 8009400:	e776      	b.n	80092f0 <_dtoa_r+0x968>
 8009402:	4630      	mov	r0, r6
 8009404:	e7b9      	b.n	800937a <_dtoa_r+0x9f2>
 8009406:	2201      	movs	r2, #1
 8009408:	e7e2      	b.n	80093d0 <_dtoa_r+0xa48>
 800940a:	f1b9 0f00 	cmp.w	r9, #0
 800940e:	db06      	blt.n	800941e <_dtoa_r+0xa96>
 8009410:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009412:	ea41 0909 	orr.w	r9, r1, r9
 8009416:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009418:	ea59 0101 	orrs.w	r1, r9, r1
 800941c:	d120      	bne.n	8009460 <_dtoa_r+0xad8>
 800941e:	2a00      	cmp	r2, #0
 8009420:	ddec      	ble.n	80093fc <_dtoa_r+0xa74>
 8009422:	4659      	mov	r1, fp
 8009424:	2201      	movs	r2, #1
 8009426:	4628      	mov	r0, r5
 8009428:	9308      	str	r3, [sp, #32]
 800942a:	f000 fad1 	bl	80099d0 <__lshift>
 800942e:	4621      	mov	r1, r4
 8009430:	4683      	mov	fp, r0
 8009432:	f000 fb3d 	bl	8009ab0 <__mcmp>
 8009436:	2800      	cmp	r0, #0
 8009438:	9b08      	ldr	r3, [sp, #32]
 800943a:	dc02      	bgt.n	8009442 <_dtoa_r+0xaba>
 800943c:	d1de      	bne.n	80093fc <_dtoa_r+0xa74>
 800943e:	07da      	lsls	r2, r3, #31
 8009440:	d5dc      	bpl.n	80093fc <_dtoa_r+0xa74>
 8009442:	2b39      	cmp	r3, #57	; 0x39
 8009444:	d1d8      	bne.n	80093f8 <_dtoa_r+0xa70>
 8009446:	2339      	movs	r3, #57	; 0x39
 8009448:	9a04      	ldr	r2, [sp, #16]
 800944a:	7013      	strb	r3, [r2, #0]
 800944c:	463b      	mov	r3, r7
 800944e:	461f      	mov	r7, r3
 8009450:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009454:	3b01      	subs	r3, #1
 8009456:	2a39      	cmp	r2, #57	; 0x39
 8009458:	d050      	beq.n	80094fc <_dtoa_r+0xb74>
 800945a:	3201      	adds	r2, #1
 800945c:	701a      	strb	r2, [r3, #0]
 800945e:	e747      	b.n	80092f0 <_dtoa_r+0x968>
 8009460:	2a00      	cmp	r2, #0
 8009462:	dd03      	ble.n	800946c <_dtoa_r+0xae4>
 8009464:	2b39      	cmp	r3, #57	; 0x39
 8009466:	d0ee      	beq.n	8009446 <_dtoa_r+0xabe>
 8009468:	3301      	adds	r3, #1
 800946a:	e7c7      	b.n	80093fc <_dtoa_r+0xa74>
 800946c:	9a08      	ldr	r2, [sp, #32]
 800946e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009470:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009474:	428a      	cmp	r2, r1
 8009476:	d02a      	beq.n	80094ce <_dtoa_r+0xb46>
 8009478:	4659      	mov	r1, fp
 800947a:	2300      	movs	r3, #0
 800947c:	220a      	movs	r2, #10
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f8fa 	bl	8009678 <__multadd>
 8009484:	45b0      	cmp	r8, r6
 8009486:	4683      	mov	fp, r0
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	f04f 020a 	mov.w	r2, #10
 8009490:	4641      	mov	r1, r8
 8009492:	4628      	mov	r0, r5
 8009494:	d107      	bne.n	80094a6 <_dtoa_r+0xb1e>
 8009496:	f000 f8ef 	bl	8009678 <__multadd>
 800949a:	4680      	mov	r8, r0
 800949c:	4606      	mov	r6, r0
 800949e:	9b08      	ldr	r3, [sp, #32]
 80094a0:	3301      	adds	r3, #1
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	e775      	b.n	8009392 <_dtoa_r+0xa0a>
 80094a6:	f000 f8e7 	bl	8009678 <__multadd>
 80094aa:	4631      	mov	r1, r6
 80094ac:	4680      	mov	r8, r0
 80094ae:	2300      	movs	r3, #0
 80094b0:	220a      	movs	r2, #10
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f8e0 	bl	8009678 <__multadd>
 80094b8:	4606      	mov	r6, r0
 80094ba:	e7f0      	b.n	800949e <_dtoa_r+0xb16>
 80094bc:	f1b9 0f00 	cmp.w	r9, #0
 80094c0:	bfcc      	ite	gt
 80094c2:	464f      	movgt	r7, r9
 80094c4:	2701      	movle	r7, #1
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	9a03      	ldr	r2, [sp, #12]
 80094cc:	4417      	add	r7, r2
 80094ce:	4659      	mov	r1, fp
 80094d0:	2201      	movs	r2, #1
 80094d2:	4628      	mov	r0, r5
 80094d4:	9308      	str	r3, [sp, #32]
 80094d6:	f000 fa7b 	bl	80099d0 <__lshift>
 80094da:	4621      	mov	r1, r4
 80094dc:	4683      	mov	fp, r0
 80094de:	f000 fae7 	bl	8009ab0 <__mcmp>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	dcb2      	bgt.n	800944c <_dtoa_r+0xac4>
 80094e6:	d102      	bne.n	80094ee <_dtoa_r+0xb66>
 80094e8:	9b08      	ldr	r3, [sp, #32]
 80094ea:	07db      	lsls	r3, r3, #31
 80094ec:	d4ae      	bmi.n	800944c <_dtoa_r+0xac4>
 80094ee:	463b      	mov	r3, r7
 80094f0:	461f      	mov	r7, r3
 80094f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094f6:	2a30      	cmp	r2, #48	; 0x30
 80094f8:	d0fa      	beq.n	80094f0 <_dtoa_r+0xb68>
 80094fa:	e6f9      	b.n	80092f0 <_dtoa_r+0x968>
 80094fc:	9a03      	ldr	r2, [sp, #12]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d1a5      	bne.n	800944e <_dtoa_r+0xac6>
 8009502:	2331      	movs	r3, #49	; 0x31
 8009504:	f10a 0a01 	add.w	sl, sl, #1
 8009508:	e779      	b.n	80093fe <_dtoa_r+0xa76>
 800950a:	4b14      	ldr	r3, [pc, #80]	; (800955c <_dtoa_r+0xbd4>)
 800950c:	f7ff baa8 	b.w	8008a60 <_dtoa_r+0xd8>
 8009510:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009512:	2b00      	cmp	r3, #0
 8009514:	f47f aa81 	bne.w	8008a1a <_dtoa_r+0x92>
 8009518:	4b11      	ldr	r3, [pc, #68]	; (8009560 <_dtoa_r+0xbd8>)
 800951a:	f7ff baa1 	b.w	8008a60 <_dtoa_r+0xd8>
 800951e:	f1b9 0f00 	cmp.w	r9, #0
 8009522:	dc03      	bgt.n	800952c <_dtoa_r+0xba4>
 8009524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009526:	2b02      	cmp	r3, #2
 8009528:	f73f aecb 	bgt.w	80092c2 <_dtoa_r+0x93a>
 800952c:	9f03      	ldr	r7, [sp, #12]
 800952e:	4621      	mov	r1, r4
 8009530:	4658      	mov	r0, fp
 8009532:	f7ff f99d 	bl	8008870 <quorem>
 8009536:	9a03      	ldr	r2, [sp, #12]
 8009538:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800953c:	f807 3b01 	strb.w	r3, [r7], #1
 8009540:	1aba      	subs	r2, r7, r2
 8009542:	4591      	cmp	r9, r2
 8009544:	ddba      	ble.n	80094bc <_dtoa_r+0xb34>
 8009546:	4659      	mov	r1, fp
 8009548:	2300      	movs	r3, #0
 800954a:	220a      	movs	r2, #10
 800954c:	4628      	mov	r0, r5
 800954e:	f000 f893 	bl	8009678 <__multadd>
 8009552:	4683      	mov	fp, r0
 8009554:	e7eb      	b.n	800952e <_dtoa_r+0xba6>
 8009556:	bf00      	nop
 8009558:	0800aacb 	.word	0x0800aacb
 800955c:	0800aa28 	.word	0x0800aa28
 8009560:	0800aa4c 	.word	0x0800aa4c

08009564 <_localeconv_r>:
 8009564:	4800      	ldr	r0, [pc, #0]	; (8009568 <_localeconv_r+0x4>)
 8009566:	4770      	bx	lr
 8009568:	2000020c 	.word	0x2000020c

0800956c <malloc>:
 800956c:	4b02      	ldr	r3, [pc, #8]	; (8009578 <malloc+0xc>)
 800956e:	4601      	mov	r1, r0
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f000 bc1d 	b.w	8009db0 <_malloc_r>
 8009576:	bf00      	nop
 8009578:	200000b8 	.word	0x200000b8

0800957c <memchr>:
 800957c:	4603      	mov	r3, r0
 800957e:	b510      	push	{r4, lr}
 8009580:	b2c9      	uxtb	r1, r1
 8009582:	4402      	add	r2, r0
 8009584:	4293      	cmp	r3, r2
 8009586:	4618      	mov	r0, r3
 8009588:	d101      	bne.n	800958e <memchr+0x12>
 800958a:	2000      	movs	r0, #0
 800958c:	e003      	b.n	8009596 <memchr+0x1a>
 800958e:	7804      	ldrb	r4, [r0, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	428c      	cmp	r4, r1
 8009594:	d1f6      	bne.n	8009584 <memchr+0x8>
 8009596:	bd10      	pop	{r4, pc}

08009598 <memcpy>:
 8009598:	440a      	add	r2, r1
 800959a:	4291      	cmp	r1, r2
 800959c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095a0:	d100      	bne.n	80095a4 <memcpy+0xc>
 80095a2:	4770      	bx	lr
 80095a4:	b510      	push	{r4, lr}
 80095a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095aa:	4291      	cmp	r1, r2
 80095ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b0:	d1f9      	bne.n	80095a6 <memcpy+0xe>
 80095b2:	bd10      	pop	{r4, pc}

080095b4 <_Balloc>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095b8:	4604      	mov	r4, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	b976      	cbnz	r6, 80095dc <_Balloc+0x28>
 80095be:	2010      	movs	r0, #16
 80095c0:	f7ff ffd4 	bl	800956c <malloc>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6260      	str	r0, [r4, #36]	; 0x24
 80095c8:	b920      	cbnz	r0, 80095d4 <_Balloc+0x20>
 80095ca:	2166      	movs	r1, #102	; 0x66
 80095cc:	4b17      	ldr	r3, [pc, #92]	; (800962c <_Balloc+0x78>)
 80095ce:	4818      	ldr	r0, [pc, #96]	; (8009630 <_Balloc+0x7c>)
 80095d0:	f000 fc72 	bl	8009eb8 <__assert_func>
 80095d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095d8:	6006      	str	r6, [r0, #0]
 80095da:	60c6      	str	r6, [r0, #12]
 80095dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095de:	68f3      	ldr	r3, [r6, #12]
 80095e0:	b183      	cbz	r3, 8009604 <_Balloc+0x50>
 80095e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ea:	b9b8      	cbnz	r0, 800961c <_Balloc+0x68>
 80095ec:	2101      	movs	r1, #1
 80095ee:	fa01 f605 	lsl.w	r6, r1, r5
 80095f2:	1d72      	adds	r2, r6, #5
 80095f4:	4620      	mov	r0, r4
 80095f6:	0092      	lsls	r2, r2, #2
 80095f8:	f000 fb5e 	bl	8009cb8 <_calloc_r>
 80095fc:	b160      	cbz	r0, 8009618 <_Balloc+0x64>
 80095fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009602:	e00e      	b.n	8009622 <_Balloc+0x6e>
 8009604:	2221      	movs	r2, #33	; 0x21
 8009606:	2104      	movs	r1, #4
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fb55 	bl	8009cb8 <_calloc_r>
 800960e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009610:	60f0      	str	r0, [r6, #12]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e4      	bne.n	80095e2 <_Balloc+0x2e>
 8009618:	2000      	movs	r0, #0
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	6802      	ldr	r2, [r0, #0]
 800961e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009622:	2300      	movs	r3, #0
 8009624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009628:	e7f7      	b.n	800961a <_Balloc+0x66>
 800962a:	bf00      	nop
 800962c:	0800aa59 	.word	0x0800aa59
 8009630:	0800aadc 	.word	0x0800aadc

08009634 <_Bfree>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009638:	4605      	mov	r5, r0
 800963a:	460c      	mov	r4, r1
 800963c:	b976      	cbnz	r6, 800965c <_Bfree+0x28>
 800963e:	2010      	movs	r0, #16
 8009640:	f7ff ff94 	bl	800956c <malloc>
 8009644:	4602      	mov	r2, r0
 8009646:	6268      	str	r0, [r5, #36]	; 0x24
 8009648:	b920      	cbnz	r0, 8009654 <_Bfree+0x20>
 800964a:	218a      	movs	r1, #138	; 0x8a
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <_Bfree+0x3c>)
 800964e:	4809      	ldr	r0, [pc, #36]	; (8009674 <_Bfree+0x40>)
 8009650:	f000 fc32 	bl	8009eb8 <__assert_func>
 8009654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009658:	6006      	str	r6, [r0, #0]
 800965a:	60c6      	str	r6, [r0, #12]
 800965c:	b13c      	cbz	r4, 800966e <_Bfree+0x3a>
 800965e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009660:	6862      	ldr	r2, [r4, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009668:	6021      	str	r1, [r4, #0]
 800966a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	0800aa59 	.word	0x0800aa59
 8009674:	0800aadc 	.word	0x0800aadc

08009678 <__multadd>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	4607      	mov	r7, r0
 800967e:	460c      	mov	r4, r1
 8009680:	461e      	mov	r6, r3
 8009682:	2000      	movs	r0, #0
 8009684:	690d      	ldr	r5, [r1, #16]
 8009686:	f101 0c14 	add.w	ip, r1, #20
 800968a:	f8dc 3000 	ldr.w	r3, [ip]
 800968e:	3001      	adds	r0, #1
 8009690:	b299      	uxth	r1, r3
 8009692:	fb02 6101 	mla	r1, r2, r1, r6
 8009696:	0c1e      	lsrs	r6, r3, #16
 8009698:	0c0b      	lsrs	r3, r1, #16
 800969a:	fb02 3306 	mla	r3, r2, r6, r3
 800969e:	b289      	uxth	r1, r1
 80096a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096a4:	4285      	cmp	r5, r0
 80096a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096aa:	f84c 1b04 	str.w	r1, [ip], #4
 80096ae:	dcec      	bgt.n	800968a <__multadd+0x12>
 80096b0:	b30e      	cbz	r6, 80096f6 <__multadd+0x7e>
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	42ab      	cmp	r3, r5
 80096b6:	dc19      	bgt.n	80096ec <__multadd+0x74>
 80096b8:	6861      	ldr	r1, [r4, #4]
 80096ba:	4638      	mov	r0, r7
 80096bc:	3101      	adds	r1, #1
 80096be:	f7ff ff79 	bl	80095b4 <_Balloc>
 80096c2:	4680      	mov	r8, r0
 80096c4:	b928      	cbnz	r0, 80096d2 <__multadd+0x5a>
 80096c6:	4602      	mov	r2, r0
 80096c8:	21b5      	movs	r1, #181	; 0xb5
 80096ca:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <__multadd+0x84>)
 80096cc:	480c      	ldr	r0, [pc, #48]	; (8009700 <__multadd+0x88>)
 80096ce:	f000 fbf3 	bl	8009eb8 <__assert_func>
 80096d2:	6922      	ldr	r2, [r4, #16]
 80096d4:	f104 010c 	add.w	r1, r4, #12
 80096d8:	3202      	adds	r2, #2
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	300c      	adds	r0, #12
 80096de:	f7ff ff5b 	bl	8009598 <memcpy>
 80096e2:	4621      	mov	r1, r4
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff ffa5 	bl	8009634 <_Bfree>
 80096ea:	4644      	mov	r4, r8
 80096ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096f0:	3501      	adds	r5, #1
 80096f2:	615e      	str	r6, [r3, #20]
 80096f4:	6125      	str	r5, [r4, #16]
 80096f6:	4620      	mov	r0, r4
 80096f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fc:	0800aacb 	.word	0x0800aacb
 8009700:	0800aadc 	.word	0x0800aadc

08009704 <__hi0bits>:
 8009704:	0c02      	lsrs	r2, r0, #16
 8009706:	0412      	lsls	r2, r2, #16
 8009708:	4603      	mov	r3, r0
 800970a:	b9ca      	cbnz	r2, 8009740 <__hi0bits+0x3c>
 800970c:	0403      	lsls	r3, r0, #16
 800970e:	2010      	movs	r0, #16
 8009710:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009714:	bf04      	itt	eq
 8009716:	021b      	lsleq	r3, r3, #8
 8009718:	3008      	addeq	r0, #8
 800971a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800971e:	bf04      	itt	eq
 8009720:	011b      	lsleq	r3, r3, #4
 8009722:	3004      	addeq	r0, #4
 8009724:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009728:	bf04      	itt	eq
 800972a:	009b      	lsleq	r3, r3, #2
 800972c:	3002      	addeq	r0, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	db05      	blt.n	800973e <__hi0bits+0x3a>
 8009732:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009736:	f100 0001 	add.w	r0, r0, #1
 800973a:	bf08      	it	eq
 800973c:	2020      	moveq	r0, #32
 800973e:	4770      	bx	lr
 8009740:	2000      	movs	r0, #0
 8009742:	e7e5      	b.n	8009710 <__hi0bits+0xc>

08009744 <__lo0bits>:
 8009744:	6803      	ldr	r3, [r0, #0]
 8009746:	4602      	mov	r2, r0
 8009748:	f013 0007 	ands.w	r0, r3, #7
 800974c:	d00b      	beq.n	8009766 <__lo0bits+0x22>
 800974e:	07d9      	lsls	r1, r3, #31
 8009750:	d421      	bmi.n	8009796 <__lo0bits+0x52>
 8009752:	0798      	lsls	r0, r3, #30
 8009754:	bf49      	itett	mi
 8009756:	085b      	lsrmi	r3, r3, #1
 8009758:	089b      	lsrpl	r3, r3, #2
 800975a:	2001      	movmi	r0, #1
 800975c:	6013      	strmi	r3, [r2, #0]
 800975e:	bf5c      	itt	pl
 8009760:	2002      	movpl	r0, #2
 8009762:	6013      	strpl	r3, [r2, #0]
 8009764:	4770      	bx	lr
 8009766:	b299      	uxth	r1, r3
 8009768:	b909      	cbnz	r1, 800976e <__lo0bits+0x2a>
 800976a:	2010      	movs	r0, #16
 800976c:	0c1b      	lsrs	r3, r3, #16
 800976e:	b2d9      	uxtb	r1, r3
 8009770:	b909      	cbnz	r1, 8009776 <__lo0bits+0x32>
 8009772:	3008      	adds	r0, #8
 8009774:	0a1b      	lsrs	r3, r3, #8
 8009776:	0719      	lsls	r1, r3, #28
 8009778:	bf04      	itt	eq
 800977a:	091b      	lsreq	r3, r3, #4
 800977c:	3004      	addeq	r0, #4
 800977e:	0799      	lsls	r1, r3, #30
 8009780:	bf04      	itt	eq
 8009782:	089b      	lsreq	r3, r3, #2
 8009784:	3002      	addeq	r0, #2
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	d403      	bmi.n	8009792 <__lo0bits+0x4e>
 800978a:	085b      	lsrs	r3, r3, #1
 800978c:	f100 0001 	add.w	r0, r0, #1
 8009790:	d003      	beq.n	800979a <__lo0bits+0x56>
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	4770      	bx	lr
 8009796:	2000      	movs	r0, #0
 8009798:	4770      	bx	lr
 800979a:	2020      	movs	r0, #32
 800979c:	4770      	bx	lr
	...

080097a0 <__i2b>:
 80097a0:	b510      	push	{r4, lr}
 80097a2:	460c      	mov	r4, r1
 80097a4:	2101      	movs	r1, #1
 80097a6:	f7ff ff05 	bl	80095b4 <_Balloc>
 80097aa:	4602      	mov	r2, r0
 80097ac:	b928      	cbnz	r0, 80097ba <__i2b+0x1a>
 80097ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097b2:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <__i2b+0x24>)
 80097b4:	4804      	ldr	r0, [pc, #16]	; (80097c8 <__i2b+0x28>)
 80097b6:	f000 fb7f 	bl	8009eb8 <__assert_func>
 80097ba:	2301      	movs	r3, #1
 80097bc:	6144      	str	r4, [r0, #20]
 80097be:	6103      	str	r3, [r0, #16]
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	bf00      	nop
 80097c4:	0800aacb 	.word	0x0800aacb
 80097c8:	0800aadc 	.word	0x0800aadc

080097cc <__multiply>:
 80097cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4691      	mov	r9, r2
 80097d2:	690a      	ldr	r2, [r1, #16]
 80097d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097d8:	460c      	mov	r4, r1
 80097da:	429a      	cmp	r2, r3
 80097dc:	bfbe      	ittt	lt
 80097de:	460b      	movlt	r3, r1
 80097e0:	464c      	movlt	r4, r9
 80097e2:	4699      	movlt	r9, r3
 80097e4:	6927      	ldr	r7, [r4, #16]
 80097e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	eb07 060a 	add.w	r6, r7, sl
 80097f2:	42b3      	cmp	r3, r6
 80097f4:	b085      	sub	sp, #20
 80097f6:	bfb8      	it	lt
 80097f8:	3101      	addlt	r1, #1
 80097fa:	f7ff fedb 	bl	80095b4 <_Balloc>
 80097fe:	b930      	cbnz	r0, 800980e <__multiply+0x42>
 8009800:	4602      	mov	r2, r0
 8009802:	f240 115d 	movw	r1, #349	; 0x15d
 8009806:	4b43      	ldr	r3, [pc, #268]	; (8009914 <__multiply+0x148>)
 8009808:	4843      	ldr	r0, [pc, #268]	; (8009918 <__multiply+0x14c>)
 800980a:	f000 fb55 	bl	8009eb8 <__assert_func>
 800980e:	f100 0514 	add.w	r5, r0, #20
 8009812:	462b      	mov	r3, r5
 8009814:	2200      	movs	r2, #0
 8009816:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800981a:	4543      	cmp	r3, r8
 800981c:	d321      	bcc.n	8009862 <__multiply+0x96>
 800981e:	f104 0314 	add.w	r3, r4, #20
 8009822:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009826:	f109 0314 	add.w	r3, r9, #20
 800982a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800982e:	9202      	str	r2, [sp, #8]
 8009830:	1b3a      	subs	r2, r7, r4
 8009832:	3a15      	subs	r2, #21
 8009834:	f022 0203 	bic.w	r2, r2, #3
 8009838:	3204      	adds	r2, #4
 800983a:	f104 0115 	add.w	r1, r4, #21
 800983e:	428f      	cmp	r7, r1
 8009840:	bf38      	it	cc
 8009842:	2204      	movcc	r2, #4
 8009844:	9201      	str	r2, [sp, #4]
 8009846:	9a02      	ldr	r2, [sp, #8]
 8009848:	9303      	str	r3, [sp, #12]
 800984a:	429a      	cmp	r2, r3
 800984c:	d80c      	bhi.n	8009868 <__multiply+0x9c>
 800984e:	2e00      	cmp	r6, #0
 8009850:	dd03      	ble.n	800985a <__multiply+0x8e>
 8009852:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009856:	2b00      	cmp	r3, #0
 8009858:	d059      	beq.n	800990e <__multiply+0x142>
 800985a:	6106      	str	r6, [r0, #16]
 800985c:	b005      	add	sp, #20
 800985e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009862:	f843 2b04 	str.w	r2, [r3], #4
 8009866:	e7d8      	b.n	800981a <__multiply+0x4e>
 8009868:	f8b3 a000 	ldrh.w	sl, [r3]
 800986c:	f1ba 0f00 	cmp.w	sl, #0
 8009870:	d023      	beq.n	80098ba <__multiply+0xee>
 8009872:	46a9      	mov	r9, r5
 8009874:	f04f 0c00 	mov.w	ip, #0
 8009878:	f104 0e14 	add.w	lr, r4, #20
 800987c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009880:	f8d9 1000 	ldr.w	r1, [r9]
 8009884:	fa1f fb82 	uxth.w	fp, r2
 8009888:	b289      	uxth	r1, r1
 800988a:	fb0a 110b 	mla	r1, sl, fp, r1
 800988e:	4461      	add	r1, ip
 8009890:	f8d9 c000 	ldr.w	ip, [r9]
 8009894:	0c12      	lsrs	r2, r2, #16
 8009896:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800989a:	fb0a c202 	mla	r2, sl, r2, ip
 800989e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098a2:	b289      	uxth	r1, r1
 80098a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098a8:	4577      	cmp	r7, lr
 80098aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098ae:	f849 1b04 	str.w	r1, [r9], #4
 80098b2:	d8e3      	bhi.n	800987c <__multiply+0xb0>
 80098b4:	9a01      	ldr	r2, [sp, #4]
 80098b6:	f845 c002 	str.w	ip, [r5, r2]
 80098ba:	9a03      	ldr	r2, [sp, #12]
 80098bc:	3304      	adds	r3, #4
 80098be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098c2:	f1b9 0f00 	cmp.w	r9, #0
 80098c6:	d020      	beq.n	800990a <__multiply+0x13e>
 80098c8:	46ae      	mov	lr, r5
 80098ca:	f04f 0a00 	mov.w	sl, #0
 80098ce:	6829      	ldr	r1, [r5, #0]
 80098d0:	f104 0c14 	add.w	ip, r4, #20
 80098d4:	f8bc b000 	ldrh.w	fp, [ip]
 80098d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098dc:	b289      	uxth	r1, r1
 80098de:	fb09 220b 	mla	r2, r9, fp, r2
 80098e2:	4492      	add	sl, r2
 80098e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098e8:	f84e 1b04 	str.w	r1, [lr], #4
 80098ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098f0:	f8be 1000 	ldrh.w	r1, [lr]
 80098f4:	0c12      	lsrs	r2, r2, #16
 80098f6:	fb09 1102 	mla	r1, r9, r2, r1
 80098fa:	4567      	cmp	r7, ip
 80098fc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009900:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009904:	d8e6      	bhi.n	80098d4 <__multiply+0x108>
 8009906:	9a01      	ldr	r2, [sp, #4]
 8009908:	50a9      	str	r1, [r5, r2]
 800990a:	3504      	adds	r5, #4
 800990c:	e79b      	b.n	8009846 <__multiply+0x7a>
 800990e:	3e01      	subs	r6, #1
 8009910:	e79d      	b.n	800984e <__multiply+0x82>
 8009912:	bf00      	nop
 8009914:	0800aacb 	.word	0x0800aacb
 8009918:	0800aadc 	.word	0x0800aadc

0800991c <__pow5mult>:
 800991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009920:	4615      	mov	r5, r2
 8009922:	f012 0203 	ands.w	r2, r2, #3
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	d007      	beq.n	800993c <__pow5mult+0x20>
 800992c:	4c25      	ldr	r4, [pc, #148]	; (80099c4 <__pow5mult+0xa8>)
 800992e:	3a01      	subs	r2, #1
 8009930:	2300      	movs	r3, #0
 8009932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009936:	f7ff fe9f 	bl	8009678 <__multadd>
 800993a:	4607      	mov	r7, r0
 800993c:	10ad      	asrs	r5, r5, #2
 800993e:	d03d      	beq.n	80099bc <__pow5mult+0xa0>
 8009940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009942:	b97c      	cbnz	r4, 8009964 <__pow5mult+0x48>
 8009944:	2010      	movs	r0, #16
 8009946:	f7ff fe11 	bl	800956c <malloc>
 800994a:	4602      	mov	r2, r0
 800994c:	6270      	str	r0, [r6, #36]	; 0x24
 800994e:	b928      	cbnz	r0, 800995c <__pow5mult+0x40>
 8009950:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009954:	4b1c      	ldr	r3, [pc, #112]	; (80099c8 <__pow5mult+0xac>)
 8009956:	481d      	ldr	r0, [pc, #116]	; (80099cc <__pow5mult+0xb0>)
 8009958:	f000 faae 	bl	8009eb8 <__assert_func>
 800995c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009960:	6004      	str	r4, [r0, #0]
 8009962:	60c4      	str	r4, [r0, #12]
 8009964:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800996c:	b94c      	cbnz	r4, 8009982 <__pow5mult+0x66>
 800996e:	f240 2171 	movw	r1, #625	; 0x271
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ff14 	bl	80097a0 <__i2b>
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 0900 	mov.w	r9, #0
 8009986:	07eb      	lsls	r3, r5, #31
 8009988:	d50a      	bpl.n	80099a0 <__pow5mult+0x84>
 800998a:	4639      	mov	r1, r7
 800998c:	4622      	mov	r2, r4
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff1c 	bl	80097cc <__multiply>
 8009994:	4680      	mov	r8, r0
 8009996:	4639      	mov	r1, r7
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff fe4b 	bl	8009634 <_Bfree>
 800999e:	4647      	mov	r7, r8
 80099a0:	106d      	asrs	r5, r5, #1
 80099a2:	d00b      	beq.n	80099bc <__pow5mult+0xa0>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	b938      	cbnz	r0, 80099b8 <__pow5mult+0x9c>
 80099a8:	4622      	mov	r2, r4
 80099aa:	4621      	mov	r1, r4
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff ff0d 	bl	80097cc <__multiply>
 80099b2:	6020      	str	r0, [r4, #0]
 80099b4:	f8c0 9000 	str.w	r9, [r0]
 80099b8:	4604      	mov	r4, r0
 80099ba:	e7e4      	b.n	8009986 <__pow5mult+0x6a>
 80099bc:	4638      	mov	r0, r7
 80099be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c2:	bf00      	nop
 80099c4:	0800ac28 	.word	0x0800ac28
 80099c8:	0800aa59 	.word	0x0800aa59
 80099cc:	0800aadc 	.word	0x0800aadc

080099d0 <__lshift>:
 80099d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	4607      	mov	r7, r0
 80099d8:	4691      	mov	r9, r2
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	6849      	ldr	r1, [r1, #4]
 80099de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099e2:	68a3      	ldr	r3, [r4, #8]
 80099e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099e8:	f108 0601 	add.w	r6, r8, #1
 80099ec:	42b3      	cmp	r3, r6
 80099ee:	db0b      	blt.n	8009a08 <__lshift+0x38>
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff fddf 	bl	80095b4 <_Balloc>
 80099f6:	4605      	mov	r5, r0
 80099f8:	b948      	cbnz	r0, 8009a0e <__lshift+0x3e>
 80099fa:	4602      	mov	r2, r0
 80099fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a00:	4b29      	ldr	r3, [pc, #164]	; (8009aa8 <__lshift+0xd8>)
 8009a02:	482a      	ldr	r0, [pc, #168]	; (8009aac <__lshift+0xdc>)
 8009a04:	f000 fa58 	bl	8009eb8 <__assert_func>
 8009a08:	3101      	adds	r1, #1
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	e7ee      	b.n	80099ec <__lshift+0x1c>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f100 0114 	add.w	r1, r0, #20
 8009a14:	f100 0210 	add.w	r2, r0, #16
 8009a18:	4618      	mov	r0, r3
 8009a1a:	4553      	cmp	r3, sl
 8009a1c:	db37      	blt.n	8009a8e <__lshift+0xbe>
 8009a1e:	6920      	ldr	r0, [r4, #16]
 8009a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a24:	f104 0314 	add.w	r3, r4, #20
 8009a28:	f019 091f 	ands.w	r9, r9, #31
 8009a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a34:	d02f      	beq.n	8009a96 <__lshift+0xc6>
 8009a36:	468a      	mov	sl, r1
 8009a38:	f04f 0c00 	mov.w	ip, #0
 8009a3c:	f1c9 0e20 	rsb	lr, r9, #32
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	fa02 f209 	lsl.w	r2, r2, r9
 8009a46:	ea42 020c 	orr.w	r2, r2, ip
 8009a4a:	f84a 2b04 	str.w	r2, [sl], #4
 8009a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a52:	4298      	cmp	r0, r3
 8009a54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a58:	d8f2      	bhi.n	8009a40 <__lshift+0x70>
 8009a5a:	1b03      	subs	r3, r0, r4
 8009a5c:	3b15      	subs	r3, #21
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	3304      	adds	r3, #4
 8009a64:	f104 0215 	add.w	r2, r4, #21
 8009a68:	4290      	cmp	r0, r2
 8009a6a:	bf38      	it	cc
 8009a6c:	2304      	movcc	r3, #4
 8009a6e:	f841 c003 	str.w	ip, [r1, r3]
 8009a72:	f1bc 0f00 	cmp.w	ip, #0
 8009a76:	d001      	beq.n	8009a7c <__lshift+0xac>
 8009a78:	f108 0602 	add.w	r6, r8, #2
 8009a7c:	3e01      	subs	r6, #1
 8009a7e:	4638      	mov	r0, r7
 8009a80:	4621      	mov	r1, r4
 8009a82:	612e      	str	r6, [r5, #16]
 8009a84:	f7ff fdd6 	bl	8009634 <_Bfree>
 8009a88:	4628      	mov	r0, r5
 8009a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a92:	3301      	adds	r3, #1
 8009a94:	e7c1      	b.n	8009a1a <__lshift+0x4a>
 8009a96:	3904      	subs	r1, #4
 8009a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9c:	4298      	cmp	r0, r3
 8009a9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aa2:	d8f9      	bhi.n	8009a98 <__lshift+0xc8>
 8009aa4:	e7ea      	b.n	8009a7c <__lshift+0xac>
 8009aa6:	bf00      	nop
 8009aa8:	0800aacb 	.word	0x0800aacb
 8009aac:	0800aadc 	.word	0x0800aadc

08009ab0 <__mcmp>:
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	690a      	ldr	r2, [r1, #16]
 8009ab4:	6900      	ldr	r0, [r0, #16]
 8009ab6:	b530      	push	{r4, r5, lr}
 8009ab8:	1a80      	subs	r0, r0, r2
 8009aba:	d10d      	bne.n	8009ad8 <__mcmp+0x28>
 8009abc:	3314      	adds	r3, #20
 8009abe:	3114      	adds	r1, #20
 8009ac0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ac4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ac8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009acc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ad0:	4295      	cmp	r5, r2
 8009ad2:	d002      	beq.n	8009ada <__mcmp+0x2a>
 8009ad4:	d304      	bcc.n	8009ae0 <__mcmp+0x30>
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	bd30      	pop	{r4, r5, pc}
 8009ada:	42a3      	cmp	r3, r4
 8009adc:	d3f4      	bcc.n	8009ac8 <__mcmp+0x18>
 8009ade:	e7fb      	b.n	8009ad8 <__mcmp+0x28>
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ae4:	e7f8      	b.n	8009ad8 <__mcmp+0x28>
	...

08009ae8 <__mdiff>:
 8009ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	460d      	mov	r5, r1
 8009aee:	4607      	mov	r7, r0
 8009af0:	4611      	mov	r1, r2
 8009af2:	4628      	mov	r0, r5
 8009af4:	4614      	mov	r4, r2
 8009af6:	f7ff ffdb 	bl	8009ab0 <__mcmp>
 8009afa:	1e06      	subs	r6, r0, #0
 8009afc:	d111      	bne.n	8009b22 <__mdiff+0x3a>
 8009afe:	4631      	mov	r1, r6
 8009b00:	4638      	mov	r0, r7
 8009b02:	f7ff fd57 	bl	80095b4 <_Balloc>
 8009b06:	4602      	mov	r2, r0
 8009b08:	b928      	cbnz	r0, 8009b16 <__mdiff+0x2e>
 8009b0a:	f240 2132 	movw	r1, #562	; 0x232
 8009b0e:	4b3a      	ldr	r3, [pc, #232]	; (8009bf8 <__mdiff+0x110>)
 8009b10:	483a      	ldr	r0, [pc, #232]	; (8009bfc <__mdiff+0x114>)
 8009b12:	f000 f9d1 	bl	8009eb8 <__assert_func>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b22:	bfa4      	itt	ge
 8009b24:	4623      	movge	r3, r4
 8009b26:	462c      	movge	r4, r5
 8009b28:	4638      	mov	r0, r7
 8009b2a:	6861      	ldr	r1, [r4, #4]
 8009b2c:	bfa6      	itte	ge
 8009b2e:	461d      	movge	r5, r3
 8009b30:	2600      	movge	r6, #0
 8009b32:	2601      	movlt	r6, #1
 8009b34:	f7ff fd3e 	bl	80095b4 <_Balloc>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	b918      	cbnz	r0, 8009b44 <__mdiff+0x5c>
 8009b3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b40:	4b2d      	ldr	r3, [pc, #180]	; (8009bf8 <__mdiff+0x110>)
 8009b42:	e7e5      	b.n	8009b10 <__mdiff+0x28>
 8009b44:	f102 0814 	add.w	r8, r2, #20
 8009b48:	46c2      	mov	sl, r8
 8009b4a:	f04f 0c00 	mov.w	ip, #0
 8009b4e:	6927      	ldr	r7, [r4, #16]
 8009b50:	60c6      	str	r6, [r0, #12]
 8009b52:	692e      	ldr	r6, [r5, #16]
 8009b54:	f104 0014 	add.w	r0, r4, #20
 8009b58:	f105 0914 	add.w	r9, r5, #20
 8009b5c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009b60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b64:	3410      	adds	r4, #16
 8009b66:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009b6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b6e:	fa1f f18b 	uxth.w	r1, fp
 8009b72:	448c      	add	ip, r1
 8009b74:	b299      	uxth	r1, r3
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	ebac 0101 	sub.w	r1, ip, r1
 8009b7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b84:	b289      	uxth	r1, r1
 8009b86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009b8a:	454e      	cmp	r6, r9
 8009b8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b90:	f84a 3b04 	str.w	r3, [sl], #4
 8009b94:	d8e7      	bhi.n	8009b66 <__mdiff+0x7e>
 8009b96:	1b73      	subs	r3, r6, r5
 8009b98:	3b15      	subs	r3, #21
 8009b9a:	f023 0303 	bic.w	r3, r3, #3
 8009b9e:	3515      	adds	r5, #21
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	42ae      	cmp	r6, r5
 8009ba4:	bf38      	it	cc
 8009ba6:	2304      	movcc	r3, #4
 8009ba8:	4418      	add	r0, r3
 8009baa:	4443      	add	r3, r8
 8009bac:	461e      	mov	r6, r3
 8009bae:	4605      	mov	r5, r0
 8009bb0:	4575      	cmp	r5, lr
 8009bb2:	d30e      	bcc.n	8009bd2 <__mdiff+0xea>
 8009bb4:	f10e 0103 	add.w	r1, lr, #3
 8009bb8:	1a09      	subs	r1, r1, r0
 8009bba:	f021 0103 	bic.w	r1, r1, #3
 8009bbe:	3803      	subs	r0, #3
 8009bc0:	4586      	cmp	lr, r0
 8009bc2:	bf38      	it	cc
 8009bc4:	2100      	movcc	r1, #0
 8009bc6:	4419      	add	r1, r3
 8009bc8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009bcc:	b18b      	cbz	r3, 8009bf2 <__mdiff+0x10a>
 8009bce:	6117      	str	r7, [r2, #16]
 8009bd0:	e7a4      	b.n	8009b1c <__mdiff+0x34>
 8009bd2:	f855 8b04 	ldr.w	r8, [r5], #4
 8009bd6:	fa1f f188 	uxth.w	r1, r8
 8009bda:	4461      	add	r1, ip
 8009bdc:	140c      	asrs	r4, r1, #16
 8009bde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009be2:	b289      	uxth	r1, r1
 8009be4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009be8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009bec:	f846 1b04 	str.w	r1, [r6], #4
 8009bf0:	e7de      	b.n	8009bb0 <__mdiff+0xc8>
 8009bf2:	3f01      	subs	r7, #1
 8009bf4:	e7e8      	b.n	8009bc8 <__mdiff+0xe0>
 8009bf6:	bf00      	nop
 8009bf8:	0800aacb 	.word	0x0800aacb
 8009bfc:	0800aadc 	.word	0x0800aadc

08009c00 <__d2b>:
 8009c00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c04:	2101      	movs	r1, #1
 8009c06:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009c0a:	4690      	mov	r8, r2
 8009c0c:	461d      	mov	r5, r3
 8009c0e:	f7ff fcd1 	bl	80095b4 <_Balloc>
 8009c12:	4604      	mov	r4, r0
 8009c14:	b930      	cbnz	r0, 8009c24 <__d2b+0x24>
 8009c16:	4602      	mov	r2, r0
 8009c18:	f240 310a 	movw	r1, #778	; 0x30a
 8009c1c:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <__d2b+0xb0>)
 8009c1e:	4825      	ldr	r0, [pc, #148]	; (8009cb4 <__d2b+0xb4>)
 8009c20:	f000 f94a 	bl	8009eb8 <__assert_func>
 8009c24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009c28:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009c2c:	bb2d      	cbnz	r5, 8009c7a <__d2b+0x7a>
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	f1b8 0300 	subs.w	r3, r8, #0
 8009c34:	d026      	beq.n	8009c84 <__d2b+0x84>
 8009c36:	4668      	mov	r0, sp
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	f7ff fd83 	bl	8009744 <__lo0bits>
 8009c3e:	9900      	ldr	r1, [sp, #0]
 8009c40:	b1f0      	cbz	r0, 8009c80 <__d2b+0x80>
 8009c42:	9a01      	ldr	r2, [sp, #4]
 8009c44:	f1c0 0320 	rsb	r3, r0, #32
 8009c48:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	40c2      	lsrs	r2, r0
 8009c50:	6163      	str	r3, [r4, #20]
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	9b01      	ldr	r3, [sp, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	bf14      	ite	ne
 8009c5a:	2102      	movne	r1, #2
 8009c5c:	2101      	moveq	r1, #1
 8009c5e:	61a3      	str	r3, [r4, #24]
 8009c60:	6121      	str	r1, [r4, #16]
 8009c62:	b1c5      	cbz	r5, 8009c96 <__d2b+0x96>
 8009c64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c68:	4405      	add	r5, r0
 8009c6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c6e:	603d      	str	r5, [r7, #0]
 8009c70:	6030      	str	r0, [r6, #0]
 8009c72:	4620      	mov	r0, r4
 8009c74:	b002      	add	sp, #8
 8009c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c7e:	e7d6      	b.n	8009c2e <__d2b+0x2e>
 8009c80:	6161      	str	r1, [r4, #20]
 8009c82:	e7e7      	b.n	8009c54 <__d2b+0x54>
 8009c84:	a801      	add	r0, sp, #4
 8009c86:	f7ff fd5d 	bl	8009744 <__lo0bits>
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	9b01      	ldr	r3, [sp, #4]
 8009c8e:	6121      	str	r1, [r4, #16]
 8009c90:	6163      	str	r3, [r4, #20]
 8009c92:	3020      	adds	r0, #32
 8009c94:	e7e5      	b.n	8009c62 <__d2b+0x62>
 8009c96:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009c9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c9e:	6038      	str	r0, [r7, #0]
 8009ca0:	6918      	ldr	r0, [r3, #16]
 8009ca2:	f7ff fd2f 	bl	8009704 <__hi0bits>
 8009ca6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009caa:	6031      	str	r1, [r6, #0]
 8009cac:	e7e1      	b.n	8009c72 <__d2b+0x72>
 8009cae:	bf00      	nop
 8009cb0:	0800aacb 	.word	0x0800aacb
 8009cb4:	0800aadc 	.word	0x0800aadc

08009cb8 <_calloc_r>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	fba1 5402 	umull	r5, r4, r1, r2
 8009cbe:	b934      	cbnz	r4, 8009cce <_calloc_r+0x16>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f000 f875 	bl	8009db0 <_malloc_r>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <_calloc_r+0x1e>
 8009cca:	4630      	mov	r0, r6
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
 8009cce:	220c      	movs	r2, #12
 8009cd0:	2600      	movs	r6, #0
 8009cd2:	6002      	str	r2, [r0, #0]
 8009cd4:	e7f9      	b.n	8009cca <_calloc_r+0x12>
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4621      	mov	r1, r4
 8009cda:	f7fe f961 	bl	8007fa0 <memset>
 8009cde:	e7f4      	b.n	8009cca <_calloc_r+0x12>

08009ce0 <_free_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	d040      	beq.n	8009d6a <_free_r+0x8a>
 8009ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cec:	1f0c      	subs	r4, r1, #4
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	bfb8      	it	lt
 8009cf2:	18e4      	addlt	r4, r4, r3
 8009cf4:	f000 f922 	bl	8009f3c <__malloc_lock>
 8009cf8:	4a1c      	ldr	r2, [pc, #112]	; (8009d6c <_free_r+0x8c>)
 8009cfa:	6813      	ldr	r3, [r2, #0]
 8009cfc:	b933      	cbnz	r3, 8009d0c <_free_r+0x2c>
 8009cfe:	6063      	str	r3, [r4, #4]
 8009d00:	6014      	str	r4, [r2, #0]
 8009d02:	4628      	mov	r0, r5
 8009d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d08:	f000 b91e 	b.w	8009f48 <__malloc_unlock>
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	d908      	bls.n	8009d22 <_free_r+0x42>
 8009d10:	6820      	ldr	r0, [r4, #0]
 8009d12:	1821      	adds	r1, r4, r0
 8009d14:	428b      	cmp	r3, r1
 8009d16:	bf01      	itttt	eq
 8009d18:	6819      	ldreq	r1, [r3, #0]
 8009d1a:	685b      	ldreq	r3, [r3, #4]
 8009d1c:	1809      	addeq	r1, r1, r0
 8009d1e:	6021      	streq	r1, [r4, #0]
 8009d20:	e7ed      	b.n	8009cfe <_free_r+0x1e>
 8009d22:	461a      	mov	r2, r3
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	b10b      	cbz	r3, 8009d2c <_free_r+0x4c>
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d9fa      	bls.n	8009d22 <_free_r+0x42>
 8009d2c:	6811      	ldr	r1, [r2, #0]
 8009d2e:	1850      	adds	r0, r2, r1
 8009d30:	42a0      	cmp	r0, r4
 8009d32:	d10b      	bne.n	8009d4c <_free_r+0x6c>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	4401      	add	r1, r0
 8009d38:	1850      	adds	r0, r2, r1
 8009d3a:	4283      	cmp	r3, r0
 8009d3c:	6011      	str	r1, [r2, #0]
 8009d3e:	d1e0      	bne.n	8009d02 <_free_r+0x22>
 8009d40:	6818      	ldr	r0, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	4401      	add	r1, r0
 8009d46:	6011      	str	r1, [r2, #0]
 8009d48:	6053      	str	r3, [r2, #4]
 8009d4a:	e7da      	b.n	8009d02 <_free_r+0x22>
 8009d4c:	d902      	bls.n	8009d54 <_free_r+0x74>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	602b      	str	r3, [r5, #0]
 8009d52:	e7d6      	b.n	8009d02 <_free_r+0x22>
 8009d54:	6820      	ldr	r0, [r4, #0]
 8009d56:	1821      	adds	r1, r4, r0
 8009d58:	428b      	cmp	r3, r1
 8009d5a:	bf01      	itttt	eq
 8009d5c:	6819      	ldreq	r1, [r3, #0]
 8009d5e:	685b      	ldreq	r3, [r3, #4]
 8009d60:	1809      	addeq	r1, r1, r0
 8009d62:	6021      	streq	r1, [r4, #0]
 8009d64:	6063      	str	r3, [r4, #4]
 8009d66:	6054      	str	r4, [r2, #4]
 8009d68:	e7cb      	b.n	8009d02 <_free_r+0x22>
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	200004a8 	.word	0x200004a8

08009d70 <sbrk_aligned>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	4e0e      	ldr	r6, [pc, #56]	; (8009dac <sbrk_aligned+0x3c>)
 8009d74:	460c      	mov	r4, r1
 8009d76:	6831      	ldr	r1, [r6, #0]
 8009d78:	4605      	mov	r5, r0
 8009d7a:	b911      	cbnz	r1, 8009d82 <sbrk_aligned+0x12>
 8009d7c:	f000 f88c 	bl	8009e98 <_sbrk_r>
 8009d80:	6030      	str	r0, [r6, #0]
 8009d82:	4621      	mov	r1, r4
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 f887 	bl	8009e98 <_sbrk_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d00a      	beq.n	8009da4 <sbrk_aligned+0x34>
 8009d8e:	1cc4      	adds	r4, r0, #3
 8009d90:	f024 0403 	bic.w	r4, r4, #3
 8009d94:	42a0      	cmp	r0, r4
 8009d96:	d007      	beq.n	8009da8 <sbrk_aligned+0x38>
 8009d98:	1a21      	subs	r1, r4, r0
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f000 f87c 	bl	8009e98 <_sbrk_r>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d101      	bne.n	8009da8 <sbrk_aligned+0x38>
 8009da4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009da8:	4620      	mov	r0, r4
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	200004ac 	.word	0x200004ac

08009db0 <_malloc_r>:
 8009db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db4:	1ccd      	adds	r5, r1, #3
 8009db6:	f025 0503 	bic.w	r5, r5, #3
 8009dba:	3508      	adds	r5, #8
 8009dbc:	2d0c      	cmp	r5, #12
 8009dbe:	bf38      	it	cc
 8009dc0:	250c      	movcc	r5, #12
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	db01      	blt.n	8009dcc <_malloc_r+0x1c>
 8009dc8:	42a9      	cmp	r1, r5
 8009dca:	d905      	bls.n	8009dd8 <_malloc_r+0x28>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	2600      	movs	r6, #0
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd8:	4e2e      	ldr	r6, [pc, #184]	; (8009e94 <_malloc_r+0xe4>)
 8009dda:	f000 f8af 	bl	8009f3c <__malloc_lock>
 8009dde:	6833      	ldr	r3, [r6, #0]
 8009de0:	461c      	mov	r4, r3
 8009de2:	bb34      	cbnz	r4, 8009e32 <_malloc_r+0x82>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4638      	mov	r0, r7
 8009de8:	f7ff ffc2 	bl	8009d70 <sbrk_aligned>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	4604      	mov	r4, r0
 8009df0:	d14d      	bne.n	8009e8e <_malloc_r+0xde>
 8009df2:	6834      	ldr	r4, [r6, #0]
 8009df4:	4626      	mov	r6, r4
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	d140      	bne.n	8009e7c <_malloc_r+0xcc>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4638      	mov	r0, r7
 8009e00:	eb04 0803 	add.w	r8, r4, r3
 8009e04:	f000 f848 	bl	8009e98 <_sbrk_r>
 8009e08:	4580      	cmp	r8, r0
 8009e0a:	d13a      	bne.n	8009e82 <_malloc_r+0xd2>
 8009e0c:	6821      	ldr	r1, [r4, #0]
 8009e0e:	3503      	adds	r5, #3
 8009e10:	1a6d      	subs	r5, r5, r1
 8009e12:	f025 0503 	bic.w	r5, r5, #3
 8009e16:	3508      	adds	r5, #8
 8009e18:	2d0c      	cmp	r5, #12
 8009e1a:	bf38      	it	cc
 8009e1c:	250c      	movcc	r5, #12
 8009e1e:	4638      	mov	r0, r7
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7ff ffa5 	bl	8009d70 <sbrk_aligned>
 8009e26:	3001      	adds	r0, #1
 8009e28:	d02b      	beq.n	8009e82 <_malloc_r+0xd2>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	442b      	add	r3, r5
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	e00e      	b.n	8009e50 <_malloc_r+0xa0>
 8009e32:	6822      	ldr	r2, [r4, #0]
 8009e34:	1b52      	subs	r2, r2, r5
 8009e36:	d41e      	bmi.n	8009e76 <_malloc_r+0xc6>
 8009e38:	2a0b      	cmp	r2, #11
 8009e3a:	d916      	bls.n	8009e6a <_malloc_r+0xba>
 8009e3c:	1961      	adds	r1, r4, r5
 8009e3e:	42a3      	cmp	r3, r4
 8009e40:	6025      	str	r5, [r4, #0]
 8009e42:	bf18      	it	ne
 8009e44:	6059      	strne	r1, [r3, #4]
 8009e46:	6863      	ldr	r3, [r4, #4]
 8009e48:	bf08      	it	eq
 8009e4a:	6031      	streq	r1, [r6, #0]
 8009e4c:	5162      	str	r2, [r4, r5]
 8009e4e:	604b      	str	r3, [r1, #4]
 8009e50:	4638      	mov	r0, r7
 8009e52:	f104 060b 	add.w	r6, r4, #11
 8009e56:	f000 f877 	bl	8009f48 <__malloc_unlock>
 8009e5a:	f026 0607 	bic.w	r6, r6, #7
 8009e5e:	1d23      	adds	r3, r4, #4
 8009e60:	1af2      	subs	r2, r6, r3
 8009e62:	d0b6      	beq.n	8009dd2 <_malloc_r+0x22>
 8009e64:	1b9b      	subs	r3, r3, r6
 8009e66:	50a3      	str	r3, [r4, r2]
 8009e68:	e7b3      	b.n	8009dd2 <_malloc_r+0x22>
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	bf0c      	ite	eq
 8009e70:	6032      	streq	r2, [r6, #0]
 8009e72:	605a      	strne	r2, [r3, #4]
 8009e74:	e7ec      	b.n	8009e50 <_malloc_r+0xa0>
 8009e76:	4623      	mov	r3, r4
 8009e78:	6864      	ldr	r4, [r4, #4]
 8009e7a:	e7b2      	b.n	8009de2 <_malloc_r+0x32>
 8009e7c:	4634      	mov	r4, r6
 8009e7e:	6876      	ldr	r6, [r6, #4]
 8009e80:	e7b9      	b.n	8009df6 <_malloc_r+0x46>
 8009e82:	230c      	movs	r3, #12
 8009e84:	4638      	mov	r0, r7
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	f000 f85e 	bl	8009f48 <__malloc_unlock>
 8009e8c:	e7a1      	b.n	8009dd2 <_malloc_r+0x22>
 8009e8e:	6025      	str	r5, [r4, #0]
 8009e90:	e7de      	b.n	8009e50 <_malloc_r+0xa0>
 8009e92:	bf00      	nop
 8009e94:	200004a8 	.word	0x200004a8

08009e98 <_sbrk_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4d05      	ldr	r5, [pc, #20]	; (8009eb4 <_sbrk_r+0x1c>)
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	f7f8 ffec 	bl	8002e80 <_sbrk>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_sbrk_r+0x1a>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_sbrk_r+0x1a>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	200004b0 	.word	0x200004b0

08009eb8 <__assert_func>:
 8009eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eba:	4614      	mov	r4, r2
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <__assert_func+0x2c>)
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68d8      	ldr	r0, [r3, #12]
 8009ec6:	b14c      	cbz	r4, 8009edc <__assert_func+0x24>
 8009ec8:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <__assert_func+0x30>)
 8009eca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ece:	9100      	str	r1, [sp, #0]
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4906      	ldr	r1, [pc, #24]	; (8009eec <__assert_func+0x34>)
 8009ed4:	f000 f80e 	bl	8009ef4 <fiprintf>
 8009ed8:	f000 fa62 	bl	800a3a0 <abort>
 8009edc:	4b04      	ldr	r3, [pc, #16]	; (8009ef0 <__assert_func+0x38>)
 8009ede:	461c      	mov	r4, r3
 8009ee0:	e7f3      	b.n	8009eca <__assert_func+0x12>
 8009ee2:	bf00      	nop
 8009ee4:	200000b8 	.word	0x200000b8
 8009ee8:	0800ac34 	.word	0x0800ac34
 8009eec:	0800ac41 	.word	0x0800ac41
 8009ef0:	0800ac6f 	.word	0x0800ac6f

08009ef4 <fiprintf>:
 8009ef4:	b40e      	push	{r1, r2, r3}
 8009ef6:	b503      	push	{r0, r1, lr}
 8009ef8:	4601      	mov	r1, r0
 8009efa:	ab03      	add	r3, sp, #12
 8009efc:	4805      	ldr	r0, [pc, #20]	; (8009f14 <fiprintf+0x20>)
 8009efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f02:	6800      	ldr	r0, [r0, #0]
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	f000 f84d 	bl	8009fa4 <_vfiprintf_r>
 8009f0a:	b002      	add	sp, #8
 8009f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f10:	b003      	add	sp, #12
 8009f12:	4770      	bx	lr
 8009f14:	200000b8 	.word	0x200000b8

08009f18 <__ascii_mbtowc>:
 8009f18:	b082      	sub	sp, #8
 8009f1a:	b901      	cbnz	r1, 8009f1e <__ascii_mbtowc+0x6>
 8009f1c:	a901      	add	r1, sp, #4
 8009f1e:	b142      	cbz	r2, 8009f32 <__ascii_mbtowc+0x1a>
 8009f20:	b14b      	cbz	r3, 8009f36 <__ascii_mbtowc+0x1e>
 8009f22:	7813      	ldrb	r3, [r2, #0]
 8009f24:	600b      	str	r3, [r1, #0]
 8009f26:	7812      	ldrb	r2, [r2, #0]
 8009f28:	1e10      	subs	r0, r2, #0
 8009f2a:	bf18      	it	ne
 8009f2c:	2001      	movne	r0, #1
 8009f2e:	b002      	add	sp, #8
 8009f30:	4770      	bx	lr
 8009f32:	4610      	mov	r0, r2
 8009f34:	e7fb      	b.n	8009f2e <__ascii_mbtowc+0x16>
 8009f36:	f06f 0001 	mvn.w	r0, #1
 8009f3a:	e7f8      	b.n	8009f2e <__ascii_mbtowc+0x16>

08009f3c <__malloc_lock>:
 8009f3c:	4801      	ldr	r0, [pc, #4]	; (8009f44 <__malloc_lock+0x8>)
 8009f3e:	f000 bbeb 	b.w	800a718 <__retarget_lock_acquire_recursive>
 8009f42:	bf00      	nop
 8009f44:	200004b4 	.word	0x200004b4

08009f48 <__malloc_unlock>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__malloc_unlock+0x8>)
 8009f4a:	f000 bbe6 	b.w	800a71a <__retarget_lock_release_recursive>
 8009f4e:	bf00      	nop
 8009f50:	200004b4 	.word	0x200004b4

08009f54 <__sfputc_r>:
 8009f54:	6893      	ldr	r3, [r2, #8]
 8009f56:	b410      	push	{r4}
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	6093      	str	r3, [r2, #8]
 8009f5e:	da07      	bge.n	8009f70 <__sfputc_r+0x1c>
 8009f60:	6994      	ldr	r4, [r2, #24]
 8009f62:	42a3      	cmp	r3, r4
 8009f64:	db01      	blt.n	8009f6a <__sfputc_r+0x16>
 8009f66:	290a      	cmp	r1, #10
 8009f68:	d102      	bne.n	8009f70 <__sfputc_r+0x1c>
 8009f6a:	bc10      	pop	{r4}
 8009f6c:	f000 b94a 	b.w	800a204 <__swbuf_r>
 8009f70:	6813      	ldr	r3, [r2, #0]
 8009f72:	1c58      	adds	r0, r3, #1
 8009f74:	6010      	str	r0, [r2, #0]
 8009f76:	7019      	strb	r1, [r3, #0]
 8009f78:	4608      	mov	r0, r1
 8009f7a:	bc10      	pop	{r4}
 8009f7c:	4770      	bx	lr

08009f7e <__sfputs_r>:
 8009f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f80:	4606      	mov	r6, r0
 8009f82:	460f      	mov	r7, r1
 8009f84:	4614      	mov	r4, r2
 8009f86:	18d5      	adds	r5, r2, r3
 8009f88:	42ac      	cmp	r4, r5
 8009f8a:	d101      	bne.n	8009f90 <__sfputs_r+0x12>
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e007      	b.n	8009fa0 <__sfputs_r+0x22>
 8009f90:	463a      	mov	r2, r7
 8009f92:	4630      	mov	r0, r6
 8009f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f98:	f7ff ffdc 	bl	8009f54 <__sfputc_r>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d1f3      	bne.n	8009f88 <__sfputs_r+0xa>
 8009fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fa4 <_vfiprintf_r>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	460d      	mov	r5, r1
 8009faa:	4614      	mov	r4, r2
 8009fac:	4698      	mov	r8, r3
 8009fae:	4606      	mov	r6, r0
 8009fb0:	b09d      	sub	sp, #116	; 0x74
 8009fb2:	b118      	cbz	r0, 8009fbc <_vfiprintf_r+0x18>
 8009fb4:	6983      	ldr	r3, [r0, #24]
 8009fb6:	b90b      	cbnz	r3, 8009fbc <_vfiprintf_r+0x18>
 8009fb8:	f000 fb10 	bl	800a5dc <__sinit>
 8009fbc:	4b89      	ldr	r3, [pc, #548]	; (800a1e4 <_vfiprintf_r+0x240>)
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	d11b      	bne.n	8009ffa <_vfiprintf_r+0x56>
 8009fc2:	6875      	ldr	r5, [r6, #4]
 8009fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc6:	07d9      	lsls	r1, r3, #31
 8009fc8:	d405      	bmi.n	8009fd6 <_vfiprintf_r+0x32>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	059a      	lsls	r2, r3, #22
 8009fce:	d402      	bmi.n	8009fd6 <_vfiprintf_r+0x32>
 8009fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fd2:	f000 fba1 	bl	800a718 <__retarget_lock_acquire_recursive>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	071b      	lsls	r3, r3, #28
 8009fda:	d501      	bpl.n	8009fe0 <_vfiprintf_r+0x3c>
 8009fdc:	692b      	ldr	r3, [r5, #16]
 8009fde:	b9eb      	cbnz	r3, 800a01c <_vfiprintf_r+0x78>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f000 f96e 	bl	800a2c4 <__swsetup_r>
 8009fe8:	b1c0      	cbz	r0, 800a01c <_vfiprintf_r+0x78>
 8009fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fec:	07dc      	lsls	r4, r3, #31
 8009fee:	d50e      	bpl.n	800a00e <_vfiprintf_r+0x6a>
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ff4:	b01d      	add	sp, #116	; 0x74
 8009ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffa:	4b7b      	ldr	r3, [pc, #492]	; (800a1e8 <_vfiprintf_r+0x244>)
 8009ffc:	429d      	cmp	r5, r3
 8009ffe:	d101      	bne.n	800a004 <_vfiprintf_r+0x60>
 800a000:	68b5      	ldr	r5, [r6, #8]
 800a002:	e7df      	b.n	8009fc4 <_vfiprintf_r+0x20>
 800a004:	4b79      	ldr	r3, [pc, #484]	; (800a1ec <_vfiprintf_r+0x248>)
 800a006:	429d      	cmp	r5, r3
 800a008:	bf08      	it	eq
 800a00a:	68f5      	ldreq	r5, [r6, #12]
 800a00c:	e7da      	b.n	8009fc4 <_vfiprintf_r+0x20>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	0598      	lsls	r0, r3, #22
 800a012:	d4ed      	bmi.n	8009ff0 <_vfiprintf_r+0x4c>
 800a014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a016:	f000 fb80 	bl	800a71a <__retarget_lock_release_recursive>
 800a01a:	e7e9      	b.n	8009ff0 <_vfiprintf_r+0x4c>
 800a01c:	2300      	movs	r3, #0
 800a01e:	9309      	str	r3, [sp, #36]	; 0x24
 800a020:	2320      	movs	r3, #32
 800a022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a026:	2330      	movs	r3, #48	; 0x30
 800a028:	f04f 0901 	mov.w	r9, #1
 800a02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a030:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a1f0 <_vfiprintf_r+0x24c>
 800a034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a038:	4623      	mov	r3, r4
 800a03a:	469a      	mov	sl, r3
 800a03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a040:	b10a      	cbz	r2, 800a046 <_vfiprintf_r+0xa2>
 800a042:	2a25      	cmp	r2, #37	; 0x25
 800a044:	d1f9      	bne.n	800a03a <_vfiprintf_r+0x96>
 800a046:	ebba 0b04 	subs.w	fp, sl, r4
 800a04a:	d00b      	beq.n	800a064 <_vfiprintf_r+0xc0>
 800a04c:	465b      	mov	r3, fp
 800a04e:	4622      	mov	r2, r4
 800a050:	4629      	mov	r1, r5
 800a052:	4630      	mov	r0, r6
 800a054:	f7ff ff93 	bl	8009f7e <__sfputs_r>
 800a058:	3001      	adds	r0, #1
 800a05a:	f000 80aa 	beq.w	800a1b2 <_vfiprintf_r+0x20e>
 800a05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a060:	445a      	add	r2, fp
 800a062:	9209      	str	r2, [sp, #36]	; 0x24
 800a064:	f89a 3000 	ldrb.w	r3, [sl]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 80a2 	beq.w	800a1b2 <_vfiprintf_r+0x20e>
 800a06e:	2300      	movs	r3, #0
 800a070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a078:	f10a 0a01 	add.w	sl, sl, #1
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a084:	931a      	str	r3, [sp, #104]	; 0x68
 800a086:	4654      	mov	r4, sl
 800a088:	2205      	movs	r2, #5
 800a08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08e:	4858      	ldr	r0, [pc, #352]	; (800a1f0 <_vfiprintf_r+0x24c>)
 800a090:	f7ff fa74 	bl	800957c <memchr>
 800a094:	9a04      	ldr	r2, [sp, #16]
 800a096:	b9d8      	cbnz	r0, 800a0d0 <_vfiprintf_r+0x12c>
 800a098:	06d1      	lsls	r1, r2, #27
 800a09a:	bf44      	itt	mi
 800a09c:	2320      	movmi	r3, #32
 800a09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a2:	0713      	lsls	r3, r2, #28
 800a0a4:	bf44      	itt	mi
 800a0a6:	232b      	movmi	r3, #43	; 0x2b
 800a0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b2:	d015      	beq.n	800a0e0 <_vfiprintf_r+0x13c>
 800a0b4:	4654      	mov	r4, sl
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	f04f 0c0a 	mov.w	ip, #10
 800a0bc:	9a07      	ldr	r2, [sp, #28]
 800a0be:	4621      	mov	r1, r4
 800a0c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c4:	3b30      	subs	r3, #48	; 0x30
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d94e      	bls.n	800a168 <_vfiprintf_r+0x1c4>
 800a0ca:	b1b0      	cbz	r0, 800a0fa <_vfiprintf_r+0x156>
 800a0cc:	9207      	str	r2, [sp, #28]
 800a0ce:	e014      	b.n	800a0fa <_vfiprintf_r+0x156>
 800a0d0:	eba0 0308 	sub.w	r3, r0, r8
 800a0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	46a2      	mov	sl, r4
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	e7d2      	b.n	800a086 <_vfiprintf_r+0xe2>
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	1d19      	adds	r1, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	9103      	str	r1, [sp, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	bfbb      	ittet	lt
 800a0ec:	425b      	neglt	r3, r3
 800a0ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f2:	9307      	strge	r3, [sp, #28]
 800a0f4:	9307      	strlt	r3, [sp, #28]
 800a0f6:	bfb8      	it	lt
 800a0f8:	9204      	strlt	r2, [sp, #16]
 800a0fa:	7823      	ldrb	r3, [r4, #0]
 800a0fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a0fe:	d10c      	bne.n	800a11a <_vfiprintf_r+0x176>
 800a100:	7863      	ldrb	r3, [r4, #1]
 800a102:	2b2a      	cmp	r3, #42	; 0x2a
 800a104:	d135      	bne.n	800a172 <_vfiprintf_r+0x1ce>
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	3402      	adds	r4, #2
 800a10a:	1d1a      	adds	r2, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9203      	str	r2, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfb8      	it	lt
 800a114:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a118:	9305      	str	r3, [sp, #20]
 800a11a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a1f4 <_vfiprintf_r+0x250>
 800a11e:	2203      	movs	r2, #3
 800a120:	4650      	mov	r0, sl
 800a122:	7821      	ldrb	r1, [r4, #0]
 800a124:	f7ff fa2a 	bl	800957c <memchr>
 800a128:	b140      	cbz	r0, 800a13c <_vfiprintf_r+0x198>
 800a12a:	2340      	movs	r3, #64	; 0x40
 800a12c:	eba0 000a 	sub.w	r0, r0, sl
 800a130:	fa03 f000 	lsl.w	r0, r3, r0
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	3401      	adds	r4, #1
 800a138:	4303      	orrs	r3, r0
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a140:	2206      	movs	r2, #6
 800a142:	482d      	ldr	r0, [pc, #180]	; (800a1f8 <_vfiprintf_r+0x254>)
 800a144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a148:	f7ff fa18 	bl	800957c <memchr>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d03f      	beq.n	800a1d0 <_vfiprintf_r+0x22c>
 800a150:	4b2a      	ldr	r3, [pc, #168]	; (800a1fc <_vfiprintf_r+0x258>)
 800a152:	bb1b      	cbnz	r3, 800a19c <_vfiprintf_r+0x1f8>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	3307      	adds	r3, #7
 800a158:	f023 0307 	bic.w	r3, r3, #7
 800a15c:	3308      	adds	r3, #8
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a162:	443b      	add	r3, r7
 800a164:	9309      	str	r3, [sp, #36]	; 0x24
 800a166:	e767      	b.n	800a038 <_vfiprintf_r+0x94>
 800a168:	460c      	mov	r4, r1
 800a16a:	2001      	movs	r0, #1
 800a16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a170:	e7a5      	b.n	800a0be <_vfiprintf_r+0x11a>
 800a172:	2300      	movs	r3, #0
 800a174:	f04f 0c0a 	mov.w	ip, #10
 800a178:	4619      	mov	r1, r3
 800a17a:	3401      	adds	r4, #1
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	4620      	mov	r0, r4
 800a180:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a184:	3a30      	subs	r2, #48	; 0x30
 800a186:	2a09      	cmp	r2, #9
 800a188:	d903      	bls.n	800a192 <_vfiprintf_r+0x1ee>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0c5      	beq.n	800a11a <_vfiprintf_r+0x176>
 800a18e:	9105      	str	r1, [sp, #20]
 800a190:	e7c3      	b.n	800a11a <_vfiprintf_r+0x176>
 800a192:	4604      	mov	r4, r0
 800a194:	2301      	movs	r3, #1
 800a196:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19a:	e7f0      	b.n	800a17e <_vfiprintf_r+0x1da>
 800a19c:	ab03      	add	r3, sp, #12
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	4b16      	ldr	r3, [pc, #88]	; (800a200 <_vfiprintf_r+0x25c>)
 800a1a6:	a904      	add	r1, sp, #16
 800a1a8:	f7fd ffa0 	bl	80080ec <_printf_float>
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	1c78      	adds	r0, r7, #1
 800a1b0:	d1d6      	bne.n	800a160 <_vfiprintf_r+0x1bc>
 800a1b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1b4:	07d9      	lsls	r1, r3, #31
 800a1b6:	d405      	bmi.n	800a1c4 <_vfiprintf_r+0x220>
 800a1b8:	89ab      	ldrh	r3, [r5, #12]
 800a1ba:	059a      	lsls	r2, r3, #22
 800a1bc:	d402      	bmi.n	800a1c4 <_vfiprintf_r+0x220>
 800a1be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1c0:	f000 faab 	bl	800a71a <__retarget_lock_release_recursive>
 800a1c4:	89ab      	ldrh	r3, [r5, #12]
 800a1c6:	065b      	lsls	r3, r3, #25
 800a1c8:	f53f af12 	bmi.w	8009ff0 <_vfiprintf_r+0x4c>
 800a1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ce:	e711      	b.n	8009ff4 <_vfiprintf_r+0x50>
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	4b09      	ldr	r3, [pc, #36]	; (800a200 <_vfiprintf_r+0x25c>)
 800a1da:	a904      	add	r1, sp, #16
 800a1dc:	f7fe fa22 	bl	8008624 <_printf_i>
 800a1e0:	e7e4      	b.n	800a1ac <_vfiprintf_r+0x208>
 800a1e2:	bf00      	nop
 800a1e4:	0800adac 	.word	0x0800adac
 800a1e8:	0800adcc 	.word	0x0800adcc
 800a1ec:	0800ad8c 	.word	0x0800ad8c
 800a1f0:	0800ac7a 	.word	0x0800ac7a
 800a1f4:	0800ac80 	.word	0x0800ac80
 800a1f8:	0800ac84 	.word	0x0800ac84
 800a1fc:	080080ed 	.word	0x080080ed
 800a200:	08009f7f 	.word	0x08009f7f

0800a204 <__swbuf_r>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	460e      	mov	r6, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	4605      	mov	r5, r0
 800a20c:	b118      	cbz	r0, 800a216 <__swbuf_r+0x12>
 800a20e:	6983      	ldr	r3, [r0, #24]
 800a210:	b90b      	cbnz	r3, 800a216 <__swbuf_r+0x12>
 800a212:	f000 f9e3 	bl	800a5dc <__sinit>
 800a216:	4b21      	ldr	r3, [pc, #132]	; (800a29c <__swbuf_r+0x98>)
 800a218:	429c      	cmp	r4, r3
 800a21a:	d12b      	bne.n	800a274 <__swbuf_r+0x70>
 800a21c:	686c      	ldr	r4, [r5, #4]
 800a21e:	69a3      	ldr	r3, [r4, #24]
 800a220:	60a3      	str	r3, [r4, #8]
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	071a      	lsls	r2, r3, #28
 800a226:	d52f      	bpl.n	800a288 <__swbuf_r+0x84>
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	b36b      	cbz	r3, 800a288 <__swbuf_r+0x84>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	b2f6      	uxtb	r6, r6
 800a232:	1ac0      	subs	r0, r0, r3
 800a234:	6963      	ldr	r3, [r4, #20]
 800a236:	4637      	mov	r7, r6
 800a238:	4283      	cmp	r3, r0
 800a23a:	dc04      	bgt.n	800a246 <__swbuf_r+0x42>
 800a23c:	4621      	mov	r1, r4
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 f938 	bl	800a4b4 <_fflush_r>
 800a244:	bb30      	cbnz	r0, 800a294 <__swbuf_r+0x90>
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	3001      	adds	r0, #1
 800a24a:	3b01      	subs	r3, #1
 800a24c:	60a3      	str	r3, [r4, #8]
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	6022      	str	r2, [r4, #0]
 800a254:	701e      	strb	r6, [r3, #0]
 800a256:	6963      	ldr	r3, [r4, #20]
 800a258:	4283      	cmp	r3, r0
 800a25a:	d004      	beq.n	800a266 <__swbuf_r+0x62>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	07db      	lsls	r3, r3, #31
 800a260:	d506      	bpl.n	800a270 <__swbuf_r+0x6c>
 800a262:	2e0a      	cmp	r6, #10
 800a264:	d104      	bne.n	800a270 <__swbuf_r+0x6c>
 800a266:	4621      	mov	r1, r4
 800a268:	4628      	mov	r0, r5
 800a26a:	f000 f923 	bl	800a4b4 <_fflush_r>
 800a26e:	b988      	cbnz	r0, 800a294 <__swbuf_r+0x90>
 800a270:	4638      	mov	r0, r7
 800a272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a274:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <__swbuf_r+0x9c>)
 800a276:	429c      	cmp	r4, r3
 800a278:	d101      	bne.n	800a27e <__swbuf_r+0x7a>
 800a27a:	68ac      	ldr	r4, [r5, #8]
 800a27c:	e7cf      	b.n	800a21e <__swbuf_r+0x1a>
 800a27e:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <__swbuf_r+0xa0>)
 800a280:	429c      	cmp	r4, r3
 800a282:	bf08      	it	eq
 800a284:	68ec      	ldreq	r4, [r5, #12]
 800a286:	e7ca      	b.n	800a21e <__swbuf_r+0x1a>
 800a288:	4621      	mov	r1, r4
 800a28a:	4628      	mov	r0, r5
 800a28c:	f000 f81a 	bl	800a2c4 <__swsetup_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	d0cb      	beq.n	800a22c <__swbuf_r+0x28>
 800a294:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a298:	e7ea      	b.n	800a270 <__swbuf_r+0x6c>
 800a29a:	bf00      	nop
 800a29c:	0800adac 	.word	0x0800adac
 800a2a0:	0800adcc 	.word	0x0800adcc
 800a2a4:	0800ad8c 	.word	0x0800ad8c

0800a2a8 <__ascii_wctomb>:
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	b141      	cbz	r1, 800a2c0 <__ascii_wctomb+0x18>
 800a2ae:	2aff      	cmp	r2, #255	; 0xff
 800a2b0:	d904      	bls.n	800a2bc <__ascii_wctomb+0x14>
 800a2b2:	228a      	movs	r2, #138	; 0x8a
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	4770      	bx	lr
 800a2bc:	2001      	movs	r0, #1
 800a2be:	700a      	strb	r2, [r1, #0]
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <__swsetup_r>:
 800a2c4:	4b32      	ldr	r3, [pc, #200]	; (800a390 <__swsetup_r+0xcc>)
 800a2c6:	b570      	push	{r4, r5, r6, lr}
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	b125      	cbz	r5, 800a2da <__swsetup_r+0x16>
 800a2d0:	69ab      	ldr	r3, [r5, #24]
 800a2d2:	b913      	cbnz	r3, 800a2da <__swsetup_r+0x16>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f981 	bl	800a5dc <__sinit>
 800a2da:	4b2e      	ldr	r3, [pc, #184]	; (800a394 <__swsetup_r+0xd0>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d10f      	bne.n	800a300 <__swsetup_r+0x3c>
 800a2e0:	686c      	ldr	r4, [r5, #4]
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2e8:	0719      	lsls	r1, r3, #28
 800a2ea:	d42c      	bmi.n	800a346 <__swsetup_r+0x82>
 800a2ec:	06dd      	lsls	r5, r3, #27
 800a2ee:	d411      	bmi.n	800a314 <__swsetup_r+0x50>
 800a2f0:	2309      	movs	r3, #9
 800a2f2:	6033      	str	r3, [r6, #0]
 800a2f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	e03e      	b.n	800a37e <__swsetup_r+0xba>
 800a300:	4b25      	ldr	r3, [pc, #148]	; (800a398 <__swsetup_r+0xd4>)
 800a302:	429c      	cmp	r4, r3
 800a304:	d101      	bne.n	800a30a <__swsetup_r+0x46>
 800a306:	68ac      	ldr	r4, [r5, #8]
 800a308:	e7eb      	b.n	800a2e2 <__swsetup_r+0x1e>
 800a30a:	4b24      	ldr	r3, [pc, #144]	; (800a39c <__swsetup_r+0xd8>)
 800a30c:	429c      	cmp	r4, r3
 800a30e:	bf08      	it	eq
 800a310:	68ec      	ldreq	r4, [r5, #12]
 800a312:	e7e6      	b.n	800a2e2 <__swsetup_r+0x1e>
 800a314:	0758      	lsls	r0, r3, #29
 800a316:	d512      	bpl.n	800a33e <__swsetup_r+0x7a>
 800a318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a31a:	b141      	cbz	r1, 800a32e <__swsetup_r+0x6a>
 800a31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a320:	4299      	cmp	r1, r3
 800a322:	d002      	beq.n	800a32a <__swsetup_r+0x66>
 800a324:	4630      	mov	r0, r6
 800a326:	f7ff fcdb 	bl	8009ce0 <_free_r>
 800a32a:	2300      	movs	r3, #0
 800a32c:	6363      	str	r3, [r4, #52]	; 0x34
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	2300      	movs	r3, #0
 800a338:	6063      	str	r3, [r4, #4]
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f043 0308 	orr.w	r3, r3, #8
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	b94b      	cbnz	r3, 800a35e <__swsetup_r+0x9a>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a354:	d003      	beq.n	800a35e <__swsetup_r+0x9a>
 800a356:	4621      	mov	r1, r4
 800a358:	4630      	mov	r0, r6
 800a35a:	f000 fa05 	bl	800a768 <__smakebuf_r>
 800a35e:	89a0      	ldrh	r0, [r4, #12]
 800a360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a364:	f010 0301 	ands.w	r3, r0, #1
 800a368:	d00a      	beq.n	800a380 <__swsetup_r+0xbc>
 800a36a:	2300      	movs	r3, #0
 800a36c:	60a3      	str	r3, [r4, #8]
 800a36e:	6963      	ldr	r3, [r4, #20]
 800a370:	425b      	negs	r3, r3
 800a372:	61a3      	str	r3, [r4, #24]
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	b943      	cbnz	r3, 800a38a <__swsetup_r+0xc6>
 800a378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a37c:	d1ba      	bne.n	800a2f4 <__swsetup_r+0x30>
 800a37e:	bd70      	pop	{r4, r5, r6, pc}
 800a380:	0781      	lsls	r1, r0, #30
 800a382:	bf58      	it	pl
 800a384:	6963      	ldrpl	r3, [r4, #20]
 800a386:	60a3      	str	r3, [r4, #8]
 800a388:	e7f4      	b.n	800a374 <__swsetup_r+0xb0>
 800a38a:	2000      	movs	r0, #0
 800a38c:	e7f7      	b.n	800a37e <__swsetup_r+0xba>
 800a38e:	bf00      	nop
 800a390:	200000b8 	.word	0x200000b8
 800a394:	0800adac 	.word	0x0800adac
 800a398:	0800adcc 	.word	0x0800adcc
 800a39c:	0800ad8c 	.word	0x0800ad8c

0800a3a0 <abort>:
 800a3a0:	2006      	movs	r0, #6
 800a3a2:	b508      	push	{r3, lr}
 800a3a4:	f000 fa48 	bl	800a838 <raise>
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f7f8 fcf6 	bl	8002d9a <_exit>
	...

0800a3b0 <__sflush_r>:
 800a3b0:	898a      	ldrh	r2, [r1, #12]
 800a3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	0710      	lsls	r0, r2, #28
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	d457      	bmi.n	800a46c <__sflush_r+0xbc>
 800a3bc:	684b      	ldr	r3, [r1, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dc04      	bgt.n	800a3cc <__sflush_r+0x1c>
 800a3c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dc01      	bgt.n	800a3cc <__sflush_r+0x1c>
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ce:	2e00      	cmp	r6, #0
 800a3d0:	d0fa      	beq.n	800a3c8 <__sflush_r+0x18>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3d8:	682f      	ldr	r7, [r5, #0]
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	d032      	beq.n	800a444 <__sflush_r+0x94>
 800a3de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	075a      	lsls	r2, r3, #29
 800a3e4:	d505      	bpl.n	800a3f2 <__sflush_r+0x42>
 800a3e6:	6863      	ldr	r3, [r4, #4]
 800a3e8:	1ac0      	subs	r0, r0, r3
 800a3ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3ec:	b10b      	cbz	r3, 800a3f2 <__sflush_r+0x42>
 800a3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3f0:	1ac0      	subs	r0, r0, r3
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	6a21      	ldr	r1, [r4, #32]
 800a3fc:	47b0      	blx	r6
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	d106      	bne.n	800a412 <__sflush_r+0x62>
 800a404:	6829      	ldr	r1, [r5, #0]
 800a406:	291d      	cmp	r1, #29
 800a408:	d82c      	bhi.n	800a464 <__sflush_r+0xb4>
 800a40a:	4a29      	ldr	r2, [pc, #164]	; (800a4b0 <__sflush_r+0x100>)
 800a40c:	40ca      	lsrs	r2, r1
 800a40e:	07d6      	lsls	r6, r2, #31
 800a410:	d528      	bpl.n	800a464 <__sflush_r+0xb4>
 800a412:	2200      	movs	r2, #0
 800a414:	6062      	str	r2, [r4, #4]
 800a416:	6922      	ldr	r2, [r4, #16]
 800a418:	04d9      	lsls	r1, r3, #19
 800a41a:	6022      	str	r2, [r4, #0]
 800a41c:	d504      	bpl.n	800a428 <__sflush_r+0x78>
 800a41e:	1c42      	adds	r2, r0, #1
 800a420:	d101      	bne.n	800a426 <__sflush_r+0x76>
 800a422:	682b      	ldr	r3, [r5, #0]
 800a424:	b903      	cbnz	r3, 800a428 <__sflush_r+0x78>
 800a426:	6560      	str	r0, [r4, #84]	; 0x54
 800a428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a42a:	602f      	str	r7, [r5, #0]
 800a42c:	2900      	cmp	r1, #0
 800a42e:	d0cb      	beq.n	800a3c8 <__sflush_r+0x18>
 800a430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a434:	4299      	cmp	r1, r3
 800a436:	d002      	beq.n	800a43e <__sflush_r+0x8e>
 800a438:	4628      	mov	r0, r5
 800a43a:	f7ff fc51 	bl	8009ce0 <_free_r>
 800a43e:	2000      	movs	r0, #0
 800a440:	6360      	str	r0, [r4, #52]	; 0x34
 800a442:	e7c2      	b.n	800a3ca <__sflush_r+0x1a>
 800a444:	6a21      	ldr	r1, [r4, #32]
 800a446:	2301      	movs	r3, #1
 800a448:	4628      	mov	r0, r5
 800a44a:	47b0      	blx	r6
 800a44c:	1c41      	adds	r1, r0, #1
 800a44e:	d1c7      	bne.n	800a3e0 <__sflush_r+0x30>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0c4      	beq.n	800a3e0 <__sflush_r+0x30>
 800a456:	2b1d      	cmp	r3, #29
 800a458:	d001      	beq.n	800a45e <__sflush_r+0xae>
 800a45a:	2b16      	cmp	r3, #22
 800a45c:	d101      	bne.n	800a462 <__sflush_r+0xb2>
 800a45e:	602f      	str	r7, [r5, #0]
 800a460:	e7b2      	b.n	800a3c8 <__sflush_r+0x18>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a468:	81a3      	strh	r3, [r4, #12]
 800a46a:	e7ae      	b.n	800a3ca <__sflush_r+0x1a>
 800a46c:	690f      	ldr	r7, [r1, #16]
 800a46e:	2f00      	cmp	r7, #0
 800a470:	d0aa      	beq.n	800a3c8 <__sflush_r+0x18>
 800a472:	0793      	lsls	r3, r2, #30
 800a474:	bf18      	it	ne
 800a476:	2300      	movne	r3, #0
 800a478:	680e      	ldr	r6, [r1, #0]
 800a47a:	bf08      	it	eq
 800a47c:	694b      	ldreq	r3, [r1, #20]
 800a47e:	1bf6      	subs	r6, r6, r7
 800a480:	600f      	str	r7, [r1, #0]
 800a482:	608b      	str	r3, [r1, #8]
 800a484:	2e00      	cmp	r6, #0
 800a486:	dd9f      	ble.n	800a3c8 <__sflush_r+0x18>
 800a488:	4633      	mov	r3, r6
 800a48a:	463a      	mov	r2, r7
 800a48c:	4628      	mov	r0, r5
 800a48e:	6a21      	ldr	r1, [r4, #32]
 800a490:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a494:	47e0      	blx	ip
 800a496:	2800      	cmp	r0, #0
 800a498:	dc06      	bgt.n	800a4a8 <__sflush_r+0xf8>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a4:	81a3      	strh	r3, [r4, #12]
 800a4a6:	e790      	b.n	800a3ca <__sflush_r+0x1a>
 800a4a8:	4407      	add	r7, r0
 800a4aa:	1a36      	subs	r6, r6, r0
 800a4ac:	e7ea      	b.n	800a484 <__sflush_r+0xd4>
 800a4ae:	bf00      	nop
 800a4b0:	20400001 	.word	0x20400001

0800a4b4 <_fflush_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	690b      	ldr	r3, [r1, #16]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b913      	cbnz	r3, 800a4c4 <_fflush_r+0x10>
 800a4be:	2500      	movs	r5, #0
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	b118      	cbz	r0, 800a4ce <_fflush_r+0x1a>
 800a4c6:	6983      	ldr	r3, [r0, #24]
 800a4c8:	b90b      	cbnz	r3, 800a4ce <_fflush_r+0x1a>
 800a4ca:	f000 f887 	bl	800a5dc <__sinit>
 800a4ce:	4b14      	ldr	r3, [pc, #80]	; (800a520 <_fflush_r+0x6c>)
 800a4d0:	429c      	cmp	r4, r3
 800a4d2:	d11b      	bne.n	800a50c <_fflush_r+0x58>
 800a4d4:	686c      	ldr	r4, [r5, #4]
 800a4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0ef      	beq.n	800a4be <_fflush_r+0xa>
 800a4de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4e0:	07d0      	lsls	r0, r2, #31
 800a4e2:	d404      	bmi.n	800a4ee <_fflush_r+0x3a>
 800a4e4:	0599      	lsls	r1, r3, #22
 800a4e6:	d402      	bmi.n	800a4ee <_fflush_r+0x3a>
 800a4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ea:	f000 f915 	bl	800a718 <__retarget_lock_acquire_recursive>
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	f7ff ff5d 	bl	800a3b0 <__sflush_r>
 800a4f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	07da      	lsls	r2, r3, #31
 800a4fc:	d4e0      	bmi.n	800a4c0 <_fflush_r+0xc>
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	059b      	lsls	r3, r3, #22
 800a502:	d4dd      	bmi.n	800a4c0 <_fflush_r+0xc>
 800a504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a506:	f000 f908 	bl	800a71a <__retarget_lock_release_recursive>
 800a50a:	e7d9      	b.n	800a4c0 <_fflush_r+0xc>
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <_fflush_r+0x70>)
 800a50e:	429c      	cmp	r4, r3
 800a510:	d101      	bne.n	800a516 <_fflush_r+0x62>
 800a512:	68ac      	ldr	r4, [r5, #8]
 800a514:	e7df      	b.n	800a4d6 <_fflush_r+0x22>
 800a516:	4b04      	ldr	r3, [pc, #16]	; (800a528 <_fflush_r+0x74>)
 800a518:	429c      	cmp	r4, r3
 800a51a:	bf08      	it	eq
 800a51c:	68ec      	ldreq	r4, [r5, #12]
 800a51e:	e7da      	b.n	800a4d6 <_fflush_r+0x22>
 800a520:	0800adac 	.word	0x0800adac
 800a524:	0800adcc 	.word	0x0800adcc
 800a528:	0800ad8c 	.word	0x0800ad8c

0800a52c <std>:
 800a52c:	2300      	movs	r3, #0
 800a52e:	b510      	push	{r4, lr}
 800a530:	4604      	mov	r4, r0
 800a532:	e9c0 3300 	strd	r3, r3, [r0]
 800a536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a53a:	6083      	str	r3, [r0, #8]
 800a53c:	8181      	strh	r1, [r0, #12]
 800a53e:	6643      	str	r3, [r0, #100]	; 0x64
 800a540:	81c2      	strh	r2, [r0, #14]
 800a542:	6183      	str	r3, [r0, #24]
 800a544:	4619      	mov	r1, r3
 800a546:	2208      	movs	r2, #8
 800a548:	305c      	adds	r0, #92	; 0x5c
 800a54a:	f7fd fd29 	bl	8007fa0 <memset>
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <std+0x38>)
 800a550:	6224      	str	r4, [r4, #32]
 800a552:	6263      	str	r3, [r4, #36]	; 0x24
 800a554:	4b04      	ldr	r3, [pc, #16]	; (800a568 <std+0x3c>)
 800a556:	62a3      	str	r3, [r4, #40]	; 0x28
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <std+0x40>)
 800a55a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a55c:	4b04      	ldr	r3, [pc, #16]	; (800a570 <std+0x44>)
 800a55e:	6323      	str	r3, [r4, #48]	; 0x30
 800a560:	bd10      	pop	{r4, pc}
 800a562:	bf00      	nop
 800a564:	0800a871 	.word	0x0800a871
 800a568:	0800a893 	.word	0x0800a893
 800a56c:	0800a8cb 	.word	0x0800a8cb
 800a570:	0800a8ef 	.word	0x0800a8ef

0800a574 <_cleanup_r>:
 800a574:	4901      	ldr	r1, [pc, #4]	; (800a57c <_cleanup_r+0x8>)
 800a576:	f000 b8af 	b.w	800a6d8 <_fwalk_reent>
 800a57a:	bf00      	nop
 800a57c:	0800a4b5 	.word	0x0800a4b5

0800a580 <__sfmoreglue>:
 800a580:	2268      	movs	r2, #104	; 0x68
 800a582:	b570      	push	{r4, r5, r6, lr}
 800a584:	1e4d      	subs	r5, r1, #1
 800a586:	4355      	muls	r5, r2
 800a588:	460e      	mov	r6, r1
 800a58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a58e:	f7ff fc0f 	bl	8009db0 <_malloc_r>
 800a592:	4604      	mov	r4, r0
 800a594:	b140      	cbz	r0, 800a5a8 <__sfmoreglue+0x28>
 800a596:	2100      	movs	r1, #0
 800a598:	e9c0 1600 	strd	r1, r6, [r0]
 800a59c:	300c      	adds	r0, #12
 800a59e:	60a0      	str	r0, [r4, #8]
 800a5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5a4:	f7fd fcfc 	bl	8007fa0 <memset>
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}

0800a5ac <__sfp_lock_acquire>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	; (800a5b4 <__sfp_lock_acquire+0x8>)
 800a5ae:	f000 b8b3 	b.w	800a718 <__retarget_lock_acquire_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	200004b5 	.word	0x200004b5

0800a5b8 <__sfp_lock_release>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	; (800a5c0 <__sfp_lock_release+0x8>)
 800a5ba:	f000 b8ae 	b.w	800a71a <__retarget_lock_release_recursive>
 800a5be:	bf00      	nop
 800a5c0:	200004b5 	.word	0x200004b5

0800a5c4 <__sinit_lock_acquire>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	; (800a5cc <__sinit_lock_acquire+0x8>)
 800a5c6:	f000 b8a7 	b.w	800a718 <__retarget_lock_acquire_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	200004b6 	.word	0x200004b6

0800a5d0 <__sinit_lock_release>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__sinit_lock_release+0x8>)
 800a5d2:	f000 b8a2 	b.w	800a71a <__retarget_lock_release_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	200004b6 	.word	0x200004b6

0800a5dc <__sinit>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	4604      	mov	r4, r0
 800a5e0:	f7ff fff0 	bl	800a5c4 <__sinit_lock_acquire>
 800a5e4:	69a3      	ldr	r3, [r4, #24]
 800a5e6:	b11b      	cbz	r3, 800a5f0 <__sinit+0x14>
 800a5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ec:	f7ff bff0 	b.w	800a5d0 <__sinit_lock_release>
 800a5f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a5f6:	4b13      	ldr	r3, [pc, #76]	; (800a644 <__sinit+0x68>)
 800a5f8:	4a13      	ldr	r2, [pc, #76]	; (800a648 <__sinit+0x6c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	bf08      	it	eq
 800a602:	2301      	moveq	r3, #1
 800a604:	4620      	mov	r0, r4
 800a606:	bf08      	it	eq
 800a608:	61a3      	streq	r3, [r4, #24]
 800a60a:	f000 f81f 	bl	800a64c <__sfp>
 800a60e:	6060      	str	r0, [r4, #4]
 800a610:	4620      	mov	r0, r4
 800a612:	f000 f81b 	bl	800a64c <__sfp>
 800a616:	60a0      	str	r0, [r4, #8]
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 f817 	bl	800a64c <__sfp>
 800a61e:	2200      	movs	r2, #0
 800a620:	2104      	movs	r1, #4
 800a622:	60e0      	str	r0, [r4, #12]
 800a624:	6860      	ldr	r0, [r4, #4]
 800a626:	f7ff ff81 	bl	800a52c <std>
 800a62a:	2201      	movs	r2, #1
 800a62c:	2109      	movs	r1, #9
 800a62e:	68a0      	ldr	r0, [r4, #8]
 800a630:	f7ff ff7c 	bl	800a52c <std>
 800a634:	2202      	movs	r2, #2
 800a636:	2112      	movs	r1, #18
 800a638:	68e0      	ldr	r0, [r4, #12]
 800a63a:	f7ff ff77 	bl	800a52c <std>
 800a63e:	2301      	movs	r3, #1
 800a640:	61a3      	str	r3, [r4, #24]
 800a642:	e7d1      	b.n	800a5e8 <__sinit+0xc>
 800a644:	0800aa14 	.word	0x0800aa14
 800a648:	0800a575 	.word	0x0800a575

0800a64c <__sfp>:
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64e:	4607      	mov	r7, r0
 800a650:	f7ff ffac 	bl	800a5ac <__sfp_lock_acquire>
 800a654:	4b1e      	ldr	r3, [pc, #120]	; (800a6d0 <__sfp+0x84>)
 800a656:	681e      	ldr	r6, [r3, #0]
 800a658:	69b3      	ldr	r3, [r6, #24]
 800a65a:	b913      	cbnz	r3, 800a662 <__sfp+0x16>
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff ffbd 	bl	800a5dc <__sinit>
 800a662:	3648      	adds	r6, #72	; 0x48
 800a664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	d503      	bpl.n	800a674 <__sfp+0x28>
 800a66c:	6833      	ldr	r3, [r6, #0]
 800a66e:	b30b      	cbz	r3, 800a6b4 <__sfp+0x68>
 800a670:	6836      	ldr	r6, [r6, #0]
 800a672:	e7f7      	b.n	800a664 <__sfp+0x18>
 800a674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a678:	b9d5      	cbnz	r5, 800a6b0 <__sfp+0x64>
 800a67a:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <__sfp+0x88>)
 800a67c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a680:	60e3      	str	r3, [r4, #12]
 800a682:	6665      	str	r5, [r4, #100]	; 0x64
 800a684:	f000 f847 	bl	800a716 <__retarget_lock_init_recursive>
 800a688:	f7ff ff96 	bl	800a5b8 <__sfp_lock_release>
 800a68c:	2208      	movs	r2, #8
 800a68e:	4629      	mov	r1, r5
 800a690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a698:	6025      	str	r5, [r4, #0]
 800a69a:	61a5      	str	r5, [r4, #24]
 800a69c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6a0:	f7fd fc7e 	bl	8007fa0 <memset>
 800a6a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b0:	3468      	adds	r4, #104	; 0x68
 800a6b2:	e7d9      	b.n	800a668 <__sfp+0x1c>
 800a6b4:	2104      	movs	r1, #4
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7ff ff62 	bl	800a580 <__sfmoreglue>
 800a6bc:	4604      	mov	r4, r0
 800a6be:	6030      	str	r0, [r6, #0]
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1d5      	bne.n	800a670 <__sfp+0x24>
 800a6c4:	f7ff ff78 	bl	800a5b8 <__sfp_lock_release>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	e7ee      	b.n	800a6ac <__sfp+0x60>
 800a6ce:	bf00      	nop
 800a6d0:	0800aa14 	.word	0x0800aa14
 800a6d4:	ffff0001 	.word	0xffff0001

0800a6d8 <_fwalk_reent>:
 800a6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6dc:	4606      	mov	r6, r0
 800a6de:	4688      	mov	r8, r1
 800a6e0:	2700      	movs	r7, #0
 800a6e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6ea:	f1b9 0901 	subs.w	r9, r9, #1
 800a6ee:	d505      	bpl.n	800a6fc <_fwalk_reent+0x24>
 800a6f0:	6824      	ldr	r4, [r4, #0]
 800a6f2:	2c00      	cmp	r4, #0
 800a6f4:	d1f7      	bne.n	800a6e6 <_fwalk_reent+0xe>
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fc:	89ab      	ldrh	r3, [r5, #12]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d907      	bls.n	800a712 <_fwalk_reent+0x3a>
 800a702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a706:	3301      	adds	r3, #1
 800a708:	d003      	beq.n	800a712 <_fwalk_reent+0x3a>
 800a70a:	4629      	mov	r1, r5
 800a70c:	4630      	mov	r0, r6
 800a70e:	47c0      	blx	r8
 800a710:	4307      	orrs	r7, r0
 800a712:	3568      	adds	r5, #104	; 0x68
 800a714:	e7e9      	b.n	800a6ea <_fwalk_reent+0x12>

0800a716 <__retarget_lock_init_recursive>:
 800a716:	4770      	bx	lr

0800a718 <__retarget_lock_acquire_recursive>:
 800a718:	4770      	bx	lr

0800a71a <__retarget_lock_release_recursive>:
 800a71a:	4770      	bx	lr

0800a71c <__swhatbuf_r>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	460e      	mov	r6, r1
 800a720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a724:	4614      	mov	r4, r2
 800a726:	2900      	cmp	r1, #0
 800a728:	461d      	mov	r5, r3
 800a72a:	b096      	sub	sp, #88	; 0x58
 800a72c:	da08      	bge.n	800a740 <__swhatbuf_r+0x24>
 800a72e:	2200      	movs	r2, #0
 800a730:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a734:	602a      	str	r2, [r5, #0]
 800a736:	061a      	lsls	r2, r3, #24
 800a738:	d410      	bmi.n	800a75c <__swhatbuf_r+0x40>
 800a73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73e:	e00e      	b.n	800a75e <__swhatbuf_r+0x42>
 800a740:	466a      	mov	r2, sp
 800a742:	f000 f8fb 	bl	800a93c <_fstat_r>
 800a746:	2800      	cmp	r0, #0
 800a748:	dbf1      	blt.n	800a72e <__swhatbuf_r+0x12>
 800a74a:	9a01      	ldr	r2, [sp, #4]
 800a74c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a750:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a754:	425a      	negs	r2, r3
 800a756:	415a      	adcs	r2, r3
 800a758:	602a      	str	r2, [r5, #0]
 800a75a:	e7ee      	b.n	800a73a <__swhatbuf_r+0x1e>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	2000      	movs	r0, #0
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	b016      	add	sp, #88	; 0x58
 800a764:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a768 <__smakebuf_r>:
 800a768:	898b      	ldrh	r3, [r1, #12]
 800a76a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a76c:	079d      	lsls	r5, r3, #30
 800a76e:	4606      	mov	r6, r0
 800a770:	460c      	mov	r4, r1
 800a772:	d507      	bpl.n	800a784 <__smakebuf_r+0x1c>
 800a774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	2301      	movs	r3, #1
 800a77e:	6163      	str	r3, [r4, #20]
 800a780:	b002      	add	sp, #8
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	466a      	mov	r2, sp
 800a786:	ab01      	add	r3, sp, #4
 800a788:	f7ff ffc8 	bl	800a71c <__swhatbuf_r>
 800a78c:	9900      	ldr	r1, [sp, #0]
 800a78e:	4605      	mov	r5, r0
 800a790:	4630      	mov	r0, r6
 800a792:	f7ff fb0d 	bl	8009db0 <_malloc_r>
 800a796:	b948      	cbnz	r0, 800a7ac <__smakebuf_r+0x44>
 800a798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a79c:	059a      	lsls	r2, r3, #22
 800a79e:	d4ef      	bmi.n	800a780 <__smakebuf_r+0x18>
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	f043 0302 	orr.w	r3, r3, #2
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	e7e3      	b.n	800a774 <__smakebuf_r+0xc>
 800a7ac:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <__smakebuf_r+0x7c>)
 800a7ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	6020      	str	r0, [r4, #0]
 800a7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b8:	81a3      	strh	r3, [r4, #12]
 800a7ba:	9b00      	ldr	r3, [sp, #0]
 800a7bc:	6120      	str	r0, [r4, #16]
 800a7be:	6163      	str	r3, [r4, #20]
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	b15b      	cbz	r3, 800a7dc <__smakebuf_r+0x74>
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7ca:	f000 f8c9 	bl	800a960 <_isatty_r>
 800a7ce:	b128      	cbz	r0, 800a7dc <__smakebuf_r+0x74>
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	f023 0303 	bic.w	r3, r3, #3
 800a7d6:	f043 0301 	orr.w	r3, r3, #1
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	89a0      	ldrh	r0, [r4, #12]
 800a7de:	4305      	orrs	r5, r0
 800a7e0:	81a5      	strh	r5, [r4, #12]
 800a7e2:	e7cd      	b.n	800a780 <__smakebuf_r+0x18>
 800a7e4:	0800a575 	.word	0x0800a575

0800a7e8 <_raise_r>:
 800a7e8:	291f      	cmp	r1, #31
 800a7ea:	b538      	push	{r3, r4, r5, lr}
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	d904      	bls.n	800a7fc <_raise_r+0x14>
 800a7f2:	2316      	movs	r3, #22
 800a7f4:	6003      	str	r3, [r0, #0]
 800a7f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7fe:	b112      	cbz	r2, 800a806 <_raise_r+0x1e>
 800a800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a804:	b94b      	cbnz	r3, 800a81a <_raise_r+0x32>
 800a806:	4620      	mov	r0, r4
 800a808:	f000 f830 	bl	800a86c <_getpid_r>
 800a80c:	462a      	mov	r2, r5
 800a80e:	4601      	mov	r1, r0
 800a810:	4620      	mov	r0, r4
 800a812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a816:	f000 b817 	b.w	800a848 <_kill_r>
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d00a      	beq.n	800a834 <_raise_r+0x4c>
 800a81e:	1c59      	adds	r1, r3, #1
 800a820:	d103      	bne.n	800a82a <_raise_r+0x42>
 800a822:	2316      	movs	r3, #22
 800a824:	6003      	str	r3, [r0, #0]
 800a826:	2001      	movs	r0, #1
 800a828:	e7e7      	b.n	800a7fa <_raise_r+0x12>
 800a82a:	2400      	movs	r4, #0
 800a82c:	4628      	mov	r0, r5
 800a82e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a832:	4798      	blx	r3
 800a834:	2000      	movs	r0, #0
 800a836:	e7e0      	b.n	800a7fa <_raise_r+0x12>

0800a838 <raise>:
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <raise+0xc>)
 800a83a:	4601      	mov	r1, r0
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	f7ff bfd3 	b.w	800a7e8 <_raise_r>
 800a842:	bf00      	nop
 800a844:	200000b8 	.word	0x200000b8

0800a848 <_kill_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	2300      	movs	r3, #0
 800a84c:	4d06      	ldr	r5, [pc, #24]	; (800a868 <_kill_r+0x20>)
 800a84e:	4604      	mov	r4, r0
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	f7f8 fa90 	bl	8002d7a <_kill>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	d102      	bne.n	800a864 <_kill_r+0x1c>
 800a85e:	682b      	ldr	r3, [r5, #0]
 800a860:	b103      	cbz	r3, 800a864 <_kill_r+0x1c>
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	bf00      	nop
 800a868:	200004b0 	.word	0x200004b0

0800a86c <_getpid_r>:
 800a86c:	f7f8 ba7e 	b.w	8002d6c <_getpid>

0800a870 <__sread>:
 800a870:	b510      	push	{r4, lr}
 800a872:	460c      	mov	r4, r1
 800a874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a878:	f000 f894 	bl	800a9a4 <_read_r>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	bfab      	itete	ge
 800a880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a882:	89a3      	ldrhlt	r3, [r4, #12]
 800a884:	181b      	addge	r3, r3, r0
 800a886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a88a:	bfac      	ite	ge
 800a88c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a88e:	81a3      	strhlt	r3, [r4, #12]
 800a890:	bd10      	pop	{r4, pc}

0800a892 <__swrite>:
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	461f      	mov	r7, r3
 800a898:	898b      	ldrh	r3, [r1, #12]
 800a89a:	4605      	mov	r5, r0
 800a89c:	05db      	lsls	r3, r3, #23
 800a89e:	460c      	mov	r4, r1
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	d505      	bpl.n	800a8b0 <__swrite+0x1e>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ac:	f000 f868 	bl	800a980 <_lseek_r>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	463b      	mov	r3, r7
 800a8be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c6:	f000 b817 	b.w	800a8f8 <_write_r>

0800a8ca <__sseek>:
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d2:	f000 f855 	bl	800a980 <_lseek_r>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	bf15      	itete	ne
 800a8dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8e6:	81a3      	strheq	r3, [r4, #12]
 800a8e8:	bf18      	it	ne
 800a8ea:	81a3      	strhne	r3, [r4, #12]
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <__sclose>:
 800a8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f2:	f000 b813 	b.w	800a91c <_close_r>
	...

0800a8f8 <_write_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	2200      	movs	r2, #0
 800a902:	4d05      	ldr	r5, [pc, #20]	; (800a918 <_write_r+0x20>)
 800a904:	602a      	str	r2, [r5, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	f7f8 fa6e 	bl	8002de8 <_write>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_write_r+0x1e>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_write_r+0x1e>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	200004b0 	.word	0x200004b0

0800a91c <_close_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	2300      	movs	r3, #0
 800a920:	4d05      	ldr	r5, [pc, #20]	; (800a938 <_close_r+0x1c>)
 800a922:	4604      	mov	r4, r0
 800a924:	4608      	mov	r0, r1
 800a926:	602b      	str	r3, [r5, #0]
 800a928:	f7f8 fa7a 	bl	8002e20 <_close>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	d102      	bne.n	800a936 <_close_r+0x1a>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	b103      	cbz	r3, 800a936 <_close_r+0x1a>
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	bd38      	pop	{r3, r4, r5, pc}
 800a938:	200004b0 	.word	0x200004b0

0800a93c <_fstat_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	2300      	movs	r3, #0
 800a940:	4d06      	ldr	r5, [pc, #24]	; (800a95c <_fstat_r+0x20>)
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	f7f8 fa74 	bl	8002e36 <_fstat>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d102      	bne.n	800a958 <_fstat_r+0x1c>
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	b103      	cbz	r3, 800a958 <_fstat_r+0x1c>
 800a956:	6023      	str	r3, [r4, #0]
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	bf00      	nop
 800a95c:	200004b0 	.word	0x200004b0

0800a960 <_isatty_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	2300      	movs	r3, #0
 800a964:	4d05      	ldr	r5, [pc, #20]	; (800a97c <_isatty_r+0x1c>)
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f8 fa72 	bl	8002e54 <_isatty>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_isatty_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_isatty_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	200004b0 	.word	0x200004b0

0800a980 <_lseek_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	4611      	mov	r1, r2
 800a988:	2200      	movs	r2, #0
 800a98a:	4d05      	ldr	r5, [pc, #20]	; (800a9a0 <_lseek_r+0x20>)
 800a98c:	602a      	str	r2, [r5, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7f8 fa6a 	bl	8002e68 <_lseek>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_lseek_r+0x1e>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_lseek_r+0x1e>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	200004b0 	.word	0x200004b0

0800a9a4 <_read_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4d05      	ldr	r5, [pc, #20]	; (800a9c4 <_read_r+0x20>)
 800a9b0:	602a      	str	r2, [r5, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f7f8 f9fb 	bl	8002dae <_read>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_read_r+0x1e>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_read_r+0x1e>
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	200004b0 	.word	0x200004b0

0800a9c8 <_init>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	bf00      	nop
 800a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ce:	bc08      	pop	{r3}
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	4770      	bx	lr

0800a9d4 <_fini>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	bf00      	nop
 800a9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9da:	bc08      	pop	{r3}
 800a9dc:	469e      	mov	lr, r3
 800a9de:	4770      	bx	lr
