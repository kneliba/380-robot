
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c970  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800ca80  0800ca80  0001ca80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cecc  0800cecc  00020288  2**0
                  CONTENTS
  4 .ARM          00000000  0800cecc  0800cecc  00020288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cecc  0800cecc  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cecc  0800cecc  0001cecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800ced4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000288  0800d15c  00020288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800d15c  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a01  00000000  00000000  000202b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306f  00000000  00000000  00034cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00037d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6d9  00000000  00000000  0003a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192ed  00000000  00000000  00055c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095dcb  00000000  00000000  0006ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba0  00000000  00000000  00104d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ca68 	.word	0x0800ca68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	0800ca68 	.word	0x0800ca68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <drive_forward>:

static double ARR = 40000.0;

// drive forward - speed %
void drive_forward (TIM_HandleTypeDef *htim, double speed)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_width = 1.0 + (speed/100.0);
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <drive_forward+0x84>)
 80010ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b2:	f7ff fb3b 	bl	800072c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <drive_forward+0x88>)
 80010c4:	f7ff f852 	bl	800016c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double command = (pulse_width/20.0)*ARR;
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <drive_forward+0x8c>)
 80010d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010da:	f7ff fb27 	bl	800072c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <drive_forward+0x90>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff f9f4 	bl	80004d8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	TIM2->CCR1 = command; // left
 80010f8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80010fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001100:	f7ff fcc2 	bl	8000a88 <__aeabi_d2uiz>
 8001104:	4603      	mov	r3, r0
 8001106:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = command; // right
 8001108:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800110c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001110:	f7ff fcba 	bl	8000a88 <__aeabi_d2uiz>
 8001114:	4603      	mov	r3, r0
 8001116:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001118:	bf00      	nop
 800111a:	3724      	adds	r7, #36	; 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	40590000 	.word	0x40590000
 8001124:	3ff00000 	.word	0x3ff00000
 8001128:	40340000 	.word	0x40340000
 800112c:	20000000 	.word	0x20000000

08001130 <stop>:

void stop (TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	drive_forward (htim, 0);
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffab 	bl	800109c <drive_forward>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <accelerate>:
	TIM2->CCR2 = command;
}

// accelerate to desired speed
void accelerate (TIM_HandleTypeDef *htim, double final_speed)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 800115c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f93e 	bl	80003e4 <__aeabi_ui2d>
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <accelerate+0xa8>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fadd 	bl	800072c <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <accelerate+0xac>)
 8001180:	f7ff f9aa 	bl	80004d8 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <accelerate+0xb0>)
 8001192:	f7fe ffe9 	bl	8000168 <__aeabi_dsub>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <accelerate+0xb4>)
 80011a4:	f7ff f998 	bl	80004d8 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (speed < final_speed)
 80011b0:	e013      	b.n	80011da <accelerate+0x8a>
	{
		drive_forward(htim, speed);
 80011b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff ff70 	bl	800109c <drive_forward>
		speed += 2;
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011c8:	f7fe ffd0 	bl	800016c <__adddf3>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f003 fe81 	bl	8004edc <HAL_Delay>
	while (speed < final_speed)
 80011da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011e2:	f7ff fbeb 	bl	80009bc <__aeabi_dcmplt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e2      	bne.n	80011b2 <accelerate+0x62>
	}
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	40340000 	.word	0x40340000
 8001200:	3ff00000 	.word	0x3ff00000
 8001204:	40590000 	.word	0x40590000

08001208 <decelerate>:

// decelerate to 0
void decelerate (TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8001210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8e4 	bl	80003e4 <__aeabi_ui2d>
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <decelerate+0xa8>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff fa83 	bl	800072c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <decelerate+0xac>)
 8001234:	f7ff f950 	bl	80004d8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <decelerate+0xb0>)
 8001246:	f7fe ff8f 	bl	8000168 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <decelerate+0xb4>)
 8001258:	f7ff f93e 	bl	80004d8 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (speed > 0)
 8001264:	e013      	b.n	800128e <decelerate+0x86>
	{
		drive_forward(htim, speed);
 8001266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff16 	bl	800109c <drive_forward>
		speed -= 2;
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001278:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800127c:	f7fe ff74 	bl	8000168 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_Delay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f003 fe27 	bl	8004edc <HAL_Delay>
	while (speed > 0)
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800129a:	f7ff fbad 	bl	80009f8 <__aeabi_dcmpgt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e0      	bne.n	8001266 <decelerate+0x5e>
	}
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000
 80012b4:	40340000 	.word	0x40340000
 80012b8:	3ff00000 	.word	0x3ff00000
 80012bc:	40590000 	.word	0x40590000

080012c0 <invSqrt>:
// Functions

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80012c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fd09 	bl	8000ce4 <__aeabi_fmul>
 80012d2:	4603      	mov	r3, r0
 80012d4:	617b      	str	r3, [r7, #20]
	float y = x;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	105a      	asrs	r2, r3, #1
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <invSqrt+0x74>)
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6979      	ldr	r1, [r7, #20]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fcf3 	bl	8000ce4 <__aeabi_fmul>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f7ff fcec 	bl	8000ce4 <__aeabi_fmul>
 800130c:	4603      	mov	r3, r0
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8001314:	f7ff fbdc 	bl	8000ad0 <__aeabi_fsub>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f7ff fcdf 	bl	8000ce4 <__aeabi_fmul>
 8001326:	4603      	mov	r3, r0
 8001328:	613b      	str	r3, [r7, #16]
	return y;
 800132a:	693b      	ldr	r3, [r7, #16]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	5f3759df 	.word	0x5f3759df

08001338 <MadgwickAHRSupdate>:

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b0ab      	sub	sp, #172	; 0xac
 800133c:	af02      	add	r7, sp, #8
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800134e:	f7ff fe5d 	bl	800100c <__aeabi_fcmpeq>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01f      	beq.n	8001398 <MadgwickAHRSupdate+0x60>
 8001358:	f04f 0100 	mov.w	r1, #0
 800135c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001360:	f7ff fe54 	bl	800100c <__aeabi_fcmpeq>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <MadgwickAHRSupdate+0x60>
 800136a:	f04f 0100 	mov.w	r1, #0
 800136e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001372:	f7ff fe4b 	bl	800100c <__aeabi_fcmpeq>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00d      	beq.n	8001398 <MadgwickAHRSupdate+0x60>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800137c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f001 f948 	bl	8002624 <MadgwickAHRSupdateIMU>
		return;
 8001394:	f001 b938 	b.w	8002608 <MadgwickAHRSupdate+0x12d0>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8001398:	49ae      	ldr	r1, [pc, #696]	; (8001654 <MadgwickAHRSupdate+0x31c>)
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fca2 	bl	8000ce4 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 80013a4:	49ab      	ldr	r1, [pc, #684]	; (8001654 <MadgwickAHRSupdate+0x31c>)
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f7ff fc9c 	bl	8000ce4 <__aeabi_fmul>
 80013ac:	4603      	mov	r3, r0
 80013ae:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 80013b0:	49a8      	ldr	r1, [pc, #672]	; (8001654 <MadgwickAHRSupdate+0x31c>)
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fc96 	bl	8000ce4 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	607b      	str	r3, [r7, #4]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80013bc:	4ba6      	ldr	r3, [pc, #664]	; (8001658 <MadgwickAHRSupdate+0x320>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013c4:	68f9      	ldr	r1, [r7, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc8c 	bl	8000ce4 <__aeabi_fmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461c      	mov	r4, r3
 80013d0:	4ba2      	ldr	r3, [pc, #648]	; (800165c <MadgwickAHRSupdate+0x324>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc84 	bl	8000ce4 <__aeabi_fmul>
 80013dc:	4603      	mov	r3, r0
 80013de:	4619      	mov	r1, r3
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff fb75 	bl	8000ad0 <__aeabi_fsub>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461c      	mov	r4, r3
 80013ea:	4b9d      	ldr	r3, [pc, #628]	; (8001660 <MadgwickAHRSupdate+0x328>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fc77 	bl	8000ce4 <__aeabi_fmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4619      	mov	r1, r3
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff fb68 	bl	8000ad0 <__aeabi_fsub>
 8001400:	4603      	mov	r3, r0
 8001402:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc6c 	bl	8000ce4 <__aeabi_fmul>
 800140c:	4603      	mov	r3, r0
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <MadgwickAHRSupdate+0x32c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68f9      	ldr	r1, [r7, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fc63 	bl	8000ce4 <__aeabi_fmul>
 800141e:	4603      	mov	r3, r0
 8001420:	461c      	mov	r4, r3
 8001422:	4b8e      	ldr	r3, [pc, #568]	; (800165c <MadgwickAHRSupdate+0x324>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fc5b 	bl	8000ce4 <__aeabi_fmul>
 800142e:	4603      	mov	r3, r0
 8001430:	4619      	mov	r1, r3
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff fb4e 	bl	8000ad4 <__addsf3>
 8001438:	4603      	mov	r3, r0
 800143a:	461c      	mov	r4, r3
 800143c:	4b88      	ldr	r3, [pc, #544]	; (8001660 <MadgwickAHRSupdate+0x328>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc4e 	bl	8000ce4 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fb3f 	bl	8000ad0 <__aeabi_fsub>
 8001452:	4603      	mov	r3, r0
 8001454:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fc43 	bl	8000ce4 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001464:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <MadgwickAHRSupdate+0x32c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fc3a 	bl	8000ce4 <__aeabi_fmul>
 8001470:	4603      	mov	r3, r0
 8001472:	461c      	mov	r4, r3
 8001474:	4b78      	ldr	r3, [pc, #480]	; (8001658 <MadgwickAHRSupdate+0x320>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fc32 	bl	8000ce4 <__aeabi_fmul>
 8001480:	4603      	mov	r3, r0
 8001482:	4619      	mov	r1, r3
 8001484:	4620      	mov	r0, r4
 8001486:	f7ff fb23 	bl	8000ad0 <__aeabi_fsub>
 800148a:	4603      	mov	r3, r0
 800148c:	461c      	mov	r4, r3
 800148e:	4b74      	ldr	r3, [pc, #464]	; (8001660 <MadgwickAHRSupdate+0x328>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68f9      	ldr	r1, [r7, #12]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc25 	bl	8000ce4 <__aeabi_fmul>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff fb18 	bl	8000ad4 <__addsf3>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc1a 	bl	8000ce4 <__aeabi_fmul>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80014b6:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <MadgwickAHRSupdate+0x32c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc11 	bl	8000ce4 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461c      	mov	r4, r3
 80014c6:	4b64      	ldr	r3, [pc, #400]	; (8001658 <MadgwickAHRSupdate+0x320>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc09 	bl	8000ce4 <__aeabi_fmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fafc 	bl	8000ad4 <__addsf3>
 80014dc:	4603      	mov	r3, r0
 80014de:	461c      	mov	r4, r3
 80014e0:	4b5e      	ldr	r3, [pc, #376]	; (800165c <MadgwickAHRSupdate+0x324>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fbfc 	bl	8000ce4 <__aeabi_fmul>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff faed 	bl	8000ad0 <__aeabi_fsub>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fbf1 	bl	8000ce4 <__aeabi_fmul>
 8001502:	4603      	mov	r3, r0
 8001504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001508:	f04f 0100 	mov.w	r1, #0
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f7ff fd7d 	bl	800100c <__aeabi_fcmpeq>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d012      	beq.n	800153e <MadgwickAHRSupdate+0x206>
 8001518:	f04f 0100 	mov.w	r1, #0
 800151c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001520:	f7ff fd74 	bl	800100c <__aeabi_fcmpeq>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <MadgwickAHRSupdate+0x206>
 800152a:	f04f 0100 	mov.w	r1, #0
 800152e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001532:	f7ff fd6b 	bl	800100c <__aeabi_fcmpeq>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	f040 87b6 	bne.w	80024aa <MadgwickAHRSupdate+0x1172>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800153e:	6839      	ldr	r1, [r7, #0]
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f7ff fbcf 	bl	8000ce4 <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
 8001548:	461c      	mov	r4, r3
 800154a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800154e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001552:	f7ff fbc7 	bl	8000ce4 <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
 8001558:	4619      	mov	r1, r3
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff faba 	bl	8000ad4 <__addsf3>
 8001560:	4603      	mov	r3, r0
 8001562:	461c      	mov	r4, r3
 8001564:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001568:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800156c:	f7ff fbba 	bl	8000ce4 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff faad 	bl	8000ad4 <__addsf3>
 800157a:	4603      	mov	r3, r0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe9f 	bl	80012c0 <invSqrt>
 8001582:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 8001586:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f7ff fbaa 	bl	8000ce4 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8001594:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001598:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800159c:	f7ff fba2 	bl	8000ce4 <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		az *= recipNorm;
 80015a6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80015aa:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80015ae:	f7ff fb99 	bl	8000ce4 <__aeabi_fmul>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80015b8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80015bc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80015c0:	f7ff fb90 	bl	8000ce4 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461c      	mov	r4, r3
 80015c8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80015cc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80015d0:	f7ff fb88 	bl	8000ce4 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff fa7b 	bl	8000ad4 <__addsf3>
 80015de:	4603      	mov	r3, r0
 80015e0:	461c      	mov	r4, r3
 80015e2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80015e6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80015ea:	f7ff fb7b 	bl	8000ce4 <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fa6e 	bl	8000ad4 <__addsf3>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe60 	bl	80012c0 <invSqrt>
 8001600:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		mx *= recipNorm;
 8001604:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001608:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800160c:	f7ff fb6a 	bl	8000ce4 <__aeabi_fmul>
 8001610:	4603      	mov	r3, r0
 8001612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		my *= recipNorm;
 8001616:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800161a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800161e:	f7ff fb61 	bl	8000ce4 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		mz *= recipNorm;
 8001628:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800162c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001630:	f7ff fb58 	bl	8000ce4 <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MadgwickAHRSupdate+0x32c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fa47 	bl	8000ad4 <__addsf3>
 8001646:	4603      	mov	r3, r0
 8001648:	4619      	mov	r1, r3
 800164a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800164e:	f7ff fb49 	bl	8000ce4 <__aeabi_fmul>
 8001652:	e009      	b.n	8001668 <MadgwickAHRSupdate+0x330>
 8001654:	3c8efa39 	.word	0x3c8efa39
 8001658:	200002a4 	.word	0x200002a4
 800165c:	200002a8 	.word	0x200002a8
 8001660:	200002ac 	.word	0x200002ac
 8001664:	2000000c 	.word	0x2000000c
 8001668:	4603      	mov	r3, r0
 800166a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_2q0my = 2.0f * q0 * my;
 800166e:	4b99      	ldr	r3, [pc, #612]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fa2d 	bl	8000ad4 <__addsf3>
 800167a:	4603      	mov	r3, r0
 800167c:	4619      	mov	r1, r3
 800167e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001682:	f7ff fb2f 	bl	8000ce4 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_2q0mz = 2.0f * q0 * mz;
 800168c:	4b91      	ldr	r3, [pc, #580]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fa1e 	bl	8000ad4 <__addsf3>
 8001698:	4603      	mov	r3, r0
 800169a:	4619      	mov	r1, r3
 800169c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80016a0:	f7ff fb20 	bl	8000ce4 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_2q1mx = 2.0f * q1 * mx;
 80016aa:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <MadgwickAHRSupdate+0x5a0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fa0f 	bl	8000ad4 <__addsf3>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4619      	mov	r1, r3
 80016ba:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80016be:	f7ff fb11 	bl	8000ce4 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	67fb      	str	r3, [r7, #124]	; 0x7c
		_2q0 = 2.0f * q0;
 80016c6:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fa01 	bl	8000ad4 <__addsf3>
 80016d2:	4603      	mov	r3, r0
 80016d4:	67bb      	str	r3, [r7, #120]	; 0x78
		_2q1 = 2.0f * q1;
 80016d6:	4b80      	ldr	r3, [pc, #512]	; (80018d8 <MadgwickAHRSupdate+0x5a0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff f9f9 	bl	8000ad4 <__addsf3>
 80016e2:	4603      	mov	r3, r0
 80016e4:	677b      	str	r3, [r7, #116]	; 0x74
		_2q2 = 2.0f * q2;
 80016e6:	4b7d      	ldr	r3, [pc, #500]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff f9f1 	bl	8000ad4 <__addsf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	673b      	str	r3, [r7, #112]	; 0x70
		_2q3 = 2.0f * q3;
 80016f6:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f9e9 	bl	8000ad4 <__addsf3>
 8001702:	4603      	mov	r3, r0
 8001704:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0q2 = 2.0f * q0 * q2;
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f9e1 	bl	8000ad4 <__addsf3>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	4610      	mov	r0, r2
 800171e:	f7ff fae1 	bl	8000ce4 <__aeabi_fmul>
 8001722:	4603      	mov	r3, r0
 8001724:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q2q3 = 2.0f * q2 * q3;
 8001726:	4b6d      	ldr	r3, [pc, #436]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff f9d1 	bl	8000ad4 <__addsf3>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	4610      	mov	r0, r2
 800173e:	f7ff fad1 	bl	8000ce4 <__aeabi_fmul>
 8001742:	4603      	mov	r3, r0
 8001744:	667b      	str	r3, [r7, #100]	; 0x64
		q0q0 = q0 * q0;
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a62      	ldr	r2, [pc, #392]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fac7 	bl	8000ce4 <__aeabi_fmul>
 8001756:	4603      	mov	r3, r0
 8001758:	663b      	str	r3, [r7, #96]	; 0x60
		q0q1 = q0 * q1;
 800175a:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5e      	ldr	r2, [pc, #376]	; (80018d8 <MadgwickAHRSupdate+0x5a0>)
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fabd 	bl	8000ce4 <__aeabi_fmul>
 800176a:	4603      	mov	r3, r0
 800176c:	65fb      	str	r3, [r7, #92]	; 0x5c
		q0q2 = q0 * q2;
 800176e:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5a      	ldr	r2, [pc, #360]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fab3 	bl	8000ce4 <__aeabi_fmul>
 800177e:	4603      	mov	r3, r0
 8001780:	65bb      	str	r3, [r7, #88]	; 0x58
		q0q3 = q0 * q3;
 8001782:	4b54      	ldr	r3, [pc, #336]	; (80018d4 <MadgwickAHRSupdate+0x59c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a56      	ldr	r2, [pc, #344]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff faa9 	bl	8000ce4 <__aeabi_fmul>
 8001792:	4603      	mov	r3, r0
 8001794:	657b      	str	r3, [r7, #84]	; 0x54
		q1q1 = q1 * q1;
 8001796:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <MadgwickAHRSupdate+0x5a0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a4f      	ldr	r2, [pc, #316]	; (80018d8 <MadgwickAHRSupdate+0x5a0>)
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fa9f 	bl	8000ce4 <__aeabi_fmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	653b      	str	r3, [r7, #80]	; 0x50
		q1q2 = q1 * q2;
 80017aa:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <MadgwickAHRSupdate+0x5a0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa95 	bl	8000ce4 <__aeabi_fmul>
 80017ba:	4603      	mov	r3, r0
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		q1q3 = q1 * q3;
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <MadgwickAHRSupdate+0x5a0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a47      	ldr	r2, [pc, #284]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fa8b 	bl	8000ce4 <__aeabi_fmul>
 80017ce:	4603      	mov	r3, r0
 80017d0:	64bb      	str	r3, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a41      	ldr	r2, [pc, #260]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fa81 	bl	8000ce4 <__aeabi_fmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
		q2q3 = q2 * q3;
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fa77 	bl	8000ce4 <__aeabi_fmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	643b      	str	r3, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa6d 	bl	8000ce4 <__aeabi_fmul>
 800180a:	4603      	mov	r3, r0
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800180e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001810:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001814:	f7ff fa66 	bl	8000ce4 <__aeabi_fmul>
 8001818:	4603      	mov	r3, r0
 800181a:	461c      	mov	r4, r3
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fa5d 	bl	8000ce4 <__aeabi_fmul>
 800182a:	4603      	mov	r3, r0
 800182c:	4619      	mov	r1, r3
 800182e:	4620      	mov	r0, r4
 8001830:	f7ff f94e 	bl	8000ad0 <__aeabi_fsub>
 8001834:	4603      	mov	r3, r0
 8001836:	461c      	mov	r4, r3
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa4f 	bl	8000ce4 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	4619      	mov	r1, r3
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff f942 	bl	8000ad4 <__addsf3>
 8001850:	4603      	mov	r3, r0
 8001852:	461c      	mov	r4, r3
 8001854:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001856:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800185a:	f7ff fa43 	bl	8000ce4 <__aeabi_fmul>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff f936 	bl	8000ad4 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	461c      	mov	r4, r3
 800186c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001870:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001872:	f7ff fa37 	bl	8000ce4 <__aeabi_fmul>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MadgwickAHRSupdate+0x5a4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fa2f 	bl	8000ce4 <__aeabi_fmul>
 8001886:	4603      	mov	r3, r0
 8001888:	4619      	mov	r1, r3
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff f922 	bl	8000ad4 <__addsf3>
 8001890:	4603      	mov	r3, r0
 8001892:	461c      	mov	r4, r3
 8001894:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001898:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800189a:	f7ff fa23 	bl	8000ce4 <__aeabi_fmul>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MadgwickAHRSupdate+0x5a8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f7ff fa1b 	bl	8000ce4 <__aeabi_fmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff f90e 	bl	8000ad4 <__addsf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461c      	mov	r4, r3
 80018bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018be:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80018c2:	f7ff fa0f 	bl	8000ce4 <__aeabi_fmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff f900 	bl	8000ad0 <__aeabi_fsub>
 80018d0:	e008      	b.n	80018e4 <MadgwickAHRSupdate+0x5ac>
 80018d2:	bf00      	nop
 80018d4:	2000000c 	.word	0x2000000c
 80018d8:	200002a4 	.word	0x200002a4
 80018dc:	200002a8 	.word	0x200002a8
 80018e0:	200002ac 	.word	0x200002ac
 80018e4:	4603      	mov	r3, r0
 80018e6:	461c      	mov	r4, r3
 80018e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018ea:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80018ee:	f7ff f9f9 	bl	8000ce4 <__aeabi_fmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff f8ea 	bl	8000ad0 <__aeabi_fsub>
 80018fc:	4603      	mov	r3, r0
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001900:	4ba1      	ldr	r3, [pc, #644]	; (8001b88 <MadgwickAHRSupdate+0x850>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f9eb 	bl	8000ce4 <__aeabi_fmul>
 800190e:	4603      	mov	r3, r0
 8001910:	461c      	mov	r4, r3
 8001912:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001914:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001918:	f7ff f9e4 	bl	8000ce4 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff f8d7 	bl	8000ad4 <__addsf3>
 8001926:	4603      	mov	r3, r0
 8001928:	461c      	mov	r4, r3
 800192a:	4b98      	ldr	r3, [pc, #608]	; (8001b8c <MadgwickAHRSupdate+0x854>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9d6 	bl	8000ce4 <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	4619      	mov	r1, r3
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff f8c7 	bl	8000ad0 <__aeabi_fsub>
 8001942:	4603      	mov	r3, r0
 8001944:	461c      	mov	r4, r3
 8001946:	4b92      	ldr	r3, [pc, #584]	; (8001b90 <MadgwickAHRSupdate+0x858>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f9c9 	bl	8000ce4 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	4619      	mov	r1, r3
 8001956:	4620      	mov	r0, r4
 8001958:	f7ff f8bc 	bl	8000ad4 <__addsf3>
 800195c:	4603      	mov	r3, r0
 800195e:	461c      	mov	r4, r3
 8001960:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001962:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001966:	f7ff f9bd 	bl	8000ce4 <__aeabi_fmul>
 800196a:	4603      	mov	r3, r0
 800196c:	4619      	mov	r1, r3
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff f8ae 	bl	8000ad0 <__aeabi_fsub>
 8001974:	4603      	mov	r3, r0
 8001976:	461c      	mov	r4, r3
 8001978:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800197a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800197e:	f7ff f9b1 	bl	8000ce4 <__aeabi_fmul>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff f8a4 	bl	8000ad4 <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	461c      	mov	r4, r3
 8001990:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001994:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001996:	f7ff f9a5 	bl	8000ce4 <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4b7a      	ldr	r3, [pc, #488]	; (8001b88 <MadgwickAHRSupdate+0x850>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4610      	mov	r0, r2
 80019a6:	f7ff f99d 	bl	8000ce4 <__aeabi_fmul>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff f890 	bl	8000ad4 <__addsf3>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461c      	mov	r4, r3
 80019b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019ba:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80019be:	f7ff f991 	bl	8000ce4 <__aeabi_fmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4619      	mov	r1, r3
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff f882 	bl	8000ad0 <__aeabi_fsub>
 80019cc:	4603      	mov	r3, r0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
		_2bx = sqrtf(hx * hx + hy * hy);
 80019d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019d4:	f7ff f986 	bl	8000ce4 <__aeabi_fmul>
 80019d8:	4603      	mov	r3, r0
 80019da:	461c      	mov	r4, r3
 80019dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019e0:	f7ff f980 	bl	8000ce4 <__aeabi_fmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff f873 	bl	8000ad4 <__addsf3>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00a fcef 	bl	800c3d4 <sqrtf>
 80019f6:	6338      	str	r0, [r7, #48]	; 0x30
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80019f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a00:	4a63      	ldr	r2, [pc, #396]	; (8001b90 <MadgwickAHRSupdate+0x858>)
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f96c 	bl	8000ce4 <__aeabi_fmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461c      	mov	r4, r3
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <MadgwickAHRSupdate+0x854>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f963 	bl	8000ce4 <__aeabi_fmul>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f856 	bl	8000ad4 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461c      	mov	r4, r3
 8001a2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a2e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a32:	f7ff f957 	bl	8000ce4 <__aeabi_fmul>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff f84a 	bl	8000ad4 <__addsf3>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461c      	mov	r4, r3
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <MadgwickAHRSupdate+0x850>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f94a 	bl	8000ce4 <__aeabi_fmul>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4619      	mov	r1, r3
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff f83d 	bl	8000ad4 <__addsf3>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461c      	mov	r4, r3
 8001a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a60:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a64:	f7ff f93e 	bl	8000ce4 <__aeabi_fmul>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff f82f 	bl	8000ad0 <__aeabi_fsub>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461c      	mov	r4, r3
 8001a76:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001a7a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001a7c:	f7ff f932 	bl	8000ce4 <__aeabi_fmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <MadgwickAHRSupdate+0x850>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f7ff f92a 	bl	8000ce4 <__aeabi_fmul>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff f81d 	bl	8000ad4 <__addsf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001aa0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001aa4:	f7ff f91e 	bl	8000ce4 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff f80f 	bl	8000ad0 <__aeabi_fsub>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ab8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001abc:	f7ff f912 	bl	8000ce4 <__aeabi_fmul>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7ff f805 	bl	8000ad4 <__addsf3>
 8001aca:	4603      	mov	r3, r0
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
		_4bx = 2.0f * _2bx;
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fffe 	bl	8000ad4 <__addsf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
		_4bz = 2.0f * _2bz;
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fff7 	bl	8000ad4 <__addsf3>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aec:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af2:	4619      	mov	r1, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe ffed 	bl	8000ad4 <__addsf3>
 8001afa:	4603      	mov	r3, r0
 8001afc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe ffe6 	bl	8000ad0 <__aeabi_fsub>
 8001b04:	4603      	mov	r3, r0
 8001b06:	6839      	ldr	r1, [r7, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe ffe1 	bl	8000ad0 <__aeabi_fsub>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff f8e6 	bl	8000ce4 <__aeabi_fmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461c      	mov	r4, r3
 8001b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe ffd7 	bl	8000ad4 <__addsf3>
 8001b26:	4603      	mov	r3, r0
 8001b28:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe ffd2 	bl	8000ad4 <__addsf3>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe ffca 	bl	8000ad0 <__aeabi_fsub>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f8cf 	bl	8000ce4 <__aeabi_fmul>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7fe ffc2 	bl	8000ad4 <__addsf3>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461c      	mov	r4, r3
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MadgwickAHRSupdate+0x858>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8c2 	bl	8000ce4 <__aeabi_fmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461d      	mov	r5, r3
 8001b64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b66:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001b6a:	f7fe ffb1 	bl	8000ad0 <__aeabi_fsub>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe ffac 	bl	8000ad0 <__aeabi_fsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f8b1 	bl	8000ce4 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461e      	mov	r6, r3
 8001b86:	e005      	b.n	8001b94 <MadgwickAHRSupdate+0x85c>
 8001b88:	200002ac 	.word	0x200002ac
 8001b8c:	200002a4 	.word	0x200002a4
 8001b90:	200002a8 	.word	0x200002a8
 8001b94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b98:	f7fe ff9a 	bl	8000ad0 <__aeabi_fsub>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f89f 	bl	8000ce4 <__aeabi_fmul>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7fe ff92 	bl	8000ad4 <__addsf3>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe ff8a 	bl	8000ad0 <__aeabi_fsub>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	f7ff f88f 	bl	8000ce4 <__aeabi_fmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7fe ff80 	bl	8000ad0 <__aeabi_fsub>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461c      	mov	r4, r3
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bda:	4a9f      	ldr	r2, [pc, #636]	; (8001e58 <MadgwickAHRSupdate+0xb20>)
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f87f 	bl	8000ce4 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461d      	mov	r5, r3
 8001bea:	4b9c      	ldr	r3, [pc, #624]	; (8001e5c <MadgwickAHRSupdate+0xb24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f877 	bl	8000ce4 <__aeabi_fmul>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f7fe ff6a 	bl	8000ad4 <__addsf3>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461d      	mov	r5, r3
 8001c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c08:	f7fe ff62 	bl	8000ad0 <__aeabi_fsub>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f867 	bl	8000ce4 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461e      	mov	r6, r3
 8001c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c1c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c1e:	f7fe ff59 	bl	8000ad4 <__addsf3>
 8001c22:	4603      	mov	r3, r0
 8001c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f85c 	bl	8000ce4 <__aeabi_fmul>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4630      	mov	r0, r6
 8001c32:	f7fe ff4f 	bl	8000ad4 <__addsf3>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe ff47 	bl	8000ad0 <__aeabi_fsub>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4619      	mov	r1, r3
 8001c46:	4628      	mov	r0, r5
 8001c48:	f7ff f84c 	bl	8000ce4 <__aeabi_fmul>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7fe ff3f 	bl	8000ad4 <__addsf3>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461c      	mov	r4, r3
 8001c5a:	4b81      	ldr	r3, [pc, #516]	; (8001e60 <MadgwickAHRSupdate+0xb28>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f83f 	bl	8000ce4 <__aeabi_fmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461d      	mov	r5, r3
 8001c6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001c6e:	f7fe ff31 	bl	8000ad4 <__addsf3>
 8001c72:	4603      	mov	r3, r0
 8001c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f834 	bl	8000ce4 <__aeabi_fmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461e      	mov	r6, r3
 8001c80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c82:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001c86:	f7fe ff23 	bl	8000ad0 <__aeabi_fsub>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ff1e 	bl	8000ad0 <__aeabi_fsub>
 8001c94:	4603      	mov	r3, r0
 8001c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f823 	bl	8000ce4 <__aeabi_fmul>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4630      	mov	r0, r6
 8001ca4:	f7fe ff16 	bl	8000ad4 <__addsf3>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe ff0e 	bl	8000ad0 <__aeabi_fsub>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f7ff f813 	bl	8000ce4 <__aeabi_fmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7fe ff06 	bl	8000ad4 <__addsf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	623b      	str	r3, [r7, #32]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe feff 	bl	8000ad4 <__addsf3>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fef8 	bl	8000ad0 <__aeabi_fsub>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fef3 	bl	8000ad0 <__aeabi_fsub>
 8001cea:	4603      	mov	r3, r0
 8001cec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fff8 	bl	8000ce4 <__aeabi_fmul>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461c      	mov	r4, r3
 8001cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fee9 	bl	8000ad4 <__addsf3>
 8001d02:	4603      	mov	r3, r0
 8001d04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fee4 	bl	8000ad4 <__addsf3>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fedc 	bl	8000ad0 <__aeabi_fsub>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe ffe1 	bl	8000ce4 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7fe fed4 	bl	8000ad4 <__addsf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461c      	mov	r4, r3
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <MadgwickAHRSupdate+0xb24>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe ffd3 	bl	8000ce4 <__aeabi_fmul>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461d      	mov	r5, r3
 8001d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d44:	4619      	mov	r1, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fec4 	bl	8000ad4 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d54:	f7fe febc 	bl	8000ad0 <__aeabi_fsub>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461e      	mov	r6, r3
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe feb7 	bl	8000ad4 <__addsf3>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f7fe feb0 	bl	8000ad0 <__aeabi_fsub>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe feaa 	bl	8000ad0 <__aeabi_fsub>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4628      	mov	r0, r5
 8001d82:	f7fe ffaf 	bl	8000ce4 <__aeabi_fmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7fe fea0 	bl	8000ad0 <__aeabi_fsub>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461c      	mov	r4, r3
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <MadgwickAHRSupdate+0xb20>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ffa2 	bl	8000ce4 <__aeabi_fmul>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461d      	mov	r5, r3
 8001da4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001da6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001daa:	f7fe fe91 	bl	8000ad0 <__aeabi_fsub>
 8001dae:	4603      	mov	r3, r0
 8001db0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fe8c 	bl	8000ad0 <__aeabi_fsub>
 8001db8:	4603      	mov	r3, r0
 8001dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe ff91 	bl	8000ce4 <__aeabi_fmul>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461e      	mov	r6, r3
 8001dc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001dc8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001dca:	f7fe fe81 	bl	8000ad0 <__aeabi_fsub>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff86 	bl	8000ce4 <__aeabi_fmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f7fe fe79 	bl	8000ad4 <__addsf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fe71 	bl	8000ad0 <__aeabi_fsub>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
 8001df2:	4628      	mov	r0, r5
 8001df4:	f7fe ff76 	bl	8000ce4 <__aeabi_fmul>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7fe fe69 	bl	8000ad4 <__addsf3>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461c      	mov	r4, r3
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MadgwickAHRSupdate+0xb28>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe ff69 	bl	8000ce4 <__aeabi_fmul>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461d      	mov	r5, r3
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <MadgwickAHRSupdate+0xb2c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe ff61 	bl	8000ce4 <__aeabi_fmul>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4619      	mov	r1, r3
 8001e26:	4628      	mov	r0, r5
 8001e28:	f7fe fe54 	bl	8000ad4 <__addsf3>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461d      	mov	r5, r3
 8001e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e34:	f7fe fe4c 	bl	8000ad0 <__aeabi_fsub>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe ff51 	bl	8000ce4 <__aeabi_fmul>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461e      	mov	r6, r3
 8001e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e4a:	f7fe fe43 	bl	8000ad4 <__addsf3>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e52:	4618      	mov	r0, r3
 8001e54:	e008      	b.n	8001e68 <MadgwickAHRSupdate+0xb30>
 8001e56:	bf00      	nop
 8001e58:	200002ac 	.word	0x200002ac
 8001e5c:	200002a4 	.word	0x200002a4
 8001e60:	200002a8 	.word	0x200002a8
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	f7fe ff3c 	bl	8000ce4 <__aeabi_fmul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4630      	mov	r0, r6
 8001e72:	f7fe fe2f 	bl	8000ad4 <__addsf3>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fe27 	bl	8000ad0 <__aeabi_fsub>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4628      	mov	r0, r5
 8001e88:	f7fe ff2c 	bl	8000ce4 <__aeabi_fmul>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7fe fe1f 	bl	8000ad4 <__addsf3>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461c      	mov	r4, r3
 8001e9a:	4b9f      	ldr	r3, [pc, #636]	; (8002118 <MadgwickAHRSupdate+0xde0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff1f 	bl	8000ce4 <__aeabi_fmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	4b9c      	ldr	r3, [pc, #624]	; (800211c <MadgwickAHRSupdate+0xde4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ff17 	bl	8000ce4 <__aeabi_fmul>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f7fe fe08 	bl	8000ad0 <__aeabi_fsub>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461d      	mov	r5, r3
 8001ec4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ec6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ec8:	f7fe fe04 	bl	8000ad4 <__addsf3>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff07 	bl	8000ce4 <__aeabi_fmul>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461e      	mov	r6, r3
 8001eda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001edc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001ee0:	f7fe fdf6 	bl	8000ad0 <__aeabi_fsub>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fdf1 	bl	8000ad0 <__aeabi_fsub>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fef6 	bl	8000ce4 <__aeabi_fmul>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4619      	mov	r1, r3
 8001efc:	4630      	mov	r0, r6
 8001efe:	f7fe fde9 	bl	8000ad4 <__addsf3>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fde1 	bl	8000ad0 <__aeabi_fsub>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4628      	mov	r0, r5
 8001f14:	f7fe fee6 	bl	8000ce4 <__aeabi_fmul>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7fe fdd9 	bl	8000ad4 <__addsf3>
 8001f22:	4603      	mov	r3, r0
 8001f24:	61fb      	str	r3, [r7, #28]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f28:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fdcf 	bl	8000ad4 <__addsf3>
 8001f36:	4603      	mov	r3, r0
 8001f38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fdc8 	bl	8000ad0 <__aeabi_fsub>
 8001f40:	4603      	mov	r3, r0
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fdc3 	bl	8000ad0 <__aeabi_fsub>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7fe fec8 	bl	8000ce4 <__aeabi_fmul>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fdb9 	bl	8000ad4 <__addsf3>
 8001f62:	4603      	mov	r3, r0
 8001f64:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fdb4 	bl	8000ad4 <__addsf3>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fdac 	bl	8000ad0 <__aeabi_fsub>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe feb1 	bl	8000ce4 <__aeabi_fmul>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7fe fda4 	bl	8000ad4 <__addsf3>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461c      	mov	r4, r3
 8001f90:	4b63      	ldr	r3, [pc, #396]	; (8002120 <MadgwickAHRSupdate+0xde8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fea3 	bl	8000ce4 <__aeabi_fmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fd94 	bl	8000ad4 <__addsf3>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001fb4:	f7fe fd8c 	bl	8000ad0 <__aeabi_fsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461e      	mov	r6, r3
 8001fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fd87 	bl	8000ad4 <__addsf3>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f7fe fd80 	bl	8000ad0 <__aeabi_fsub>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fd7a 	bl	8000ad0 <__aeabi_fsub>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	f7fe fe7f 	bl	8000ce4 <__aeabi_fmul>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7fe fd70 	bl	8000ad0 <__aeabi_fsub>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461c      	mov	r4, r3
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ffa:	4a49      	ldr	r2, [pc, #292]	; (8002120 <MadgwickAHRSupdate+0xde8>)
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fe6f 	bl	8000ce4 <__aeabi_fmul>
 8002006:	4603      	mov	r3, r0
 8002008:	461d      	mov	r5, r3
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <MadgwickAHRSupdate+0xdec>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fe67 	bl	8000ce4 <__aeabi_fmul>
 8002016:	4603      	mov	r3, r0
 8002018:	4619      	mov	r1, r3
 800201a:	4628      	mov	r0, r5
 800201c:	f7fe fd58 	bl	8000ad0 <__aeabi_fsub>
 8002020:	4603      	mov	r3, r0
 8002022:	461d      	mov	r5, r3
 8002024:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002026:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800202a:	f7fe fd51 	bl	8000ad0 <__aeabi_fsub>
 800202e:	4603      	mov	r3, r0
 8002030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fd4c 	bl	8000ad0 <__aeabi_fsub>
 8002038:	4603      	mov	r3, r0
 800203a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe51 	bl	8000ce4 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	461e      	mov	r6, r3
 8002046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002048:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800204a:	f7fe fd41 	bl	8000ad0 <__aeabi_fsub>
 800204e:	4603      	mov	r3, r0
 8002050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fe46 	bl	8000ce4 <__aeabi_fmul>
 8002058:	4603      	mov	r3, r0
 800205a:	4619      	mov	r1, r3
 800205c:	4630      	mov	r0, r6
 800205e:	f7fe fd39 	bl	8000ad4 <__addsf3>
 8002062:	4603      	mov	r3, r0
 8002064:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fd31 	bl	8000ad0 <__aeabi_fsub>
 800206e:	4603      	mov	r3, r0
 8002070:	4619      	mov	r1, r3
 8002072:	4628      	mov	r0, r5
 8002074:	f7fe fe36 	bl	8000ce4 <__aeabi_fmul>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	4620      	mov	r0, r4
 800207e:	f7fe fd29 	bl	8000ad4 <__addsf3>
 8002082:	4603      	mov	r3, r0
 8002084:	461c      	mov	r4, r3
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <MadgwickAHRSupdate+0xde4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fe29 	bl	8000ce4 <__aeabi_fmul>
 8002092:	4603      	mov	r3, r0
 8002094:	461d      	mov	r5, r3
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <MadgwickAHRSupdate+0xde0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe21 	bl	8000ce4 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4628      	mov	r0, r5
 80020a8:	f7fe fd14 	bl	8000ad4 <__addsf3>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461d      	mov	r5, r3
 80020b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020b4:	f7fe fd0c 	bl	8000ad0 <__aeabi_fsub>
 80020b8:	4603      	mov	r3, r0
 80020ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fe11 	bl	8000ce4 <__aeabi_fmul>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461e      	mov	r6, r3
 80020c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020ca:	f7fe fd03 	bl	8000ad4 <__addsf3>
 80020ce:	4603      	mov	r3, r0
 80020d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fe06 	bl	8000ce4 <__aeabi_fmul>
 80020d8:	4603      	mov	r3, r0
 80020da:	4619      	mov	r1, r3
 80020dc:	4630      	mov	r0, r6
 80020de:	f7fe fcf9 	bl	8000ad4 <__addsf3>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fcf1 	bl	8000ad0 <__aeabi_fsub>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4619      	mov	r1, r3
 80020f2:	4628      	mov	r0, r5
 80020f4:	f7fe fdf6 	bl	8000ce4 <__aeabi_fmul>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7fe fce9 	bl	8000ad4 <__addsf3>
 8002102:	4603      	mov	r3, r0
 8002104:	461c      	mov	r4, r3
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <MadgwickAHRSupdate+0xdec>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fde9 	bl	8000ce4 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	461d      	mov	r5, r3
 8002116:	e007      	b.n	8002128 <MadgwickAHRSupdate+0xdf0>
 8002118:	200002ac 	.word	0x200002ac
 800211c:	200002a4 	.word	0x200002a4
 8002120:	200002a8 	.word	0x200002a8
 8002124:	2000000c 	.word	0x2000000c
 8002128:	4b9f      	ldr	r3, [pc, #636]	; (80023a8 <MadgwickAHRSupdate+0x1070>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fdd8 	bl	8000ce4 <__aeabi_fmul>
 8002134:	4603      	mov	r3, r0
 8002136:	4619      	mov	r1, r3
 8002138:	4628      	mov	r0, r5
 800213a:	f7fe fcc9 	bl	8000ad0 <__aeabi_fsub>
 800213e:	4603      	mov	r3, r0
 8002140:	461d      	mov	r5, r3
 8002142:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002144:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002146:	f7fe fcc5 	bl	8000ad4 <__addsf3>
 800214a:	4603      	mov	r3, r0
 800214c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdc8 	bl	8000ce4 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	461e      	mov	r6, r3
 8002158:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800215a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800215e:	f7fe fcb7 	bl	8000ad0 <__aeabi_fsub>
 8002162:	4603      	mov	r3, r0
 8002164:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fcb2 	bl	8000ad0 <__aeabi_fsub>
 800216c:	4603      	mov	r3, r0
 800216e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fdb7 	bl	8000ce4 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	4619      	mov	r1, r3
 800217a:	4630      	mov	r0, r6
 800217c:	f7fe fcaa 	bl	8000ad4 <__addsf3>
 8002180:	4603      	mov	r3, r0
 8002182:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fca2 	bl	8000ad0 <__aeabi_fsub>
 800218c:	4603      	mov	r3, r0
 800218e:	4619      	mov	r1, r3
 8002190:	4628      	mov	r0, r5
 8002192:	f7fe fda7 	bl	8000ce4 <__aeabi_fmul>
 8002196:	4603      	mov	r3, r0
 8002198:	4619      	mov	r1, r3
 800219a:	4620      	mov	r0, r4
 800219c:	f7fe fc9a 	bl	8000ad4 <__addsf3>
 80021a0:	4603      	mov	r3, r0
 80021a2:	61bb      	str	r3, [r7, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80021a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a6:	4619      	mov	r1, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fc93 	bl	8000ad4 <__addsf3>
 80021ae:	4603      	mov	r3, r0
 80021b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fc8c 	bl	8000ad0 <__aeabi_fsub>
 80021b8:	4603      	mov	r3, r0
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fc87 	bl	8000ad0 <__aeabi_fsub>
 80021c2:	4603      	mov	r3, r0
 80021c4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fd8c 	bl	8000ce4 <__aeabi_fmul>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461c      	mov	r4, r3
 80021d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fc7d 	bl	8000ad4 <__addsf3>
 80021da:	4603      	mov	r3, r0
 80021dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fc78 	bl	8000ad4 <__addsf3>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fc70 	bl	8000ad0 <__aeabi_fsub>
 80021f0:	4603      	mov	r3, r0
 80021f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fd75 	bl	8000ce4 <__aeabi_fmul>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4619      	mov	r1, r3
 80021fe:	4620      	mov	r0, r4
 8002200:	f7fe fc68 	bl	8000ad4 <__addsf3>
 8002204:	4603      	mov	r3, r0
 8002206:	461c      	mov	r4, r3
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800220e:	4a67      	ldr	r2, [pc, #412]	; (80023ac <MadgwickAHRSupdate+0x1074>)
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd65 	bl	8000ce4 <__aeabi_fmul>
 800221a:	4603      	mov	r3, r0
 800221c:	461d      	mov	r5, r3
 800221e:	4b64      	ldr	r3, [pc, #400]	; (80023b0 <MadgwickAHRSupdate+0x1078>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fd5d 	bl	8000ce4 <__aeabi_fmul>
 800222a:	4603      	mov	r3, r0
 800222c:	4619      	mov	r1, r3
 800222e:	4628      	mov	r0, r5
 8002230:	f7fe fc50 	bl	8000ad4 <__addsf3>
 8002234:	4603      	mov	r3, r0
 8002236:	461d      	mov	r5, r3
 8002238:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800223a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800223e:	f7fe fc47 	bl	8000ad0 <__aeabi_fsub>
 8002242:	4603      	mov	r3, r0
 8002244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fc42 	bl	8000ad0 <__aeabi_fsub>
 800224c:	4603      	mov	r3, r0
 800224e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fd47 	bl	8000ce4 <__aeabi_fmul>
 8002256:	4603      	mov	r3, r0
 8002258:	461e      	mov	r6, r3
 800225a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800225c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800225e:	f7fe fc37 	bl	8000ad0 <__aeabi_fsub>
 8002262:	4603      	mov	r3, r0
 8002264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fd3c 	bl	8000ce4 <__aeabi_fmul>
 800226c:	4603      	mov	r3, r0
 800226e:	4619      	mov	r1, r3
 8002270:	4630      	mov	r0, r6
 8002272:	f7fe fc2f 	bl	8000ad4 <__addsf3>
 8002276:	4603      	mov	r3, r0
 8002278:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fc27 	bl	8000ad0 <__aeabi_fsub>
 8002282:	4603      	mov	r3, r0
 8002284:	4619      	mov	r1, r3
 8002286:	4628      	mov	r0, r5
 8002288:	f7fe fd2c 	bl	8000ce4 <__aeabi_fmul>
 800228c:	4603      	mov	r3, r0
 800228e:	4619      	mov	r1, r3
 8002290:	4620      	mov	r0, r4
 8002292:	f7fe fc1f 	bl	8000ad4 <__addsf3>
 8002296:	4603      	mov	r3, r0
 8002298:	461c      	mov	r4, r3
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022a0:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <MadgwickAHRSupdate+0x107c>)
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fd1c 	bl	8000ce4 <__aeabi_fmul>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461d      	mov	r5, r3
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <MadgwickAHRSupdate+0x1070>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fd14 	bl	8000ce4 <__aeabi_fmul>
 80022bc:	4603      	mov	r3, r0
 80022be:	4619      	mov	r1, r3
 80022c0:	4628      	mov	r0, r5
 80022c2:	f7fe fc07 	bl	8000ad4 <__addsf3>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461d      	mov	r5, r3
 80022ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80022ce:	f7fe fbff 	bl	8000ad0 <__aeabi_fsub>
 80022d2:	4603      	mov	r3, r0
 80022d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fd04 	bl	8000ce4 <__aeabi_fmul>
 80022dc:	4603      	mov	r3, r0
 80022de:	461e      	mov	r6, r3
 80022e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022e4:	f7fe fbf6 	bl	8000ad4 <__addsf3>
 80022e8:	4603      	mov	r3, r0
 80022ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fcf9 	bl	8000ce4 <__aeabi_fmul>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4619      	mov	r1, r3
 80022f6:	4630      	mov	r0, r6
 80022f8:	f7fe fbec 	bl	8000ad4 <__addsf3>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fbe4 	bl	8000ad0 <__aeabi_fsub>
 8002308:	4603      	mov	r3, r0
 800230a:	4619      	mov	r1, r3
 800230c:	4628      	mov	r0, r5
 800230e:	f7fe fce9 	bl	8000ce4 <__aeabi_fmul>
 8002312:	4603      	mov	r3, r0
 8002314:	4619      	mov	r1, r3
 8002316:	4620      	mov	r0, r4
 8002318:	f7fe fbdc 	bl	8000ad4 <__addsf3>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <MadgwickAHRSupdate+0x1078>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fcdc 	bl	8000ce4 <__aeabi_fmul>
 800232c:	4603      	mov	r3, r0
 800232e:	461d      	mov	r5, r3
 8002330:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002332:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002334:	f7fe fbce 	bl	8000ad4 <__addsf3>
 8002338:	4603      	mov	r3, r0
 800233a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fcd1 	bl	8000ce4 <__aeabi_fmul>
 8002342:	4603      	mov	r3, r0
 8002344:	461e      	mov	r6, r3
 8002346:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002348:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800234c:	f7fe fbc0 	bl	8000ad0 <__aeabi_fsub>
 8002350:	4603      	mov	r3, r0
 8002352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fbbb 	bl	8000ad0 <__aeabi_fsub>
 800235a:	4603      	mov	r3, r0
 800235c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fcc0 	bl	8000ce4 <__aeabi_fmul>
 8002364:	4603      	mov	r3, r0
 8002366:	4619      	mov	r1, r3
 8002368:	4630      	mov	r0, r6
 800236a:	f7fe fbb3 	bl	8000ad4 <__addsf3>
 800236e:	4603      	mov	r3, r0
 8002370:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fbab 	bl	8000ad0 <__aeabi_fsub>
 800237a:	4603      	mov	r3, r0
 800237c:	4619      	mov	r1, r3
 800237e:	4628      	mov	r0, r5
 8002380:	f7fe fcb0 	bl	8000ce4 <__aeabi_fmul>
 8002384:	4603      	mov	r3, r0
 8002386:	4619      	mov	r1, r3
 8002388:	4620      	mov	r0, r4
 800238a:	f7fe fba3 	bl	8000ad4 <__addsf3>
 800238e:	4603      	mov	r3, r0
 8002390:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002392:	6a39      	ldr	r1, [r7, #32]
 8002394:	6a38      	ldr	r0, [r7, #32]
 8002396:	f7fe fca5 	bl	8000ce4 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
 800239c:	461c      	mov	r4, r3
 800239e:	69f9      	ldr	r1, [r7, #28]
 80023a0:	69f8      	ldr	r0, [r7, #28]
 80023a2:	f7fe fc9f 	bl	8000ce4 <__aeabi_fmul>
 80023a6:	e007      	b.n	80023b8 <MadgwickAHRSupdate+0x1080>
 80023a8:	200002a8 	.word	0x200002a8
 80023ac:	200002ac 	.word	0x200002ac
 80023b0:	200002a4 	.word	0x200002a4
 80023b4:	2000000c 	.word	0x2000000c
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4620      	mov	r0, r4
 80023be:	f7fe fb89 	bl	8000ad4 <__addsf3>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461c      	mov	r4, r3
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	69b8      	ldr	r0, [r7, #24]
 80023ca:	f7fe fc8b 	bl	8000ce4 <__aeabi_fmul>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4619      	mov	r1, r3
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7fe fb7e 	bl	8000ad4 <__addsf3>
 80023d8:	4603      	mov	r3, r0
 80023da:	461c      	mov	r4, r3
 80023dc:	6979      	ldr	r1, [r7, #20]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7fe fc80 	bl	8000ce4 <__aeabi_fmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4619      	mov	r1, r3
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7fe fb73 	bl	8000ad4 <__addsf3>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe ff65 	bl	80012c0 <invSqrt>
 80023f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 80023fa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80023fe:	6a38      	ldr	r0, [r7, #32]
 8002400:	f7fe fc70 	bl	8000ce4 <__aeabi_fmul>
 8002404:	4603      	mov	r3, r0
 8002406:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 8002408:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800240c:	69f8      	ldr	r0, [r7, #28]
 800240e:	f7fe fc69 	bl	8000ce4 <__aeabi_fmul>
 8002412:	4603      	mov	r3, r0
 8002414:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 8002416:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800241a:	69b8      	ldr	r0, [r7, #24]
 800241c:	f7fe fc62 	bl	8000ce4 <__aeabi_fmul>
 8002420:	4603      	mov	r3, r0
 8002422:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8002424:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002428:	6978      	ldr	r0, [r7, #20]
 800242a:	f7fe fc5b 	bl	8000ce4 <__aeabi_fmul>
 800242e:	4603      	mov	r3, r0
 8002430:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002432:	4b77      	ldr	r3, [pc, #476]	; (8002610 <MadgwickAHRSupdate+0x12d8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a39      	ldr	r1, [r7, #32]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fc53 	bl	8000ce4 <__aeabi_fmul>
 800243e:	4603      	mov	r3, r0
 8002440:	4619      	mov	r1, r3
 8002442:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002446:	f7fe fb43 	bl	8000ad0 <__aeabi_fsub>
 800244a:	4603      	mov	r3, r0
 800244c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 8002450:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <MadgwickAHRSupdate+0x12d8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fc44 	bl	8000ce4 <__aeabi_fmul>
 800245c:	4603      	mov	r3, r0
 800245e:	4619      	mov	r1, r3
 8002460:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002464:	f7fe fb34 	bl	8000ad0 <__aeabi_fsub>
 8002468:	4603      	mov	r3, r0
 800246a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 800246e:	4b68      	ldr	r3, [pc, #416]	; (8002610 <MadgwickAHRSupdate+0x12d8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fc35 	bl	8000ce4 <__aeabi_fmul>
 800247a:	4603      	mov	r3, r0
 800247c:	4619      	mov	r1, r3
 800247e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002482:	f7fe fb25 	bl	8000ad0 <__aeabi_fsub>
 8002486:	4603      	mov	r3, r0
 8002488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <MadgwickAHRSupdate+0x12d8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6979      	ldr	r1, [r7, #20]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fc26 	bl	8000ce4 <__aeabi_fmul>
 8002498:	4603      	mov	r3, r0
 800249a:	4619      	mov	r1, r3
 800249c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80024a0:	f7fe fb16 	bl	8000ad0 <__aeabi_fsub>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80024aa:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80024ae:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80024b2:	f7fe fc17 	bl	8000ce4 <__aeabi_fmul>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <MadgwickAHRSupdate+0x12dc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7fe fb07 	bl	8000ad4 <__addsf3>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b52      	ldr	r3, [pc, #328]	; (8002614 <MadgwickAHRSupdate+0x12dc>)
 80024cc:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80024ce:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80024d2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80024d6:	f7fe fc05 	bl	8000ce4 <__aeabi_fmul>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	4b4e      	ldr	r3, [pc, #312]	; (8002618 <MadgwickAHRSupdate+0x12e0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7fe faf5 	bl	8000ad4 <__addsf3>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <MadgwickAHRSupdate+0x12e0>)
 80024f0:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 80024f2:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80024f6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80024fa:	f7fe fbf3 	bl	8000ce4 <__aeabi_fmul>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <MadgwickAHRSupdate+0x12e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f7fe fae3 	bl	8000ad4 <__addsf3>
 800250e:	4603      	mov	r3, r0
 8002510:	461a      	mov	r2, r3
 8002512:	4b42      	ldr	r3, [pc, #264]	; (800261c <MadgwickAHRSupdate+0x12e4>)
 8002514:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002516:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 800251a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800251e:	f7fe fbe1 	bl	8000ce4 <__aeabi_fmul>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <MadgwickAHRSupdate+0x12e8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	4610      	mov	r0, r2
 800252e:	f7fe fad1 	bl	8000ad4 <__addsf3>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <MadgwickAHRSupdate+0x12e8>)
 8002538:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <MadgwickAHRSupdate+0x12dc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a35      	ldr	r2, [pc, #212]	; (8002614 <MadgwickAHRSupdate+0x12dc>)
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fbcd 	bl	8000ce4 <__aeabi_fmul>
 800254a:	4603      	mov	r3, r0
 800254c:	461c      	mov	r4, r3
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <MadgwickAHRSupdate+0x12e0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a31      	ldr	r2, [pc, #196]	; (8002618 <MadgwickAHRSupdate+0x12e0>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fbc3 	bl	8000ce4 <__aeabi_fmul>
 800255e:	4603      	mov	r3, r0
 8002560:	4619      	mov	r1, r3
 8002562:	4620      	mov	r0, r4
 8002564:	f7fe fab6 	bl	8000ad4 <__addsf3>
 8002568:	4603      	mov	r3, r0
 800256a:	461c      	mov	r4, r3
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <MadgwickAHRSupdate+0x12e4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2a      	ldr	r2, [pc, #168]	; (800261c <MadgwickAHRSupdate+0x12e4>)
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fbb4 	bl	8000ce4 <__aeabi_fmul>
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	4620      	mov	r0, r4
 8002582:	f7fe faa7 	bl	8000ad4 <__addsf3>
 8002586:	4603      	mov	r3, r0
 8002588:	461c      	mov	r4, r3
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <MadgwickAHRSupdate+0x12e8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a24      	ldr	r2, [pc, #144]	; (8002620 <MadgwickAHRSupdate+0x12e8>)
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fba5 	bl	8000ce4 <__aeabi_fmul>
 800259a:	4603      	mov	r3, r0
 800259c:	4619      	mov	r1, r3
 800259e:	4620      	mov	r0, r4
 80025a0:	f7fe fa98 	bl	8000ad4 <__addsf3>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fe8a 	bl	80012c0 <invSqrt>
 80025ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MadgwickAHRSupdate+0x12dc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fb93 	bl	8000ce4 <__aeabi_fmul>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MadgwickAHRSupdate+0x12dc>)
 80025c4:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <MadgwickAHRSupdate+0x12e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fb88 	bl	8000ce4 <__aeabi_fmul>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MadgwickAHRSupdate+0x12e0>)
 80025da:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MadgwickAHRSupdate+0x12e4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fb7d 	bl	8000ce4 <__aeabi_fmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <MadgwickAHRSupdate+0x12e4>)
 80025f0:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MadgwickAHRSupdate+0x12e8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fb72 	bl	8000ce4 <__aeabi_fmul>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MadgwickAHRSupdate+0x12e8>)
 8002606:	601a      	str	r2, [r3, #0]
}
 8002608:	37a4      	adds	r7, #164	; 0xa4
 800260a:	46bd      	mov	sp, r7
 800260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260e:	bf00      	nop
 8002610:	20000008 	.word	0x20000008
 8002614:	2000000c 	.word	0x2000000c
 8002618:	200002a4 	.word	0x200002a4
 800261c:	200002a8 	.word	0x200002a8
 8002620:	200002ac 	.word	0x200002ac

08002624 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b09b      	sub	sp, #108	; 0x6c
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002632:	4b9d      	ldr	r3, [pc, #628]	; (80028a8 <MadgwickAHRSupdateIMU+0x284>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fb51 	bl	8000ce4 <__aeabi_fmul>
 8002642:	4603      	mov	r3, r0
 8002644:	461c      	mov	r4, r3
 8002646:	4b99      	ldr	r3, [pc, #612]	; (80028ac <MadgwickAHRSupdateIMU+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb49 	bl	8000ce4 <__aeabi_fmul>
 8002652:	4603      	mov	r3, r0
 8002654:	4619      	mov	r1, r3
 8002656:	4620      	mov	r0, r4
 8002658:	f7fe fa3a 	bl	8000ad0 <__aeabi_fsub>
 800265c:	4603      	mov	r3, r0
 800265e:	461c      	mov	r4, r3
 8002660:	4b93      	ldr	r3, [pc, #588]	; (80028b0 <MadgwickAHRSupdateIMU+0x28c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fb3c 	bl	8000ce4 <__aeabi_fmul>
 800266c:	4603      	mov	r3, r0
 800266e:	4619      	mov	r1, r3
 8002670:	4620      	mov	r0, r4
 8002672:	f7fe fa2d 	bl	8000ad0 <__aeabi_fsub>
 8002676:	4603      	mov	r3, r0
 8002678:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fb31 	bl	8000ce4 <__aeabi_fmul>
 8002682:	4603      	mov	r3, r0
 8002684:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002686:	4b8b      	ldr	r3, [pc, #556]	; (80028b4 <MadgwickAHRSupdateIMU+0x290>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fb29 	bl	8000ce4 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	461c      	mov	r4, r3
 8002696:	4b85      	ldr	r3, [pc, #532]	; (80028ac <MadgwickAHRSupdateIMU+0x288>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fb21 	bl	8000ce4 <__aeabi_fmul>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4619      	mov	r1, r3
 80026a6:	4620      	mov	r0, r4
 80026a8:	f7fe fa14 	bl	8000ad4 <__addsf3>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461c      	mov	r4, r3
 80026b0:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <MadgwickAHRSupdateIMU+0x28c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fb14 	bl	8000ce4 <__aeabi_fmul>
 80026bc:	4603      	mov	r3, r0
 80026be:	4619      	mov	r1, r3
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7fe fa05 	bl	8000ad0 <__aeabi_fsub>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fb09 	bl	8000ce4 <__aeabi_fmul>
 80026d2:	4603      	mov	r3, r0
 80026d4:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80026d6:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <MadgwickAHRSupdateIMU+0x290>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fb01 	bl	8000ce4 <__aeabi_fmul>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461c      	mov	r4, r3
 80026e6:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <MadgwickAHRSupdateIMU+0x284>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe faf9 	bl	8000ce4 <__aeabi_fmul>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4619      	mov	r1, r3
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7fe f9ea 	bl	8000ad0 <__aeabi_fsub>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461c      	mov	r4, r3
 8002700:	4b6b      	ldr	r3, [pc, #428]	; (80028b0 <MadgwickAHRSupdateIMU+0x28c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe faec 	bl	8000ce4 <__aeabi_fmul>
 800270c:	4603      	mov	r3, r0
 800270e:	4619      	mov	r1, r3
 8002710:	4620      	mov	r0, r4
 8002712:	f7fe f9df 	bl	8000ad4 <__addsf3>
 8002716:	4603      	mov	r3, r0
 8002718:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fae1 	bl	8000ce4 <__aeabi_fmul>
 8002722:	4603      	mov	r3, r0
 8002724:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <MadgwickAHRSupdateIMU+0x290>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fad9 	bl	8000ce4 <__aeabi_fmul>
 8002732:	4603      	mov	r3, r0
 8002734:	461c      	mov	r4, r3
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <MadgwickAHRSupdateIMU+0x284>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fad1 	bl	8000ce4 <__aeabi_fmul>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	4620      	mov	r0, r4
 8002748:	f7fe f9c4 	bl	8000ad4 <__addsf3>
 800274c:	4603      	mov	r3, r0
 800274e:	461c      	mov	r4, r3
 8002750:	4b56      	ldr	r3, [pc, #344]	; (80028ac <MadgwickAHRSupdateIMU+0x288>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fac4 	bl	8000ce4 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	4619      	mov	r1, r3
 8002760:	4620      	mov	r0, r4
 8002762:	f7fe f9b5 	bl	8000ad0 <__aeabi_fsub>
 8002766:	4603      	mov	r3, r0
 8002768:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fab9 	bl	8000ce4 <__aeabi_fmul>
 8002772:	4603      	mov	r3, r0
 8002774:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	f7fe fc46 	bl	800100c <__aeabi_fcmpeq>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d010      	beq.n	80027a8 <MadgwickAHRSupdateIMU+0x184>
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800278c:	f7fe fc3e 	bl	800100c <__aeabi_fcmpeq>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <MadgwickAHRSupdateIMU+0x184>
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800279c:	f7fe fc36 	bl	800100c <__aeabi_fcmpeq>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 823c 	bne.w	8002c20 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	f7fe fa9a 	bl	8000ce4 <__aeabi_fmul>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461c      	mov	r4, r3
 80027b4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80027b6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027b8:	f7fe fa94 	bl	8000ce4 <__aeabi_fmul>
 80027bc:	4603      	mov	r3, r0
 80027be:	4619      	mov	r1, r3
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7fe f987 	bl	8000ad4 <__addsf3>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461c      	mov	r4, r3
 80027ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027cc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80027ce:	f7fe fa89 	bl	8000ce4 <__aeabi_fmul>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4619      	mov	r1, r3
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7fe f97c 	bl	8000ad4 <__addsf3>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fd6e 	bl	80012c0 <invSqrt>
 80027e4:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 80027e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e8:	6838      	ldr	r0, [r7, #0]
 80027ea:	f7fe fa7b 	bl	8000ce4 <__aeabi_fmul>
 80027ee:	4603      	mov	r3, r0
 80027f0:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 80027f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027f4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027f6:	f7fe fa75 	bl	8000ce4 <__aeabi_fmul>
 80027fa:	4603      	mov	r3, r0
 80027fc:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 80027fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002800:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002802:	f7fe fa6f 	bl	8000ce4 <__aeabi_fmul>
 8002806:	4603      	mov	r3, r0
 8002808:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <MadgwickAHRSupdateIMU+0x290>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe f95f 	bl	8000ad4 <__addsf3>
 8002816:	4603      	mov	r3, r0
 8002818:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <MadgwickAHRSupdateIMU+0x284>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe f957 	bl	8000ad4 <__addsf3>
 8002826:	4603      	mov	r3, r0
 8002828:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <MadgwickAHRSupdateIMU+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe f94f 	bl	8000ad4 <__addsf3>
 8002836:	4603      	mov	r3, r0
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MadgwickAHRSupdateIMU+0x28c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe f947 	bl	8000ad4 <__addsf3>
 8002846:	4603      	mov	r3, r0
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <MadgwickAHRSupdateIMU+0x290>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fa46 	bl	8000ce4 <__aeabi_fmul>
 8002858:	4603      	mov	r3, r0
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MadgwickAHRSupdateIMU+0x284>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fa3d 	bl	8000ce4 <__aeabi_fmul>
 800286a:	4603      	mov	r3, r0
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MadgwickAHRSupdateIMU+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fa34 	bl	8000ce4 <__aeabi_fmul>
 800287c:	4603      	mov	r3, r0
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MadgwickAHRSupdateIMU+0x284>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fa2b 	bl	8000ce4 <__aeabi_fmul>
 800288e:	4603      	mov	r3, r0
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MadgwickAHRSupdateIMU+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fa22 	bl	8000ce4 <__aeabi_fmul>
 80028a0:	4603      	mov	r3, r0
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
 80028a4:	e008      	b.n	80028b8 <MadgwickAHRSupdateIMU+0x294>
 80028a6:	bf00      	nop
 80028a8:	200002a4 	.word	0x200002a4
 80028ac:	200002a8 	.word	0x200002a8
 80028b0:	200002ac 	.word	0x200002ac
 80028b4:	2000000c 	.word	0x2000000c
		q0q0 = q0 * q0;
 80028b8:	4b9a      	ldr	r3, [pc, #616]	; (8002b24 <MadgwickAHRSupdateIMU+0x500>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a99      	ldr	r2, [pc, #612]	; (8002b24 <MadgwickAHRSupdateIMU+0x500>)
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fa0e 	bl	8000ce4 <__aeabi_fmul>
 80028c8:	4603      	mov	r3, r0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 80028cc:	4b96      	ldr	r3, [pc, #600]	; (8002b28 <MadgwickAHRSupdateIMU+0x504>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a95      	ldr	r2, [pc, #596]	; (8002b28 <MadgwickAHRSupdateIMU+0x504>)
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fa04 	bl	8000ce4 <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 80028e0:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <MadgwickAHRSupdateIMU+0x508>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a91      	ldr	r2, [pc, #580]	; (8002b2c <MadgwickAHRSupdateIMU+0x508>)
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f9fa 	bl	8000ce4 <__aeabi_fmul>
 80028f0:	4603      	mov	r3, r0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 80028f4:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <MadgwickAHRSupdateIMU+0x50c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a8d      	ldr	r2, [pc, #564]	; (8002b30 <MadgwickAHRSupdateIMU+0x50c>)
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f9f0 	bl	8000ce4 <__aeabi_fmul>
 8002904:	4603      	mov	r3, r0
 8002906:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800290c:	f7fe f9ea 	bl	8000ce4 <__aeabi_fmul>
 8002910:	4603      	mov	r3, r0
 8002912:	461c      	mov	r4, r3
 8002914:	6839      	ldr	r1, [r7, #0]
 8002916:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002918:	f7fe f9e4 	bl	8000ce4 <__aeabi_fmul>
 800291c:	4603      	mov	r3, r0
 800291e:	4619      	mov	r1, r3
 8002920:	4620      	mov	r0, r4
 8002922:	f7fe f8d7 	bl	8000ad4 <__addsf3>
 8002926:	4603      	mov	r3, r0
 8002928:	461c      	mov	r4, r3
 800292a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800292e:	f7fe f9d9 	bl	8000ce4 <__aeabi_fmul>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	4620      	mov	r0, r4
 8002938:	f7fe f8cc 	bl	8000ad4 <__addsf3>
 800293c:	4603      	mov	r3, r0
 800293e:	461c      	mov	r4, r3
 8002940:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002942:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002944:	f7fe f9ce 	bl	8000ce4 <__aeabi_fmul>
 8002948:	4603      	mov	r3, r0
 800294a:	4619      	mov	r1, r3
 800294c:	4620      	mov	r0, r4
 800294e:	f7fe f8bf 	bl	8000ad0 <__aeabi_fsub>
 8002952:	4603      	mov	r3, r0
 8002954:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002956:	6a39      	ldr	r1, [r7, #32]
 8002958:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800295a:	f7fe f9c3 	bl	8000ce4 <__aeabi_fmul>
 800295e:	4603      	mov	r3, r0
 8002960:	461c      	mov	r4, r3
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002966:	f7fe f9bd 	bl	8000ce4 <__aeabi_fmul>
 800296a:	4603      	mov	r3, r0
 800296c:	4619      	mov	r1, r3
 800296e:	4620      	mov	r0, r4
 8002970:	f7fe f8ae 	bl	8000ad0 <__aeabi_fsub>
 8002974:	4603      	mov	r3, r0
 8002976:	461c      	mov	r4, r3
 8002978:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800297c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800297e:	f7fe f9b1 	bl	8000ce4 <__aeabi_fmul>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <MadgwickAHRSupdateIMU+0x504>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f7fe f9a9 	bl	8000ce4 <__aeabi_fmul>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	4620      	mov	r0, r4
 8002998:	f7fe f89c 	bl	8000ad4 <__addsf3>
 800299c:	4603      	mov	r3, r0
 800299e:	461c      	mov	r4, r3
 80029a0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80029a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80029a4:	f7fe f99e 	bl	8000ce4 <__aeabi_fmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7fe f88f 	bl	8000ad0 <__aeabi_fsub>
 80029b2:	4603      	mov	r3, r0
 80029b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f88a 	bl	8000ad0 <__aeabi_fsub>
 80029bc:	4603      	mov	r3, r0
 80029be:	461c      	mov	r4, r3
 80029c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029c4:	f7fe f98e 	bl	8000ce4 <__aeabi_fmul>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4619      	mov	r1, r3
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7fe f881 	bl	8000ad4 <__addsf3>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461c      	mov	r4, r3
 80029d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029da:	f7fe f983 	bl	8000ce4 <__aeabi_fmul>
 80029de:	4603      	mov	r3, r0
 80029e0:	4619      	mov	r1, r3
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7fe f876 	bl	8000ad4 <__addsf3>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461c      	mov	r4, r3
 80029ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029f0:	f7fe f978 	bl	8000ce4 <__aeabi_fmul>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4619      	mov	r1, r3
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7fe f86b 	bl	8000ad4 <__addsf3>
 80029fe:	4603      	mov	r3, r0
 8002a00:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002a02:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a08:	f7fe f96c 	bl	8000ce4 <__aeabi_fmul>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <MadgwickAHRSupdateIMU+0x508>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f7fe f964 	bl	8000ce4 <__aeabi_fmul>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461c      	mov	r4, r3
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a24:	f7fe f95e 	bl	8000ce4 <__aeabi_fmul>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7fe f851 	bl	8000ad4 <__addsf3>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461c      	mov	r4, r3
 8002a36:	6a39      	ldr	r1, [r7, #32]
 8002a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a3a:	f7fe f953 	bl	8000ce4 <__aeabi_fmul>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7fe f846 	bl	8000ad4 <__addsf3>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461c      	mov	r4, r3
 8002a4c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a50:	f7fe f948 	bl	8000ce4 <__aeabi_fmul>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4619      	mov	r1, r3
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7fe f839 	bl	8000ad0 <__aeabi_fsub>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f834 	bl	8000ad0 <__aeabi_fsub>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a70:	f7fe f938 	bl	8000ce4 <__aeabi_fmul>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4619      	mov	r1, r3
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f7fe f82b 	bl	8000ad4 <__addsf3>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461c      	mov	r4, r3
 8002a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a86:	f7fe f92d 	bl	8000ce4 <__aeabi_fmul>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7fe f820 	bl	8000ad4 <__addsf3>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461c      	mov	r4, r3
 8002a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a9c:	f7fe f922 	bl	8000ce4 <__aeabi_fmul>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7fe f815 	bl	8000ad4 <__addsf3>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002aae:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ab4:	f7fe f916 	bl	8000ce4 <__aeabi_fmul>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <MadgwickAHRSupdateIMU+0x50c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f7fe f90e 	bl	8000ce4 <__aeabi_fmul>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461c      	mov	r4, r3
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ad0:	f7fe f908 	bl	8000ce4 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7fd fff9 	bl	8000ad0 <__aeabi_fsub>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461c      	mov	r4, r3
 8002ae2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ae8:	f7fe f8fc 	bl	8000ce4 <__aeabi_fmul>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MadgwickAHRSupdateIMU+0x50c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f7fe f8f4 	bl	8000ce4 <__aeabi_fmul>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4619      	mov	r1, r3
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7fd ffe7 	bl	8000ad4 <__addsf3>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461c      	mov	r4, r3
 8002b0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b0e:	f7fe f8e9 	bl	8000ce4 <__aeabi_fmul>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4619      	mov	r1, r3
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7fd ffda 	bl	8000ad0 <__aeabi_fsub>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e008      	b.n	8002b34 <MadgwickAHRSupdateIMU+0x510>
 8002b22:	bf00      	nop
 8002b24:	2000000c 	.word	0x2000000c
 8002b28:	200002a4 	.word	0x200002a4
 8002b2c:	200002a8 	.word	0x200002a8
 8002b30:	200002ac 	.word	0x200002ac
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002b34:	69f9      	ldr	r1, [r7, #28]
 8002b36:	69f8      	ldr	r0, [r7, #28]
 8002b38:	f7fe f8d4 	bl	8000ce4 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461c      	mov	r4, r3
 8002b40:	69b9      	ldr	r1, [r7, #24]
 8002b42:	69b8      	ldr	r0, [r7, #24]
 8002b44:	f7fe f8ce 	bl	8000ce4 <__aeabi_fmul>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7fd ffc1 	bl	8000ad4 <__addsf3>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461c      	mov	r4, r3
 8002b56:	6979      	ldr	r1, [r7, #20]
 8002b58:	6978      	ldr	r0, [r7, #20]
 8002b5a:	f7fe f8c3 	bl	8000ce4 <__aeabi_fmul>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4619      	mov	r1, r3
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7fd ffb6 	bl	8000ad4 <__addsf3>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461c      	mov	r4, r3
 8002b6c:	6939      	ldr	r1, [r7, #16]
 8002b6e:	6938      	ldr	r0, [r7, #16]
 8002b70:	f7fe f8b8 	bl	8000ce4 <__aeabi_fmul>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4619      	mov	r1, r3
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7fd ffab 	bl	8000ad4 <__addsf3>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fb9d 	bl	80012c0 <invSqrt>
 8002b86:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002b88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b8a:	69f8      	ldr	r0, [r7, #28]
 8002b8c:	f7fe f8aa 	bl	8000ce4 <__aeabi_fmul>
 8002b90:	4603      	mov	r3, r0
 8002b92:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b96:	69b8      	ldr	r0, [r7, #24]
 8002b98:	f7fe f8a4 	bl	8000ce4 <__aeabi_fmul>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7fe f89e 	bl	8000ce4 <__aeabi_fmul>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002bac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bae:	6938      	ldr	r0, [r7, #16]
 8002bb0:	f7fe f898 	bl	8000ce4 <__aeabi_fmul>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002bb8:	4b6e      	ldr	r3, [pc, #440]	; (8002d74 <MadgwickAHRSupdateIMU+0x750>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69f9      	ldr	r1, [r7, #28]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe f890 	bl	8000ce4 <__aeabi_fmul>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002bca:	f7fd ff81 	bl	8000ad0 <__aeabi_fsub>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002bd2:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <MadgwickAHRSupdateIMU+0x750>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f883 	bl	8000ce4 <__aeabi_fmul>
 8002bde:	4603      	mov	r3, r0
 8002be0:	4619      	mov	r1, r3
 8002be2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002be4:	f7fd ff74 	bl	8000ad0 <__aeabi_fsub>
 8002be8:	4603      	mov	r3, r0
 8002bea:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002bec:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <MadgwickAHRSupdateIMU+0x750>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6979      	ldr	r1, [r7, #20]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe f876 	bl	8000ce4 <__aeabi_fmul>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002bfe:	f7fd ff67 	bl	8000ad0 <__aeabi_fsub>
 8002c02:	4603      	mov	r3, r0
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <MadgwickAHRSupdateIMU+0x750>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f869 	bl	8000ce4 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4619      	mov	r1, r3
 8002c16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c18:	f7fd ff5a 	bl	8000ad0 <__aeabi_fsub>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002c20:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c24:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c26:	f7fe f85d 	bl	8000ce4 <__aeabi_fmul>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b52      	ldr	r3, [pc, #328]	; (8002d78 <MadgwickAHRSupdateIMU+0x754>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f7fd ff4d 	bl	8000ad4 <__addsf3>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <MadgwickAHRSupdateIMU+0x754>)
 8002c40:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002c42:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c46:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002c48:	f7fe f84c 	bl	8000ce4 <__aeabi_fmul>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <MadgwickAHRSupdateIMU+0x758>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f7fd ff3c 	bl	8000ad4 <__addsf3>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <MadgwickAHRSupdateIMU+0x758>)
 8002c62:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002c64:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c68:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c6a:	f7fe f83b 	bl	8000ce4 <__aeabi_fmul>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <MadgwickAHRSupdateIMU+0x75c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fd ff2b 	bl	8000ad4 <__addsf3>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <MadgwickAHRSupdateIMU+0x75c>)
 8002c84:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002c86:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c8c:	f7fe f82a 	bl	8000ce4 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <MadgwickAHRSupdateIMU+0x760>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f7fd ff1a 	bl	8000ad4 <__addsf3>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <MadgwickAHRSupdateIMU+0x760>)
 8002ca6:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002ca8:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <MadgwickAHRSupdateIMU+0x754>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a32      	ldr	r2, [pc, #200]	; (8002d78 <MadgwickAHRSupdateIMU+0x754>)
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe f816 	bl	8000ce4 <__aeabi_fmul>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461c      	mov	r4, r3
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <MadgwickAHRSupdateIMU+0x758>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <MadgwickAHRSupdateIMU+0x758>)
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f80c 	bl	8000ce4 <__aeabi_fmul>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7fd feff 	bl	8000ad4 <__addsf3>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461c      	mov	r4, r3
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <MadgwickAHRSupdateIMU+0x75c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <MadgwickAHRSupdateIMU+0x75c>)
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fffd 	bl	8000ce4 <__aeabi_fmul>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4619      	mov	r1, r3
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7fd fef0 	bl	8000ad4 <__addsf3>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461c      	mov	r4, r3
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <MadgwickAHRSupdateIMU+0x760>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <MadgwickAHRSupdateIMU+0x760>)
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd ffee 	bl	8000ce4 <__aeabi_fmul>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7fd fee1 	bl	8000ad4 <__addsf3>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fad3 	bl	80012c0 <invSqrt>
 8002d1a:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <MadgwickAHRSupdateIMU+0x754>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ffde 	bl	8000ce4 <__aeabi_fmul>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MadgwickAHRSupdateIMU+0x754>)
 8002d2e:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <MadgwickAHRSupdateIMU+0x758>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd ffd4 	bl	8000ce4 <__aeabi_fmul>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <MadgwickAHRSupdateIMU+0x758>)
 8002d42:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MadgwickAHRSupdateIMU+0x75c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd ffca 	bl	8000ce4 <__aeabi_fmul>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <MadgwickAHRSupdateIMU+0x75c>)
 8002d56:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <MadgwickAHRSupdateIMU+0x760>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd ffc0 	bl	8000ce4 <__aeabi_fmul>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <MadgwickAHRSupdateIMU+0x760>)
 8002d6a:	601a      	str	r2, [r3, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	376c      	adds	r7, #108	; 0x6c
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	20000008 	.word	0x20000008
 8002d78:	2000000c 	.word	0x2000000c
 8002d7c:	200002a4 	.word	0x200002a4
 8002d80:	200002a8 	.word	0x200002a8
 8002d84:	200002ac 	.word	0x200002ac

08002d88 <computeAngles>:

void computeAngles()
{
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2) * 57.29578f;
 8002d8c:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <computeAngles+0x174>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5b      	ldr	r2, [pc, #364]	; (8002f00 <computeAngles+0x178>)
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd ffa4 	bl	8000ce4 <__aeabi_fmul>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461c      	mov	r4, r3
 8002da0:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <computeAngles+0x17c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <computeAngles+0x180>)
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd ff9a 	bl	8000ce4 <__aeabi_fmul>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4619      	mov	r1, r3
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7fd fe8d 	bl	8000ad4 <__addsf3>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461c      	mov	r4, r3
 8002dbe:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <computeAngles+0x178>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <computeAngles+0x178>)
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd ff8b 	bl	8000ce4 <__aeabi_fmul>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002dd6:	f7fd fe7b 	bl	8000ad0 <__aeabi_fsub>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461d      	mov	r5, r3
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <computeAngles+0x17c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a48      	ldr	r2, [pc, #288]	; (8002f04 <computeAngles+0x17c>)
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ff7b 	bl	8000ce4 <__aeabi_fmul>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	4628      	mov	r0, r5
 8002df4:	f7fd fe6c 	bl	8000ad0 <__aeabi_fsub>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f009 fae7 	bl	800c3d0 <atan2f>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4941      	ldr	r1, [pc, #260]	; (8002f0c <computeAngles+0x184>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd ff6c 	bl	8000ce4 <__aeabi_fmul>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <computeAngles+0x188>)
 8002e12:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2)) * 57.29578f;
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <computeAngles+0x178>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <computeAngles+0x180>)
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd ff60 	bl	8000ce4 <__aeabi_fmul>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461c      	mov	r4, r3
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <computeAngles+0x174>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a35      	ldr	r2, [pc, #212]	; (8002f04 <computeAngles+0x17c>)
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd ff56 	bl	8000ce4 <__aeabi_fmul>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7fd fe47 	bl	8000ad0 <__aeabi_fsub>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd ff4b 	bl	8000ce4 <__aeabi_fmul>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f009 fa9d 	bl	800c390 <asinf>
 8002e56:	4603      	mov	r3, r0
 8002e58:	492c      	ldr	r1, [pc, #176]	; (8002f0c <computeAngles+0x184>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd ff42 	bl	8000ce4 <__aeabi_fmul>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <computeAngles+0x18c>)
 8002e66:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3) * 57.29578f;
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <computeAngles+0x178>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <computeAngles+0x17c>)
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd ff36 	bl	8000ce4 <__aeabi_fmul>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <computeAngles+0x174>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <computeAngles+0x180>)
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd ff2c 	bl	8000ce4 <__aeabi_fmul>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7fd fe1f 	bl	8000ad4 <__addsf3>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461c      	mov	r4, r3
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <computeAngles+0x17c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <computeAngles+0x17c>)
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd ff1d 	bl	8000ce4 <__aeabi_fmul>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002eb2:	f7fd fe0d 	bl	8000ad0 <__aeabi_fsub>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461d      	mov	r5, r3
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <computeAngles+0x180>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <computeAngles+0x180>)
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd ff0d 	bl	8000ce4 <__aeabi_fmul>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f7fd fdfe 	bl	8000ad0 <__aeabi_fsub>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f009 fa79 	bl	800c3d0 <atan2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	490a      	ldr	r1, [pc, #40]	; (8002f0c <computeAngles+0x184>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fefe 	bl	8000ce4 <__aeabi_fmul>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <computeAngles+0x190>)
 8002eee:	601a      	str	r2, [r3, #0]
	anglesComputed = 1;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <computeAngles+0x194>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2000000c 	.word	0x2000000c
 8002f00:	200002a4 	.word	0x200002a4
 8002f04:	200002a8 	.word	0x200002a8
 8002f08:	200002ac 	.word	0x200002ac
 8002f0c:	42652ee1 	.word	0x42652ee1
 8002f10:	200002b0 	.word	0x200002b0
 8002f14:	200002b4 	.word	0x200002b4
 8002f18:	200002b8 	.word	0x200002b8
 8002f1c:	200002bc 	.word	0x200002bc

08002f20 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	72fb      	strb	r3, [r7, #11]
 8002f30:	4613      	mov	r3, r2
 8002f32:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8002f34:	7afb      	ldrb	r3, [r7, #11]
 8002f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f3a:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002f3c:	7afb      	ldrb	r3, [r7, #11]
 8002f3e:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002f40:	f107 0214 	add.w	r2, r7, #20
 8002f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	21d2      	movs	r1, #210	; 0xd2
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f002 fff0 	bl	8005f34 <HAL_I2C_Master_Transmit>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f5e:	9200      	str	r2, [sp, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	21d2      	movs	r1, #210	; 0xd2
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f003 f8e3 	bl	8006130 <HAL_I2C_Master_Receive>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	75fb      	strb	r3, [r7, #23]
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t* pData) // ***
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b088      	sub	sp, #32
 8002f7a:	af02      	add	r7, sp, #8
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 8002f84:	7afb      	ldrb	r3, [r7, #11]
 8002f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f8a:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002f90:	f107 0214 	add.w	r2, r7, #20
 8002f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	21d2      	movs	r1, #210	; 0xd2
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f002 ffc8 	bl	8005f34 <HAL_I2C_Master_Transmit>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
 8002fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	21d2      	movs	r1, #210	; 0xd2
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f003 f8bb 	bl	8006130 <HAL_I2C_Master_Receive>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]
}
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af02      	add	r7, sp, #8
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70fb      	strb	r3, [r7, #3]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fdc:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	733b      	strb	r3, [r7, #12]
 8002fe2:	78bb      	ldrb	r3, [r7, #2]
 8002fe4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8002fe6:	f107 020c 	add.w	r2, r7, #12
 8002fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	21d2      	movs	r1, #210	; 0xd2
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f002 ff9d 	bl	8005f34 <HAL_I2C_Master_Transmit>
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]
 800300e:	4613      	mov	r3, r2
 8003010:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8003012:	2230      	movs	r2, #48	; 0x30
 8003014:	217f      	movs	r1, #127	; 0x7f
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffd5 	bl	8002fc6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800301c:	2001      	movs	r0, #1
 800301e:	f001 ff5d 	bl	8004edc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8003022:	220c      	movs	r2, #12
 8003024:	2103      	movs	r1, #3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ffcd 	bl	8002fc6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800302c:	2001      	movs	r0, #1
 800302e:	f001 ff55 	bl	8004edc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	461a      	mov	r2, r3
 8003036:	2104      	movs	r1, #4
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ffc4 	bl	8002fc6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800303e:	2001      	movs	r0, #1
 8003040:	f001 ff4c 	bl	8004edc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 8003044:	78bb      	ldrb	r3, [r7, #2]
 8003046:	461a      	mov	r2, r3
 8003048:	2106      	movs	r1, #6
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffbb 	bl	8002fc6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003050:	2001      	movs	r0, #1
 8003052:	f001 ff43 	bl	8004edc <HAL_Delay>
  }
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c, uint8_t reg)
  {
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 800306a:	2230      	movs	r2, #48	; 0x30
 800306c:	217f      	movs	r1, #127	; 0x7f
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffa9 	bl	8002fc6 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003074:	2001      	movs	r0, #1
 8003076:	f001 ff31 	bl	8004edc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C|0x80);
 800307a:	228c      	movs	r2, #140	; 0x8c
 800307c:	2103      	movs	r1, #3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffa1 	bl	8002fc6 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003084:	2001      	movs	r0, #1
 8003086:	f001 ff29 	bl	8004edc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);// set reg addr
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	461a      	mov	r2, r3
 800308e:	2104      	movs	r1, #4
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff98 	bl	8002fc6 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003096:	2001      	movs	r0, #1
 8003098:	f001 ff20 	bl	8004edc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,0xff);//read
 800309c:	22ff      	movs	r2, #255	; 0xff
 800309e:	2106      	movs	r1, #6
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff90 	bl	8002fc6 <ICM_WriteOneByte>
  	HAL_Delay(1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f001 ff18 	bl	8004edc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x7F, 0x00);
 80030ac:	2200      	movs	r2, #0
 80030ae:	217f      	movs	r1, #127	; 0x7f
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff88 	bl	8002fc6 <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c, 0x3B,&Data);
 80030b6:	f107 030f 	add.w	r3, r7, #15
 80030ba:	461a      	mov	r2, r3
 80030bc:	213b      	movs	r1, #59	; 0x3b
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ff59 	bl	8002f76 <ICM_ReadOneByte>
    HAL_Delay(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f001 ff09 	bl	8004edc <HAL_Delay>
  	return Data;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
  }
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c, int16_t magn[3]) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];
    mag_buffer[0] =ICM_Mag_Read(hi2c, 0x01);
 80030de:	2101      	movs	r1, #1
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ffbc 	bl	800305e <ICM_Mag_Read>
 80030e6:	4603      	mov	r3, r0
 80030e8:	733b      	strb	r3, [r7, #12]
    mag_buffer[1] =ICM_Mag_Read(hi2c, 0x11);
 80030ea:	2111      	movs	r1, #17
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ffb6 	bl	800305e <ICM_Mag_Read>
 80030f2:	4603      	mov	r3, r0
 80030f4:	737b      	strb	r3, [r7, #13]
    mag_buffer[2] =ICM_Mag_Read(hi2c, 0x12);
 80030f6:	2112      	movs	r1, #18
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ffb0 	bl	800305e <ICM_Mag_Read>
 80030fe:	4603      	mov	r3, r0
 8003100:	73bb      	strb	r3, [r7, #14]
    magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8003102:	7b7b      	ldrb	r3, [r7, #13]
 8003104:	b21a      	sxth	r2, r3
 8003106:	7bbb      	ldrb	r3, [r7, #14]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	b21b      	sxth	r3, r3
 800310c:	4313      	orrs	r3, r2
 800310e:	b21a      	sxth	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(hi2c, 0x13);
 8003114:	2113      	movs	r1, #19
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa1 	bl	800305e <ICM_Mag_Read>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]
    mag_buffer[4] =ICM_Mag_Read(hi2c, 0x14);
 8003120:	2114      	movs	r1, #20
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff9b 	bl	800305e <ICM_Mag_Read>
 8003128:	4603      	mov	r3, r0
 800312a:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	b219      	sxth	r1, r3
 8003130:	7c3b      	ldrb	r3, [r7, #16]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	b21a      	sxth	r2, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	3302      	adds	r3, #2
 800313a:	430a      	orrs	r2, r1
 800313c:	b212      	sxth	r2, r2
 800313e:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(hi2c, 0x15);
 8003140:	2115      	movs	r1, #21
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ff8b 	bl	800305e <ICM_Mag_Read>
 8003148:	4603      	mov	r3, r0
 800314a:	747b      	strb	r3, [r7, #17]
    mag_buffer[6] =ICM_Mag_Read(hi2c, 0x16);
 800314c:	2116      	movs	r1, #22
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff85 	bl	800305e <ICM_Mag_Read>
 8003154:	4603      	mov	r3, r0
 8003156:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8003158:	7c7b      	ldrb	r3, [r7, #17]
 800315a:	b219      	sxth	r1, r3
 800315c:	7cbb      	ldrb	r3, [r7, #18]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	b21a      	sxth	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3304      	adds	r3, #4
 8003166:	430a      	orrs	r2, r1
 8003168:	b212      	sxth	r2, r2
 800316a:	801a      	strh	r2, [r3, #0]

	i2c_Mag_write(hi2c, 0x31,0x01);
 800316c:	2201      	movs	r2, #1
 800316e:	2131      	movs	r1, #49	; 0x31
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff46 	bl	8003002 <i2c_Mag_write>
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8003186:	200a      	movs	r0, #10
 8003188:	f001 fea8 	bl	8004edc <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 800318c:	2100      	movs	r1, #0
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9c0 	bl	8003514 <ICM_SelectBank>
	HAL_Delay(10);
 8003194:	200a      	movs	r0, #10
 8003196:	f001 fea1 	bl	8004edc <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f9ca 	bl	8003534 <ICM_Enable_I2C>
	HAL_Delay(10);
 80031a0:	200a      	movs	r0, #10
 80031a2:	f001 fe9b 	bl	8004edc <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 80031a6:	2101      	movs	r1, #1
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f9d0 	bl	800354e <ICM_SetClock>
	HAL_Delay(10);
 80031ae:	200a      	movs	r0, #10
 80031b0:	f001 fe94 	bl	8004edc <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f9da 	bl	800356e <ICM_AccelGyroOff>
	HAL_Delay(20);
 80031ba:	2014      	movs	r0, #20
 80031bc:	f001 fe8e 	bl	8004edc <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f9e1 	bl	8003588 <ICM_AccelGyroOn>
	HAL_Delay(10);
 80031c6:	200a      	movs	r0, #10
 80031c8:	f001 fe88 	bl	8004edc <HAL_Delay>
	ICM_Initialize(hi2c);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f804 	bl	80031da <ICM_Initialize>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 80031e2:	2120      	movs	r1, #32
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f995 	bl	8003514 <ICM_SelectBank>
	HAL_Delay(20);
 80031ea:	2014      	movs	r0, #20
 80031ec:	f001 fe76 	bl	8004edc <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 80031f0:	2229      	movs	r2, #41	; 0x29
 80031f2:	2100      	movs	r1, #0
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f9d4 	bl	80035a2 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 80031fa:	200a      	movs	r0, #10
 80031fc:	f001 fe6e 	bl	8004edc <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 8003200:	220a      	movs	r2, #10
 8003202:	2100      	movs	r1, #0
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fede 	bl	8002fc6 <ICM_WriteOneByte>
	HAL_Delay(10);
 800320a:	200a      	movs	r0, #10
 800320c:	f001 fe66 	bl	8004edc <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 8003210:	2215      	movs	r2, #21
 8003212:	2114      	movs	r1, #20
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fed6 	bl	8002fc6 <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 800321a:	2200      	movs	r2, #0
 800321c:	2110      	movs	r1, #16
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fed1 	bl	8002fc6 <ICM_WriteOneByte>
	HAL_Delay(10);
 8003224:	200a      	movs	r0, #10
 8003226:	f001 fe59 	bl	8004edc <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 800322a:	220a      	movs	r2, #10
 800322c:	2111      	movs	r1, #17
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fec9 	bl	8002fc6 <ICM_WriteOneByte>
	HAL_Delay(10);
 8003234:	200a      	movs	r0, #10
 8003236:	f001 fe51 	bl	8004edc <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 800323a:	2120      	movs	r1, #32
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f969 	bl	8003514 <ICM_SelectBank>
	HAL_Delay(20);
 8003242:	2014      	movs	r0, #20
 8003244:	f001 fe4a 	bl	8004edc <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 8003248:	2200      	movs	r2, #0
 800324a:	217f      	movs	r1, #127	; 0x7f
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff feba 	bl	8002fc6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8003252:	2230      	movs	r2, #48	; 0x30
 8003254:	210f      	movs	r1, #15
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff feb5 	bl	8002fc6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 800325c:	2220      	movs	r2, #32
 800325e:	2103      	movs	r1, #3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff feb0 	bl	8002fc6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 8003266:	2230      	movs	r2, #48	; 0x30
 8003268:	217f      	movs	r1, #127	; 0x7f
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff feab 	bl	8002fc6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8003270:	224d      	movs	r2, #77	; 0x4d
 8003272:	2101      	movs	r1, #1
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fea6 	bl	8002fc6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 800327a:	2201      	movs	r2, #1
 800327c:	2102      	movs	r1, #2
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fea1 	bl	8002fc6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8003284:	2281      	movs	r2, #129	; 0x81
 8003286:	2105      	movs	r1, #5
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff fe9c 	bl	8002fc6 <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 800328e:	2201      	movs	r2, #1
 8003290:	2132      	movs	r1, #50	; 0x32
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff feb5 	bl	8003002 <i2c_Mag_write>
	HAL_Delay(1000);
 8003298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800329c:	f001 fe1e 	bl	8004edc <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80032a0:	2202      	movs	r2, #2
 80032a2:	2131      	movs	r1, #49	; 0x31
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff feac 	bl	8003002 <i2c_Mag_write>

	return 1337;
 80032aa:	f240 5339 	movw	r3, #1337	; 0x539
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 80032c0:	f107 020c 	add.w	r2, r7, #12
 80032c4:	230c      	movs	r3, #12
 80032c6:	212d      	movs	r1, #45	; 0x2d
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fe29 	bl	8002f20 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 80032ce:	7b3b      	ldrb	r3, [r7, #12]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	7b7b      	ldrb	r3, [r7, #13]
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b21b      	sxth	r3, r3
 80032dc:	b29a      	uxth	r2, r3
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <ICM_ReadAccelGyro+0x98>)
 80032e0:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 80032e2:	7bbb      	ldrb	r3, [r7, #14]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	b21a      	sxth	r2, r3
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <ICM_ReadAccelGyro+0x98>)
 80032f4:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 80032f6:	7c3b      	ldrb	r3, [r7, #16]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	7c7b      	ldrb	r3, [r7, #17]
 80032fe:	b21b      	sxth	r3, r3
 8003300:	4313      	orrs	r3, r2
 8003302:	b21b      	sxth	r3, r3
 8003304:	b29a      	uxth	r2, r3
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <ICM_ReadAccelGyro+0x98>)
 8003308:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800330a:	7cbb      	ldrb	r3, [r7, #18]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	b21a      	sxth	r2, r3
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	b21b      	sxth	r3, r3
 8003314:	4313      	orrs	r3, r2
 8003316:	b21b      	sxth	r3, r3
 8003318:	b29a      	uxth	r2, r3
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <ICM_ReadAccelGyro+0x9c>)
 800331c:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 800331e:	7d3b      	ldrb	r3, [r7, #20]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	b21a      	sxth	r2, r3
 8003324:	7d7b      	ldrb	r3, [r7, #21]
 8003326:	b21b      	sxth	r3, r3
 8003328:	4313      	orrs	r3, r2
 800332a:	b21b      	sxth	r3, r3
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <ICM_ReadAccelGyro+0x9c>)
 8003330:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8003332:	7dbb      	ldrb	r3, [r7, #22]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	b21a      	sxth	r2, r3
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	b21b      	sxth	r3, r3
 800333c:	4313      	orrs	r3, r2
 800333e:	b21b      	sxth	r3, r3
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <ICM_ReadAccelGyro+0x9c>)
 8003344:	809a      	strh	r2, [r3, #4]
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200002c0 	.word	0x200002c0
 8003354:	200002c8 	.word	0x200002c8

08003358 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, uint16_t raw_accel_data[3], uint16_t raw_gyro_data[3]) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <ICM_CorrectAccelGyro+0x1a0>)
 800336c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003370:	2b00      	cmp	r3, #0
 8003372:	da00      	bge.n	8003376 <ICM_CorrectAccelGyro+0x1e>
 8003374:	330f      	adds	r3, #15
 8003376:	111b      	asrs	r3, r3, #4
 8003378:	b21b      	sxth	r3, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f840 	bl	8000404 <__aeabi_i2d>
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	4b5c      	ldr	r3, [pc, #368]	; (80034fc <ICM_CorrectAccelGyro+0x1a4>)
 800338a:	f7fd f9cf 	bl	800072c <__aeabi_ddiv>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fb77 	bl	8000a88 <__aeabi_d2uiz>
 800339a:	4603      	mov	r3, r0
 800339c:	b29a      	uxth	r2, r3
 800339e:	4b58      	ldr	r3, [pc, #352]	; (8003500 <ICM_CorrectAccelGyro+0x1a8>)
 80033a0:	801a      	strh	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3302      	adds	r3, #2
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <ICM_CorrectAccelGyro+0x1a0>)
 80033ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	da00      	bge.n	80033b6 <ICM_CorrectAccelGyro+0x5e>
 80033b4:	330f      	adds	r3, #15
 80033b6:	111b      	asrs	r3, r3, #4
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f820 	bl	8000404 <__aeabi_i2d>
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <ICM_CorrectAccelGyro+0x1a4>)
 80033ca:	f7fd f9af 	bl	800072c <__aeabi_ddiv>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7fd fb57 	bl	8000a88 <__aeabi_d2uiz>
 80033da:	4603      	mov	r3, r0
 80033dc:	b29a      	uxth	r2, r3
 80033de:	4b48      	ldr	r3, [pc, #288]	; (8003500 <ICM_CorrectAccelGyro+0x1a8>)
 80033e0:	805a      	strh	r2, [r3, #2]
	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3304      	adds	r3, #4
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <ICM_CorrectAccelGyro+0x1a0>)
 80033ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da00      	bge.n	80033f6 <ICM_CorrectAccelGyro+0x9e>
 80033f4:	330f      	adds	r3, #15
 80033f6:	111b      	asrs	r3, r3, #4
 80033f8:	b21b      	sxth	r3, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd f800 	bl	8000404 <__aeabi_i2d>
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <ICM_CorrectAccelGyro+0x1a4>)
 800340a:	f7fd f98f 	bl	800072c <__aeabi_ddiv>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	f7fd fb37 	bl	8000a88 <__aeabi_d2uiz>
 800341a:	4603      	mov	r3, r0
 800341c:	b29a      	uxth	r2, r3
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <ICM_CorrectAccelGyro+0x1a8>)
 8003420:	809a      	strh	r2, [r3, #4]

	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <ICM_CorrectAccelGyro+0x1ac>)
 800342a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	4618      	mov	r0, r3
 8003432:	f7fc ffe7 	bl	8000404 <__aeabi_i2d>
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <ICM_CorrectAccelGyro+0x1b0>)
 800343c:	f7fd f84c 	bl	80004d8 <__aeabi_dmul>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	4b2f      	ldr	r3, [pc, #188]	; (800350c <ICM_CorrectAccelGyro+0x1b4>)
 800344e:	f7fd f96d 	bl	800072c <__aeabi_ddiv>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f7fd fb15 	bl	8000a88 <__aeabi_d2uiz>
 800345e:	4603      	mov	r3, r0
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <ICM_CorrectAccelGyro+0x1b8>)
 8003464:	801a      	strh	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <ICM_CorrectAccelGyro+0x1ac>)
 800346e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	4618      	mov	r0, r3
 8003476:	f7fc ffc5 	bl	8000404 <__aeabi_i2d>
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <ICM_CorrectAccelGyro+0x1b0>)
 8003480:	f7fd f82a 	bl	80004d8 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <ICM_CorrectAccelGyro+0x1b4>)
 8003492:	f7fd f94b 	bl	800072c <__aeabi_ddiv>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f7fd faf3 	bl	8000a88 <__aeabi_d2uiz>
 80034a2:	4603      	mov	r3, r0
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <ICM_CorrectAccelGyro+0x1b8>)
 80034a8:	805a      	strh	r2, [r3, #2]
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <ICM_CorrectAccelGyro+0x1ac>)
 80034b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fc ffa3 	bl	8000404 <__aeabi_i2d>
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <ICM_CorrectAccelGyro+0x1b0>)
 80034c4:	f7fd f808 	bl	80004d8 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <ICM_CorrectAccelGyro+0x1b4>)
 80034d6:	f7fd f929 	bl	800072c <__aeabi_ddiv>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	f7fd fad1 	bl	8000a88 <__aeabi_d2uiz>
 80034e6:	4603      	mov	r3, r0
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <ICM_CorrectAccelGyro+0x1b8>)
 80034ec:	809a      	strh	r2, [r3, #4]
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200002e8 	.word	0x200002e8
 80034fc:	40d00000 	.word	0x40d00000
 8003500:	200002d0 	.word	0x200002d0
 8003504:	200002e0 	.word	0x200002e0
 8003508:	406f4000 	.word	0x406f4000
 800350c:	40fffb80 	.word	0x40fffb80
 8003510:	200002d8 	.word	0x200002d8

08003514 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	461a      	mov	r2, r3
 8003524:	217f      	movs	r1, #127	; 0x7f
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fd4d 	bl	8002fc6 <ICM_WriteOneByte>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 800353c:	2220      	movs	r2, #32
 800353e:	2103      	movs	r1, #3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fd40 	bl	8002fc6 <ICM_WriteOneByte>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	461a      	mov	r2, r3
 800355e:	2106      	movs	r1, #6
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fd30 	bl	8002fc6 <ICM_WriteOneByte>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 8003576:	223f      	movs	r2, #63	; 0x3f
 8003578:	2107      	movs	r1, #7
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fd23 	bl	8002fc6 <ICM_WriteOneByte>
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 8003590:	2200      	movs	r2, #0
 8003592:	2107      	movs	r1, #7
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fd16 	bl	8002fc6 <ICM_WriteOneByte>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
 80035ae:	4613      	mov	r3, r2
 80035b0:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	78bb      	ldrb	r3, [r7, #2]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	2101      	movs	r1, #1
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fd01 	bl	8002fc6 <ICM_WriteOneByte>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e029      	b.n	800362e <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fe6c 	bl	80032b8 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 80035e0:	4b5d      	ldr	r3, [pc, #372]	; (8003758 <ICM20948_Calibrate+0x18c>)
 80035e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	4b5c      	ldr	r3, [pc, #368]	; (800375c <ICM20948_Calibrate+0x190>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	4413      	add	r3, r2
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b21a      	sxth	r2, r3
 80035f2:	4b59      	ldr	r3, [pc, #356]	; (8003758 <ICM20948_Calibrate+0x18c>)
 80035f4:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 80035f6:	4b58      	ldr	r3, [pc, #352]	; (8003758 <ICM20948_Calibrate+0x18c>)
 80035f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	4b57      	ldr	r3, [pc, #348]	; (800375c <ICM20948_Calibrate+0x190>)
 8003600:	885b      	ldrh	r3, [r3, #2]
 8003602:	4413      	add	r3, r2
 8003604:	b29b      	uxth	r3, r3
 8003606:	b21a      	sxth	r2, r3
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <ICM20948_Calibrate+0x18c>)
 800360a:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 800360c:	4b52      	ldr	r3, [pc, #328]	; (8003758 <ICM20948_Calibrate+0x18c>)
 800360e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b51      	ldr	r3, [pc, #324]	; (800375c <ICM20948_Calibrate+0x190>)
 8003616:	889b      	ldrh	r3, [r3, #4]
 8003618:	4413      	add	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	b21a      	sxth	r2, r3
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <ICM20948_Calibrate+0x18c>)
 8003620:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8003622:	200a      	movs	r0, #10
 8003624:	f001 fc5a 	bl	8004edc <HAL_Delay>
	for(int i=0; i<50; i++){
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b31      	cmp	r3, #49	; 0x31
 8003632:	ddd2      	ble.n	80035da <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 8003634:	4b48      	ldr	r3, [pc, #288]	; (8003758 <ICM20948_Calibrate+0x18c>)
 8003636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363a:	4a49      	ldr	r2, [pc, #292]	; (8003760 <ICM20948_Calibrate+0x194>)
 800363c:	fb82 1203 	smull	r1, r2, r2, r3
 8003640:	1112      	asrs	r2, r2, #4
 8003642:	17db      	asrs	r3, r3, #31
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	b21a      	sxth	r2, r3
 8003648:	4b43      	ldr	r3, [pc, #268]	; (8003758 <ICM20948_Calibrate+0x18c>)
 800364a:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 800364c:	4b42      	ldr	r3, [pc, #264]	; (8003758 <ICM20948_Calibrate+0x18c>)
 800364e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003652:	4a43      	ldr	r2, [pc, #268]	; (8003760 <ICM20948_Calibrate+0x194>)
 8003654:	fb82 1203 	smull	r1, r2, r2, r3
 8003658:	1112      	asrs	r2, r2, #4
 800365a:	17db      	asrs	r3, r3, #31
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	b21a      	sxth	r2, r3
 8003660:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <ICM20948_Calibrate+0x18c>)
 8003662:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 8003664:	4b3c      	ldr	r3, [pc, #240]	; (8003758 <ICM20948_Calibrate+0x18c>)
 8003666:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800366a:	4a3d      	ldr	r2, [pc, #244]	; (8003760 <ICM20948_Calibrate+0x194>)
 800366c:	fb82 1203 	smull	r1, r2, r2, r3
 8003670:	1112      	asrs	r2, r2, #4
 8003672:	17db      	asrs	r3, r3, #31
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	b21a      	sxth	r2, r3
 8003678:	4b37      	ldr	r3, [pc, #220]	; (8003758 <ICM20948_Calibrate+0x18c>)
 800367a:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 4096.0; // 4096 LSB/g
 800367c:	4b36      	ldr	r3, [pc, #216]	; (8003758 <ICM20948_Calibrate+0x18c>)
 800367e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc febe 	bl	8000404 <__aeabi_i2d>
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	4b35      	ldr	r3, [pc, #212]	; (8003764 <ICM20948_Calibrate+0x198>)
 800368e:	f7fc fd6b 	bl	8000168 <__aeabi_dsub>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7fd f9cd 	bl	8000a38 <__aeabi_d2iz>
 800369e:	4603      	mov	r3, r0
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <ICM20948_Calibrate+0x18c>)
 80036a4:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	e029      	b.n	8003700 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fe03 	bl	80032b8 <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <ICM20948_Calibrate+0x19c>)
 80036b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	4b2c      	ldr	r3, [pc, #176]	; (800376c <ICM20948_Calibrate+0x1a0>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	4413      	add	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b21a      	sxth	r2, r3
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <ICM20948_Calibrate+0x19c>)
 80036c6:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <ICM20948_Calibrate+0x19c>)
 80036ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <ICM20948_Calibrate+0x1a0>)
 80036d2:	885b      	ldrh	r3, [r3, #2]
 80036d4:	4413      	add	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	b21a      	sxth	r2, r3
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <ICM20948_Calibrate+0x19c>)
 80036dc:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <ICM20948_Calibrate+0x19c>)
 80036e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <ICM20948_Calibrate+0x1a0>)
 80036e8:	889b      	ldrh	r3, [r3, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <ICM20948_Calibrate+0x19c>)
 80036f2:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f001 fbf1 	bl	8004edc <HAL_Delay>
	for(int i=0; i<50; i++){
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b31      	cmp	r3, #49	; 0x31
 8003704:	ddd2      	ble.n	80036ac <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <ICM20948_Calibrate+0x19c>)
 8003708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <ICM20948_Calibrate+0x194>)
 800370e:	fb82 1203 	smull	r1, r2, r2, r3
 8003712:	1112      	asrs	r2, r2, #4
 8003714:	17db      	asrs	r3, r3, #31
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	b21a      	sxth	r2, r3
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <ICM20948_Calibrate+0x19c>)
 800371c:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 800371e:	4b12      	ldr	r3, [pc, #72]	; (8003768 <ICM20948_Calibrate+0x19c>)
 8003720:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003724:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <ICM20948_Calibrate+0x194>)
 8003726:	fb82 1203 	smull	r1, r2, r2, r3
 800372a:	1112      	asrs	r2, r2, #4
 800372c:	17db      	asrs	r3, r3, #31
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b21a      	sxth	r2, r3
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <ICM20948_Calibrate+0x19c>)
 8003734:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 8003736:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <ICM20948_Calibrate+0x19c>)
 8003738:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800373c:	4a08      	ldr	r2, [pc, #32]	; (8003760 <ICM20948_Calibrate+0x194>)
 800373e:	fb82 1203 	smull	r1, r2, r2, r3
 8003742:	1112      	asrs	r2, r2, #4
 8003744:	17db      	asrs	r3, r3, #31
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	b21a      	sxth	r2, r3
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <ICM20948_Calibrate+0x19c>)
 800374c:	809a      	strh	r2, [r3, #4]
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200002e8 	.word	0x200002e8
 800375c:	200002c0 	.word	0x200002c0
 8003760:	51eb851f 	.word	0x51eb851f
 8003764:	40b00000 	.word	0x40b00000
 8003768:	200002e0 	.word	0x200002e0
 800376c:	200002c8 	.word	0x200002c8

08003770 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003778:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800377c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003788:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800378c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003790:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003798:	e000      	b.n	800379c <ITM_SendChar+0x2c>
    {
      __NOP();
 800379a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800379c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f9      	beq.n	800379a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80037a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80037b0:	687b      	ldr	r3, [r7, #4]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e009      	b.n	80037e6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	60ba      	str	r2, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ffc8 	bl	8003770 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3301      	adds	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	dbf1      	blt.n	80037d2 <_write+0x16>
  return len;
 80037ee:	687b      	ldr	r3, [r7, #4]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80037f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fc:	b099      	sub	sp, #100	; 0x64
 80037fe:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	221f      	movs	r2, #31
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f005 fedd 	bl	80095cc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003812:	f001 fb01 	bl	8004e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003816:	f000 f91b 	bl	8003a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800381a:	f000 fbab 	bl	8003f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800381e:	f000 fb61 	bl	8003ee4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003822:	f000 f9a5 	bl	8003b70 <MX_I2C2_Init>
  MX_ADC1_Init();
 8003826:	f000 f965 	bl	8003af4 <MX_ADC1_Init>
  MX_SPI2_Init();
 800382a:	f000 f9cf 	bl	8003bcc <MX_SPI2_Init>
  MX_TIM2_Init();
 800382e:	f000 fa5b 	bl	8003ce8 <MX_TIM2_Init>
  MX_DMA_Init();
 8003832:	f000 fb81 	bl	8003f38 <MX_DMA_Init>
  MX_TIM1_Init();
 8003836:	f000 f9ff 	bl	8003c38 <MX_TIM1_Init>
  MX_TIM3_Init();
 800383a:	f000 fad7 	bl	8003dec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800383e:	213c      	movs	r1, #60	; 0x3c
 8003840:	486f      	ldr	r0, [pc, #444]	; (8003a00 <main+0x208>)
 8003842:	f004 fae9 	bl	8007e18 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start(&htim3);
 8003846:	486f      	ldr	r0, [pc, #444]	; (8003a04 <main+0x20c>)
 8003848:	f003 ffa2 	bl	8007790 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 800384c:	2104      	movs	r1, #4
 800384e:	486d      	ldr	r0, [pc, #436]	; (8003a04 <main+0x20c>)
 8003850:	f004 f93a 	bl	8007ac8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 8003854:	2108      	movs	r1, #8
 8003856:	486b      	ldr	r0, [pc, #428]	; (8003a04 <main+0x20c>)
 8003858:	f004 f936 	bl	8007ac8 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 800385c:	486a      	ldr	r0, [pc, #424]	; (8003a08 <main+0x210>)
 800385e:	f003 ff97 	bl	8007790 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 8003862:	2104      	movs	r1, #4
 8003864:	4868      	ldr	r0, [pc, #416]	; (8003a08 <main+0x210>)
 8003866:	f004 f835 	bl	80078d4 <HAL_TIM_PWM_Start>
  HAL_Delay(5000);
 800386a:	f241 3088 	movw	r0, #5000	; 0x1388
 800386e:	f001 fb35 	bl	8004edc <HAL_Delay>

  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8003872:	2100      	movs	r1, #0
 8003874:	4865      	ldr	r0, [pc, #404]	; (8003a0c <main+0x214>)
 8003876:	f7ff fe4d 	bl	8003514 <ICM_SelectBank>
  HAL_Delay(10);
 800387a:	200a      	movs	r0, #10
 800387c:	f001 fb2e 	bl	8004edc <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 8003880:	4862      	ldr	r0, [pc, #392]	; (8003a0c <main+0x214>)
 8003882:	f7ff fc7c 	bl	800317e <ICM_PowerOn>
  HAL_Delay(10);
 8003886:	200a      	movs	r0, #10
 8003888:	f001 fb28 	bl	8004edc <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 800388c:	485f      	ldr	r0, [pc, #380]	; (8003a0c <main+0x214>)
 800388e:	f7ff fe9d 	bl	80035cc <ICM20948_Calibrate>
  HAL_Delay(100);
 8003892:	2064      	movs	r0, #100	; 0x64
 8003894:	f001 fb22 	bl	8004edc <HAL_Delay>

  HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, 12);
 8003898:	220c      	movs	r2, #12
 800389a:	495d      	ldr	r1, [pc, #372]	; (8003a10 <main+0x218>)
 800389c:	485d      	ldr	r0, [pc, #372]	; (8003a14 <main+0x21c>)
 800389e:	f005 fbf0 	bl	8009082 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(UART2_rxBuffer == 'drive forward') {
 80038a2:	4a5b      	ldr	r2, [pc, #364]	; (8003a10 <main+0x218>)
 80038a4:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <main+0x220>)
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d106      	bne.n	80038b8 <main+0xc0>
		  drive_forward(&htim2, speed);
 80038aa:	4b5c      	ldr	r3, [pc, #368]	; (8003a1c <main+0x224>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	4855      	ldr	r0, [pc, #340]	; (8003a08 <main+0x210>)
 80038b2:	f7fd fbf3 	bl	800109c <drive_forward>
 80038b6:	e006      	b.n	80038c6 <main+0xce>
	  }
  	  else if(UART2_rxBuffer == 'stop') {
 80038b8:	4a55      	ldr	r2, [pc, #340]	; (8003a10 <main+0x218>)
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <main+0x228>)
 80038bc:	429a      	cmp	r2, r3
 80038be:	d102      	bne.n	80038c6 <main+0xce>
		  stop(&htim2);
 80038c0:	4851      	ldr	r0, [pc, #324]	; (8003a08 <main+0x210>)
 80038c2:	f7fd fc35 	bl	8001130 <stop>
	  }
  // ultrasonic testing
	  HCSR04_Read_Front(&htim3);
 80038c6:	484f      	ldr	r0, [pc, #316]	; (8003a04 <main+0x20c>)
 80038c8:	f001 fa26 	bl	8004d18 <HCSR04_Read_Front>
	  sprintf(MSG, "Distance: %d\n", Front_US.DISTANCE);
 80038cc:	4b55      	ldr	r3, [pc, #340]	; (8003a24 <main+0x22c>)
 80038ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80038d2:	f107 0010 	add.w	r0, r7, #16
 80038d6:	4954      	ldr	r1, [pc, #336]	; (8003a28 <main+0x230>)
 80038d8:	f006 fae0 	bl	8009e9c <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80038dc:	f107 0110 	add.w	r1, r7, #16
 80038e0:	2364      	movs	r3, #100	; 0x64
 80038e2:	2223      	movs	r2, #35	; 0x23
 80038e4:	484b      	ldr	r0, [pc, #300]	; (8003a14 <main+0x21c>)
 80038e6:	f005 fb3a 	bl	8008f5e <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80038ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ee:	484f      	ldr	r0, [pc, #316]	; (8003a2c <main+0x234>)
 80038f0:	f002 f9c2 	bl	8005c78 <HAL_GPIO_TogglePin>
	  HAL_Delay(25);
 80038f4:	2019      	movs	r0, #25
 80038f6:	f001 faf1 	bl	8004edc <HAL_Delay>

  // ESC testing
	  double speed = 50;
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <main+0x238>)
 8003900:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  accelerate(&htim2, speed);
 8003904:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003908:	483f      	ldr	r0, [pc, #252]	; (8003a08 <main+0x210>)
 800390a:	f7fd fc21 	bl	8001150 <accelerate>
//	  drive_forward(&htim2, speed);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800390e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003912:	4846      	ldr	r0, [pc, #280]	; (8003a2c <main+0x234>)
 8003914:	f002 f9b0 	bl	8005c78 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8003918:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800391c:	f001 fade 	bl	8004edc <HAL_Delay>
	  decelerate(&htim2);
 8003920:	4839      	ldr	r0, [pc, #228]	; (8003a08 <main+0x210>)
 8003922:	f7fd fc71 	bl	8001208 <decelerate>
//	  stop(&htim2);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800392a:	4840      	ldr	r0, [pc, #256]	; (8003a2c <main+0x234>)
 800392c:	f002 f9a4 	bl	8005c78 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8003930:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003934:	f001 fad2 	bl	8004edc <HAL_Delay>

    // imu testing

	  // Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8003938:	2100      	movs	r1, #0
 800393a:	4834      	ldr	r0, [pc, #208]	; (8003a0c <main+0x214>)
 800393c:	f7ff fdea 	bl	8003514 <ICM_SelectBank>
	  HAL_Delay(10);
 8003940:	200a      	movs	r0, #10
 8003942:	f001 facb 	bl	8004edc <HAL_Delay>

	  // Obtain raw accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 8003946:	4831      	ldr	r0, [pc, #196]	; (8003a0c <main+0x214>)
 8003948:	f7ff fcb6 	bl	80032b8 <ICM_ReadAccelGyro>

	  // Obtain raw magnetometer data
	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 800394c:	f107 0308 	add.w	r3, r7, #8
 8003950:	4619      	mov	r1, r3
 8003952:	482e      	ldr	r0, [pc, #184]	; (8003a0c <main+0x214>)
 8003954:	f7ff fbbe 	bl	80030d4 <ICM_ReadMag>

	  // Obtain corrected accelerometer and gyro data
	  ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 8003958:	4a36      	ldr	r2, [pc, #216]	; (8003a34 <main+0x23c>)
 800395a:	4937      	ldr	r1, [pc, #220]	; (8003a38 <main+0x240>)
 800395c:	482b      	ldr	r0, [pc, #172]	; (8003a0c <main+0x214>)
 800395e:	f7ff fcfb 	bl	8003358 <ICM_CorrectAccelGyro>

	  // Apply Madgwick to get pitch, roll, and yaw
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <main+0x244>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd f964 	bl	8000c34 <__aeabi_ui2f>
 800396c:	4681      	mov	r9, r0
 800396e:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <main+0x244>)
 8003970:	885b      	ldrh	r3, [r3, #2]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd f95e 	bl	8000c34 <__aeabi_ui2f>
 8003978:	4682      	mov	sl, r0
 800397a:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <main+0x244>)
 800397c:	889b      	ldrh	r3, [r3, #4]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd f958 	bl	8000c34 <__aeabi_ui2f>
 8003984:	4683      	mov	fp, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003986:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <main+0x248>)
 8003988:	881b      	ldrh	r3, [r3, #0]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd f952 	bl	8000c34 <__aeabi_ui2f>
 8003990:	6078      	str	r0, [r7, #4]
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <main+0x248>)
 8003994:	885b      	ldrh	r3, [r3, #2]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f94c 	bl	8000c34 <__aeabi_ui2f>
 800399c:	4604      	mov	r4, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <main+0x248>)
 80039a0:	889b      	ldrh	r3, [r3, #4]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd f946 	bl	8000c34 <__aeabi_ui2f>
 80039a8:	4605      	mov	r5, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80039aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd f944 	bl	8000c3c <__aeabi_i2f>
 80039b4:	4606      	mov	r6, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80039b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd f93e 	bl	8000c3c <__aeabi_i2f>
 80039c0:	4680      	mov	r8, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80039c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd f938 	bl	8000c3c <__aeabi_i2f>
 80039cc:	4603      	mov	r3, r0
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039d4:	9602      	str	r6, [sp, #8]
 80039d6:	9501      	str	r5, [sp, #4]
 80039d8:	9400      	str	r4, [sp, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	465a      	mov	r2, fp
 80039de:	4651      	mov	r1, sl
 80039e0:	4648      	mov	r0, r9
 80039e2:	f7fd fca9 	bl	8001338 <MadgwickAHRSupdate>

	  computeAngles();
 80039e6:	f7ff f9cf 	bl	8002d88 <computeAngles>

	  float roll_main = roll;
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <main+0x24c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float pitch_main = pitch;
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <main+0x250>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	63bb      	str	r3, [r7, #56]	; 0x38
	  float yaw_main = yaw;
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <main+0x254>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
  {
 80039fc:	e751      	b.n	80038a2 <main+0xaa>
 80039fe:	bf00      	nop
 8003a00:	200003cc 	.word	0x200003cc
 8003a04:	2000045c 	.word	0x2000045c
 8003a08:	20000414 	.word	0x20000414
 8003a0c:	20000320 	.word	0x20000320
 8003a10:	2000052c 	.word	0x2000052c
 8003a14:	200004a4 	.word	0x200004a4
 8003a18:	77617264 	.word	0x77617264
 8003a1c:	20000540 	.word	0x20000540
 8003a20:	73746f70 	.word	0x73746f70
 8003a24:	20000040 	.word	0x20000040
 8003a28:	0800ca80 	.word	0x0800ca80
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40490000 	.word	0x40490000
 8003a34:	200002c8 	.word	0x200002c8
 8003a38:	200002c0 	.word	0x200002c0
 8003a3c:	200002d8 	.word	0x200002d8
 8003a40:	200002d0 	.word	0x200002d0
 8003a44:	200002b0 	.word	0x200002b0
 8003a48:	200002b4 	.word	0x200002b4
 8003a4c:	200002b8 	.word	0x200002b8

08003a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b094      	sub	sp, #80	; 0x50
 8003a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a5a:	2228      	movs	r2, #40	; 0x28
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f005 fdb4 	bl	80095cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
 8003a7e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a80:	2302      	movs	r3, #2
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a84:	2301      	movs	r3, #1
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a88:	2310      	movs	r3, #16
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 f8d7 	bl	8006c48 <HAL_RCC_OscConfig>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003aa0:	f000 fb5e 	bl	8004160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aa4:	230f      	movs	r3, #15
 8003aa6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 fb43 	bl	800714c <HAL_RCC_ClockConfig>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003acc:	f000 fb48 	bl	8004160 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 fccd 	bl	800747c <HAL_RCCEx_PeriphCLKConfig>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003ae8:	f000 fb3a 	bl	8004160 <Error_Handler>
  }
}
 8003aec:	bf00      	nop
 8003aee:	3750      	adds	r7, #80	; 0x50
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b06:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <MX_ADC1_Init+0x78>)
 8003b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b1e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003b22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b30:	480d      	ldr	r0, [pc, #52]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b32:	f001 f9f7 	bl	8004f24 <HAL_ADC_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003b3c:	f000 fb10 	bl	8004160 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003b40:	2304      	movs	r3, #4
 8003b42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4805      	ldr	r0, [pc, #20]	; (8003b68 <MX_ADC1_Init+0x74>)
 8003b52:	f001 fabf 	bl	80050d4 <HAL_ADC_ConfigChannel>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003b5c:	f000 fb00 	bl	8004160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200002f0 	.word	0x200002f0
 8003b6c:	40012400 	.word	0x40012400

08003b70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003b76:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <MX_I2C2_Init+0x54>)
 8003b78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003b7c:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <MX_I2C2_Init+0x58>)
 8003b7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003b88:	22d2      	movs	r2, #210	; 0xd2
 8003b8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003b8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003bac:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <MX_I2C2_Init+0x50>)
 8003bae:	f002 f87d 	bl	8005cac <HAL_I2C_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003bb8:	f000 fad2 	bl	8004160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000320 	.word	0x20000320
 8003bc4:	40005800 	.word	0x40005800
 8003bc8:	00061a80 	.word	0x00061a80

08003bcc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <MX_SPI2_Init+0x68>)
 8003bd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c0a:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c10:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003c18:	220a      	movs	r2, #10
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c1c:	4804      	ldr	r0, [pc, #16]	; (8003c30 <MX_SPI2_Init+0x64>)
 8003c1e:	f003 fce3 	bl	80075e8 <HAL_SPI_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c28:	f000 fa9a 	bl	8004160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000374 	.word	0x20000374
 8003c34:	40003800 	.word	0x40003800

08003c38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	; 0x30
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f005 fcc0 	bl	80095cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c54:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003c56:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <MX_TIM1_Init+0xac>)
 8003c58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c74:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	4619      	mov	r1, r3
 8003caa:	480d      	ldr	r0, [pc, #52]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003cac:	f004 f812 	bl	8007cd4 <HAL_TIM_Encoder_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003cb6:	f000 fa53 	bl	8004160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <MX_TIM1_Init+0xa8>)
 8003cc8:	f005 f88c 	bl	8008de4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003cd2:	f000 fa45 	bl	8004160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003cd6:	bf00      	nop
 8003cd8:	3730      	adds	r7, #48	; 0x30
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200003cc 	.word	0x200003cc
 8003ce4:	40012c00 	.word	0x40012c00

08003ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08e      	sub	sp, #56	; 0x38
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cfc:	f107 0320 	add.w	r3, r7, #32
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
 8003d14:	615a      	str	r2, [r3, #20]
 8003d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d18:	4b33      	ldr	r3, [pc, #204]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d22:	2203      	movs	r2, #3
 8003d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d26:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d2e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d40:	4829      	ldr	r0, [pc, #164]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d42:	f003 fcd5 	bl	80076f0 <HAL_TIM_Base_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003d4c:	f000 fa08 	bl	8004160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4822      	ldr	r0, [pc, #136]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d5e:	f004 fb63 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003d68:	f000 f9fa 	bl	8004160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d6c:	481e      	ldr	r0, [pc, #120]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d6e:	f003 fd59 	bl	8007824 <HAL_TIM_PWM_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003d78:	f000 f9f2 	bl	8004160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d84:	f107 0320 	add.w	r3, r7, #32
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4817      	ldr	r0, [pc, #92]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003d8c:	f005 f82a 	bl	8008de4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003d96:	f000 f9e3 	bl	8004160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d9a:	2360      	movs	r3, #96	; 0x60
 8003d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003d9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	2200      	movs	r2, #0
 8003db0:	4619      	mov	r1, r3
 8003db2:	480d      	ldr	r0, [pc, #52]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003db4:	f004 fa7a 	bl	80082ac <HAL_TIM_PWM_ConfigChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003dbe:	f000 f9cf 	bl	8004160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4807      	ldr	r0, [pc, #28]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003dca:	f004 fa6f 	bl	80082ac <HAL_TIM_PWM_ConfigChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003dd4:	f000 f9c4 	bl	8004160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003dd8:	4803      	ldr	r0, [pc, #12]	; (8003de8 <MX_TIM2_Init+0x100>)
 8003dda:	f000 fb93 	bl	8004504 <HAL_TIM_MspPostInit>

}
 8003dde:	bf00      	nop
 8003de0:	3738      	adds	r7, #56	; 0x38
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000414 	.word	0x20000414

08003dec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003df2:	f107 0318 	add.w	r3, r7, #24
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e00:	f107 0310 	add.w	r3, r7, #16
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e16:	4b31      	ldr	r3, [pc, #196]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e18:	4a31      	ldr	r2, [pc, #196]	; (8003ee0 <MX_TIM3_Init+0xf4>)
 8003e1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e1e:	2207      	movs	r2, #7
 8003e20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e3c:	4827      	ldr	r0, [pc, #156]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e3e:	f003 fc57 	bl	80076f0 <HAL_TIM_Base_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003e48:	f000 f98a 	bl	8004160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e50:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e52:	f107 0318 	add.w	r3, r7, #24
 8003e56:	4619      	mov	r1, r3
 8003e58:	4820      	ldr	r0, [pc, #128]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e5a:	f004 fae5 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003e64:	f000 f97c 	bl	8004160 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003e68:	481c      	ldr	r0, [pc, #112]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e6a:	f003 fdd5 	bl	8007a18 <HAL_TIM_IC_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003e74:	f000 f974 	bl	8004160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e80:	f107 0310 	add.w	r3, r7, #16
 8003e84:	4619      	mov	r1, r3
 8003e86:	4815      	ldr	r0, [pc, #84]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003e88:	f004 ffac 	bl	8008de4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003e92:	f000 f965 	bl	8004160 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e96:	2300      	movs	r3, #0
 8003e98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480b      	ldr	r0, [pc, #44]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003eae:	f004 f969 	bl	8008184 <HAL_TIM_IC_ConfigChannel>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003eb8:	f000 f952 	bl	8004160 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4806      	ldr	r0, [pc, #24]	; (8003edc <MX_TIM3_Init+0xf0>)
 8003ec4:	f004 f95e 	bl	8008184 <HAL_TIM_IC_ConfigChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003ece:	f000 f947 	bl	8004160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ed2:	bf00      	nop
 8003ed4:	3728      	adds	r7, #40	; 0x28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	2000045c 	.word	0x2000045c
 8003ee0:	40000400 	.word	0x40000400

08003ee4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <MX_USART2_UART_Init+0x50>)
 8003eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f1a:	4805      	ldr	r0, [pc, #20]	; (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f1c:	f004 ffd2 	bl	8008ec4 <HAL_UART_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f26:	f000 f91b 	bl	8004160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200004a4 	.word	0x200004a4
 8003f34:	40004400 	.word	0x40004400

08003f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <MX_DMA_Init+0x38>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4a0b      	ldr	r2, [pc, #44]	; (8003f70 <MX_DMA_Init+0x38>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6153      	str	r3, [r2, #20]
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <MX_DMA_Init+0x38>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003f56:	2200      	movs	r2, #0
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2010      	movs	r0, #16
 8003f5c:	f001 facb 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003f60:	2010      	movs	r0, #16
 8003f62:	f001 fae4 	bl	800552e <HAL_NVIC_EnableIRQ>

}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000

08003f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	609a      	str	r2, [r3, #8]
 8003f86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f88:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	4a56      	ldr	r2, [pc, #344]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003f8e:	f043 0310 	orr.w	r3, r3, #16
 8003f92:	6193      	str	r3, [r2, #24]
 8003f94:	4b54      	ldr	r3, [pc, #336]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa0:	4b51      	ldr	r3, [pc, #324]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fa6:	f043 0320 	orr.w	r3, r3, #32
 8003faa:	6193      	str	r3, [r2, #24]
 8003fac:	4b4e      	ldr	r3, [pc, #312]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb8:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4a4a      	ldr	r2, [pc, #296]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	6193      	str	r3, [r2, #24]
 8003fc4:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd0:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	4a44      	ldr	r2, [pc, #272]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	6193      	str	r3, [r2, #24]
 8003fdc:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <MX_GPIO_Init+0x174>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fee:	483f      	ldr	r0, [pc, #252]	; (80040ec <MX_GPIO_Init+0x178>)
 8003ff0:	f001 fe2a 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2140      	movs	r1, #64	; 0x40
 8003ff8:	483d      	ldr	r0, [pc, #244]	; (80040f0 <MX_GPIO_Init+0x17c>)
 8003ffa:	f001 fe25 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2158      	movs	r1, #88	; 0x58
 8004002:	483c      	ldr	r0, [pc, #240]	; (80040f4 <MX_GPIO_Init+0x180>)
 8004004:	f001 fe20 	bl	8005c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800400c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004016:	2302      	movs	r3, #2
 8004018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	4619      	mov	r1, r3
 8004020:	4832      	ldr	r0, [pc, #200]	; (80040ec <MX_GPIO_Init+0x178>)
 8004022:	f001 fc8d 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8004026:	2320      	movs	r3, #32
 8004028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	482d      	ldr	r0, [pc, #180]	; (80040f0 <MX_GPIO_Init+0x17c>)
 800403a:	f001 fc81 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 800403e:	2340      	movs	r3, #64	; 0x40
 8004040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004042:	2301      	movs	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404a:	2302      	movs	r3, #2
 800404c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	4619      	mov	r1, r3
 8004054:	4826      	ldr	r0, [pc, #152]	; (80040f0 <MX_GPIO_Init+0x17c>)
 8004056:	f001 fc73 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 800405a:	2302      	movs	r3, #2
 800405c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4619      	mov	r1, r3
 800406c:	4821      	ldr	r0, [pc, #132]	; (80040f4 <MX_GPIO_Init+0x180>)
 800406e:	f001 fc67 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 8004072:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004078:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <MX_GPIO_Init+0x184>)
 800407a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	4619      	mov	r1, r3
 8004086:	481a      	ldr	r0, [pc, #104]	; (80040f0 <MX_GPIO_Init+0x17c>)
 8004088:	f001 fc5a 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 800408c:	2358      	movs	r3, #88	; 0x58
 800408e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004098:	2302      	movs	r3, #2
 800409a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4619      	mov	r1, r3
 80040a2:	4814      	ldr	r0, [pc, #80]	; (80040f4 <MX_GPIO_Init+0x180>)
 80040a4:	f001 fc4c 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ESP_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_ESP_SDA_Pin;
 80040a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ae:	2312      	movs	r3, #18
 80040b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040b2:	2303      	movs	r3, #3
 80040b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_ESP_SDA_GPIO_Port, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <MX_GPIO_Init+0x180>)
 80040be:	f001 fc3f 	bl	8005940 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <MX_GPIO_Init+0x188>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
 80040d8:	4a08      	ldr	r2, [pc, #32]	; (80040fc <MX_GPIO_Init+0x188>)
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	6053      	str	r3, [r2, #4]

}
 80040de:	bf00      	nop
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40011000 	.word	0x40011000
 80040f0:	40010800 	.word	0x40010800
 80040f4:	40010c00 	.word	0x40010c00
 80040f8:	10110000 	.word	0x10110000
 80040fc:	40010000 	.word	0x40010000

08004100 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint32_t us)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <delay_us+0x2c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8004110:	bf00      	nop
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <delay_us+0x2c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d8f9      	bhi.n	8004112 <delay_us+0x12>
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000045c 	.word	0x2000045c

08004130 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, UART2_rxBuffer, 12, 100);
 8004138:	2364      	movs	r3, #100	; 0x64
 800413a:	220c      	movs	r2, #12
 800413c:	4906      	ldr	r1, [pc, #24]	; (8004158 <HAL_UART_RxCpltCallback+0x28>)
 800413e:	4807      	ldr	r0, [pc, #28]	; (800415c <HAL_UART_RxCpltCallback+0x2c>)
 8004140:	f004 ff0d 	bl	8008f5e <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 12);
 8004144:	220c      	movs	r2, #12
 8004146:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_UART_RxCpltCallback+0x28>)
 8004148:	4804      	ldr	r0, [pc, #16]	; (800415c <HAL_UART_RxCpltCallback+0x2c>)
 800414a:	f004 ff9a 	bl	8009082 <HAL_UART_Receive_DMA>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000052c 	.word	0x2000052c
 800415c:	200004a4 	.word	0x200004a4

08004160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004164:	b672      	cpsid	i
}
 8004166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004168:	e7fe      	b.n	8004168 <Error_Handler+0x8>
	...

0800416c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_MspInit+0x5c>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <HAL_MspInit+0x5c>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6193      	str	r3, [r2, #24]
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_MspInit+0x5c>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <HAL_MspInit+0x5c>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <HAL_MspInit+0x5c>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	61d3      	str	r3, [r2, #28]
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_MspInit+0x5c>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <HAL_MspInit+0x60>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <HAL_MspInit+0x60>)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40010000 	.word	0x40010000

080041d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d8:	f107 0310 	add.w	r3, r7, #16
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a14      	ldr	r2, [pc, #80]	; (800423c <HAL_ADC_MspInit+0x6c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d121      	bne.n	8004234 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <HAL_ADC_MspInit+0x70>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <HAL_ADC_MspInit+0x70>)
 80041f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fa:	6193      	str	r3, [r2, #24]
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <HAL_ADC_MspInit+0x70>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004208:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_ADC_MspInit+0x70>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <HAL_ADC_MspInit+0x70>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6193      	str	r3, [r2, #24]
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_ADC_MspInit+0x70>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8004220:	2310      	movs	r3, #16
 8004222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004224:	2303      	movs	r3, #3
 8004226:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8004228:	f107 0310 	add.w	r3, r7, #16
 800422c:	4619      	mov	r1, r3
 800422e:	4805      	ldr	r0, [pc, #20]	; (8004244 <HAL_ADC_MspInit+0x74>)
 8004230:	f001 fb86 	bl	8005940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004234:	bf00      	nop
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40012400 	.word	0x40012400
 8004240:	40021000 	.word	0x40021000
 8004244:	40010800 	.word	0x40010800

08004248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 0310 	add.w	r3, r7, #16
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_I2C_MspInit+0x74>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d124      	bne.n	80042b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_I2C_MspInit+0x78>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <HAL_I2C_MspInit+0x78>)
 800426e:	f043 0308 	orr.w	r3, r3, #8
 8004272:	6193      	str	r3, [r2, #24]
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <HAL_I2C_MspInit+0x78>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8004280:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004286:	2312      	movs	r3, #18
 8004288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800428a:	2303      	movs	r3, #3
 800428c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428e:	f107 0310 	add.w	r3, r7, #16
 8004292:	4619      	mov	r1, r3
 8004294:	480b      	ldr	r0, [pc, #44]	; (80042c4 <HAL_I2C_MspInit+0x7c>)
 8004296:	f001 fb53 	bl	8005940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_I2C_MspInit+0x78>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_I2C_MspInit+0x78>)
 80042a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042a4:	61d3      	str	r3, [r2, #28]
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_I2C_MspInit+0x78>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042b2:	bf00      	nop
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40005800 	.word	0x40005800
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40010c00 	.word	0x40010c00

080042c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d0:	f107 0310 	add.w	r3, r7, #16
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_SPI_MspInit+0x8c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d131      	bne.n	800434c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_SPI_MspInit+0x90>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_SPI_MspInit+0x90>)
 80042ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f2:	61d3      	str	r3, [r2, #28]
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_SPI_MspInit+0x90>)
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	4b15      	ldr	r3, [pc, #84]	; (8004358 <HAL_SPI_MspInit+0x90>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <HAL_SPI_MspInit+0x90>)
 8004306:	f043 0308 	orr.w	r3, r3, #8
 800430a:	6193      	str	r3, [r2, #24]
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_SPI_MspInit+0x90>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004318:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800431c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004322:	2303      	movs	r3, #3
 8004324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004326:	f107 0310 	add.w	r3, r7, #16
 800432a:	4619      	mov	r1, r3
 800432c:	480b      	ldr	r0, [pc, #44]	; (800435c <HAL_SPI_MspInit+0x94>)
 800432e:	f001 fb07 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	4619      	mov	r1, r3
 8004346:	4805      	ldr	r0, [pc, #20]	; (800435c <HAL_SPI_MspInit+0x94>)
 8004348:	f001 fafa 	bl	8005940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40003800 	.word	0x40003800
 8004358:	40021000 	.word	0x40021000
 800435c:	40010c00 	.word	0x40010c00

08004360 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a26      	ldr	r2, [pc, #152]	; (8004414 <HAL_TIM_Encoder_MspInit+0xb4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d144      	bne.n	800440a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	4a24      	ldr	r2, [pc, #144]	; (8004418 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800438a:	6193      	str	r3, [r2, #24]
 800438c:	4b22      	ldr	r3, [pc, #136]	; (8004418 <HAL_TIM_Encoder_MspInit+0xb8>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_TIM_Encoder_MspInit+0xb8>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <HAL_TIM_Encoder_MspInit+0xb8>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6193      	str	r3, [r2, #24]
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_TIM_Encoder_MspInit+0xb8>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|RIGHT_ENCODER_A_Pin;
 80043b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043be:	f107 0310 	add.w	r3, r7, #16
 80043c2:	4619      	mov	r1, r3
 80043c4:	4815      	ldr	r0, [pc, #84]	; (800441c <HAL_TIM_Encoder_MspInit+0xbc>)
 80043c6:	f001 fabb 	bl	8005940 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2100      	movs	r1, #0
 80043ce:	2018      	movs	r0, #24
 80043d0:	f001 f891 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80043d4:	2018      	movs	r0, #24
 80043d6:	f001 f8aa 	bl	800552e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2100      	movs	r1, #0
 80043de:	2019      	movs	r0, #25
 80043e0:	f001 f889 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80043e4:	2019      	movs	r0, #25
 80043e6:	f001 f8a2 	bl	800552e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2100      	movs	r1, #0
 80043ee:	201a      	movs	r0, #26
 80043f0:	f001 f881 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80043f4:	201a      	movs	r0, #26
 80043f6:	f001 f89a 	bl	800552e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	201b      	movs	r0, #27
 8004400:	f001 f879 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004404:	201b      	movs	r0, #27
 8004406:	f001 f892 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40021000 	.word	0x40021000
 800441c:	40010800 	.word	0x40010800

08004420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 0318 	add.w	r3, r7, #24
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d10c      	bne.n	800445a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004440:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4a2b      	ldr	r2, [pc, #172]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	61d3      	str	r3, [r2, #28]
 800444c:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004458:	e048      	b.n	80044ec <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_TIM_Base_MspInit+0xd8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d143      	bne.n	80044ec <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 800446a:	f043 0302 	orr.w	r3, r3, #2
 800446e:	61d3      	str	r3, [r2, #28]
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6193      	str	r3, [r2, #24]
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004494:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 800449a:	f043 0308 	orr.w	r3, r3, #8
 800449e:	6193      	str	r3, [r2, #24]
 80044a0:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <HAL_TIM_Base_MspInit+0xd4>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 80044b8:	f107 0318 	add.w	r3, r7, #24
 80044bc:	4619      	mov	r1, r3
 80044be:	480f      	ldr	r0, [pc, #60]	; (80044fc <HAL_TIM_Base_MspInit+0xdc>)
 80044c0:	f001 fa3e 	bl	8005940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 80044c4:	2301      	movs	r3, #1
 80044c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 80044d0:	f107 0318 	add.w	r3, r7, #24
 80044d4:	4619      	mov	r1, r3
 80044d6:	480a      	ldr	r0, [pc, #40]	; (8004500 <HAL_TIM_Base_MspInit+0xe0>)
 80044d8:	f001 fa32 	bl	8005940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80044dc:	2200      	movs	r2, #0
 80044de:	2100      	movs	r1, #0
 80044e0:	201d      	movs	r0, #29
 80044e2:	f001 f808 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044e6:	201d      	movs	r0, #29
 80044e8:	f001 f821 	bl	800552e <HAL_NVIC_EnableIRQ>
}
 80044ec:	bf00      	nop
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40010800 	.word	0x40010800
 8004500:	40010c00 	.word	0x40010c00

08004504 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004522:	d117      	bne.n	8004554 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_TIM_MspPostInit+0x58>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	4a0c      	ldr	r2, [pc, #48]	; (800455c <HAL_TIM_MspPostInit+0x58>)
 800452a:	f043 0304 	orr.w	r3, r3, #4
 800452e:	6193      	str	r3, [r2, #24]
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_TIM_MspPostInit+0x58>)
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 800453c:	2303      	movs	r3, #3
 800453e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2302      	movs	r3, #2
 8004542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2302      	movs	r3, #2
 8004546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004548:	f107 0310 	add.w	r3, r7, #16
 800454c:	4619      	mov	r1, r3
 800454e:	4804      	ldr	r0, [pc, #16]	; (8004560 <HAL_TIM_MspPostInit+0x5c>)
 8004550:	f001 f9f6 	bl	8005940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004554:	bf00      	nop
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	40010800 	.word	0x40010800

08004564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2e      	ldr	r2, [pc, #184]	; (8004638 <HAL_UART_MspInit+0xd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d155      	bne.n	8004630 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004584:	4b2d      	ldr	r3, [pc, #180]	; (800463c <HAL_UART_MspInit+0xd8>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	4a2c      	ldr	r2, [pc, #176]	; (800463c <HAL_UART_MspInit+0xd8>)
 800458a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458e:	61d3      	str	r3, [r2, #28]
 8004590:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_UART_MspInit+0xd8>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459c:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_UART_MspInit+0xd8>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	4a26      	ldr	r2, [pc, #152]	; (800463c <HAL_UART_MspInit+0xd8>)
 80045a2:	f043 0304 	orr.w	r3, r3, #4
 80045a6:	6193      	str	r3, [r2, #24]
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_UART_MspInit+0xd8>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045b4:	2304      	movs	r3, #4
 80045b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	2302      	movs	r3, #2
 80045ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045bc:	2303      	movs	r3, #3
 80045be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	4619      	mov	r1, r3
 80045c6:	481e      	ldr	r0, [pc, #120]	; (8004640 <HAL_UART_MspInit+0xdc>)
 80045c8:	f001 f9ba 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045cc:	2308      	movs	r3, #8
 80045ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d8:	f107 0310 	add.w	r3, r7, #16
 80045dc:	4619      	mov	r1, r3
 80045de:	4818      	ldr	r0, [pc, #96]	; (8004640 <HAL_UART_MspInit+0xdc>)
 80045e0:	f001 f9ae 	bl	8005940 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80045e4:	4b17      	ldr	r3, [pc, #92]	; (8004644 <HAL_UART_MspInit+0xe0>)
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <HAL_UART_MspInit+0xe4>)
 80045e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_UART_MspInit+0xe0>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <HAL_UART_MspInit+0xe0>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <HAL_UART_MspInit+0xe0>)
 80045f8:	2280      	movs	r2, #128	; 0x80
 80045fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_UART_MspInit+0xe0>)
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_UART_MspInit+0xe0>)
 8004604:	2200      	movs	r2, #0
 8004606:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_UART_MspInit+0xe0>)
 800460a:	2200      	movs	r2, #0
 800460c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800460e:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <HAL_UART_MspInit+0xe0>)
 8004610:	2200      	movs	r2, #0
 8004612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004614:	480b      	ldr	r0, [pc, #44]	; (8004644 <HAL_UART_MspInit+0xe0>)
 8004616:	f000 ffa5 	bl	8005564 <HAL_DMA_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004620:	f7ff fd9e 	bl	8004160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <HAL_UART_MspInit+0xe0>)
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
 800462a:	4a06      	ldr	r2, [pc, #24]	; (8004644 <HAL_UART_MspInit+0xe0>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004630:	bf00      	nop
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40004400 	.word	0x40004400
 800463c:	40021000 	.word	0x40021000
 8004640:	40010800 	.word	0x40010800
 8004644:	200004e8 	.word	0x200004e8
 8004648:	4002006c 	.word	0x4002006c

0800464c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004650:	e7fe      	b.n	8004650 <NMI_Handler+0x4>

08004652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004656:	e7fe      	b.n	8004656 <HardFault_Handler+0x4>

08004658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800465c:	e7fe      	b.n	800465c <MemManage_Handler+0x4>

0800465e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004662:	e7fe      	b.n	8004662 <BusFault_Handler+0x4>

08004664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004668:	e7fe      	b.n	8004668 <UsageFault_Handler+0x4>

0800466a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800466a:	b480      	push	{r7}
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
	...

08004690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 8004694:	4b36      	ldr	r3, [pc, #216]	; (8004770 <SysTick_Handler+0xe0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a35      	ldr	r2, [pc, #212]	; (8004770 <SysTick_Handler+0xe0>)
 800469c:	6013      	str	r3, [r2, #0]
	if ( indx == 500) //calculated every half second
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <SysTick_Handler+0xe0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046a6:	d159      	bne.n	800475c <SysTick_Handler+0xcc>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 80046a8:	4b32      	ldr	r3, [pc, #200]	; (8004774 <SysTick_Handler+0xe4>)
 80046aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <SysTick_Handler+0xe8>)
 80046b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fb fea2 	bl	8000404 <__aeabi_i2d>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	492d      	ldr	r1, [pc, #180]	; (800477c <SysTick_Handler+0xec>)
 80046c6:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.speed = speed;
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <SysTick_Handler+0xec>)
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	492b      	ldr	r1, [pc, #172]	; (8004780 <SysTick_Handler+0xf0>)
 80046d2:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//velocity
		position_m = (2*3.1415*0.07042) * position;
 80046d6:	4b27      	ldr	r3, [pc, #156]	; (8004774 <SysTick_Handler+0xe4>)
 80046d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fb fe91 	bl	8000404 <__aeabi_i2d>
 80046e2:	a321      	add	r3, pc, #132	; (adr r3, 8004768 <SysTick_Handler+0xd8>)
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f7fb fef6 	bl	80004d8 <__aeabi_dmul>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4924      	ldr	r1, [pc, #144]	; (8004784 <SysTick_Handler+0xf4>)
 80046f2:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos_m = (2*3.1415*0.07042) * oldpos;
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <SysTick_Handler+0xe8>)
 80046f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb fe81 	bl	8000404 <__aeabi_i2d>
 8004702:	a319      	add	r3, pc, #100	; (adr r3, 8004768 <SysTick_Handler+0xd8>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb fee6 	bl	80004d8 <__aeabi_dmul>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	491d      	ldr	r1, [pc, #116]	; (8004788 <SysTick_Handler+0xf8>)
 8004712:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = ((position_m - oldpos_m)*2);
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <SysTick_Handler+0xf4>)
 8004718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <SysTick_Handler+0xf8>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f7fb fd21 	bl	8000168 <__aeabi_dsub>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	f7fb fd1b 	bl	800016c <__adddf3>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4914      	ldr	r1, [pc, #80]	; (800478c <SysTick_Handler+0xfc>)
 800473c:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.velocity = velocity;
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <SysTick_Handler+0xfc>)
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	490e      	ldr	r1, [pc, #56]	; (8004780 <SysTick_Handler+0xf0>)
 8004748:	e9c1 2304 	strd	r2, r3, [r1, #16]

		oldpos = position;
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <SysTick_Handler+0xe4>)
 800474e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <SysTick_Handler+0xe8>)
 8004754:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <SysTick_Handler+0xe0>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800475c:	f000 fba2 	bl	8004ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}
 8004764:	f3af 8000 	nop.w
 8004768:	05f68f13 	.word	0x05f68f13
 800476c:	3fdc5115 	.word	0x3fdc5115
 8004770:	2000055c 	.word	0x2000055c
 8004774:	2000053e 	.word	0x2000053e
 8004778:	20000558 	.word	0x20000558
 800477c:	20000540 	.word	0x20000540
 8004780:	20000010 	.word	0x20000010
 8004784:	20000560 	.word	0x20000560
 8004788:	20000568 	.word	0x20000568
 800478c:	20000548 	.word	0x20000548

08004790 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004794:	4802      	ldr	r0, [pc, #8]	; (80047a0 <DMA1_Channel6_IRQHandler+0x10>)
 8004796:	f000 ff9f 	bl	80056d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800479a:	bf00      	nop
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200004e8 	.word	0x200004e8

080047a4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047a8:	4802      	ldr	r0, [pc, #8]	; (80047b4 <TIM1_BRK_IRQHandler+0x10>)
 80047aa:	f003 fbe3 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200003cc 	.word	0x200003cc

080047b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047bc:	4802      	ldr	r0, [pc, #8]	; (80047c8 <TIM1_UP_IRQHandler+0x10>)
 80047be:	f003 fbd9 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	200003cc 	.word	0x200003cc

080047cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <TIM1_TRG_COM_IRQHandler+0x10>)
 80047d2:	f003 fbcf 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200003cc 	.word	0x200003cc

080047e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047e4:	4802      	ldr	r0, [pc, #8]	; (80047f0 <TIM1_CC_IRQHandler+0x10>)
 80047e6:	f003 fbc5 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200003cc 	.word	0x200003cc

080047f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80047f8:	4802      	ldr	r0, [pc, #8]	; (8004804 <TIM3_IRQHandler+0x10>)
 80047fa:	f003 fbbb 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	2000045c 	.word	0x2000045c

08004808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
	return 1;
 800480c:	2301      	movs	r3, #1
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <_kill>:

int _kill(int pid, int sig)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004820:	f004 feaa 	bl	8009578 <__errno>
 8004824:	4603      	mov	r3, r0
 8004826:	2216      	movs	r2, #22
 8004828:	601a      	str	r2, [r3, #0]
	return -1;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_exit>:

void _exit (int status)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800483e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ffe7 	bl	8004816 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004848:	e7fe      	b.n	8004848 <_exit+0x12>

0800484a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e00a      	b.n	8004872 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800485c:	f3af 8000 	nop.w
 8004860:	4601      	mov	r1, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	60ba      	str	r2, [r7, #8]
 8004868:	b2ca      	uxtb	r2, r1
 800486a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3301      	adds	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	dbf0      	blt.n	800485c <_read+0x12>
	}

return len;
 800487a:	687b      	ldr	r3, [r7, #4]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	return -1;
 800488c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048aa:	605a      	str	r2, [r3, #4]
	return 0;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <_isatty>:

int _isatty(int file)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	return 1;
 80048c0:	2301      	movs	r3, #1
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
	return 0;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048ec:	4a14      	ldr	r2, [pc, #80]	; (8004940 <_sbrk+0x5c>)
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <_sbrk+0x60>)
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048f8:	4b13      	ldr	r3, [pc, #76]	; (8004948 <_sbrk+0x64>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <_sbrk+0x64>)
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <_sbrk+0x68>)
 8004904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <_sbrk+0x64>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	429a      	cmp	r2, r3
 8004912:	d207      	bcs.n	8004924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004914:	f004 fe30 	bl	8009578 <__errno>
 8004918:	4603      	mov	r3, r0
 800491a:	220c      	movs	r2, #12
 800491c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004922:	e009      	b.n	8004938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <_sbrk+0x64>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <_sbrk+0x64>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4413      	add	r3, r2
 8004932:	4a05      	ldr	r2, [pc, #20]	; (8004948 <_sbrk+0x64>)
 8004934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004936:	68fb      	ldr	r3, [r7, #12]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20005000 	.word	0x20005000
 8004944:	00000400 	.word	0x00000400
 8004948:	20000570 	.word	0x20000570
 800494c:	20000588 	.word	0x20000588

08004950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	0000      	movs	r0, r0
	...

08004960 <HAL_TIM_IC_CaptureCallback>:
#include "stm32f1xx_hal_tim.h"
#include "stm32f1xx_hal_gpio.h"
#include "main.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a86      	ldr	r2, [pc, #536]	; (8004b88 <HAL_TIM_IC_CaptureCallback+0x228>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d147      	bne.n	8004a02 <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 8004972:	4b86      	ldr	r3, [pc, #536]	; (8004b8c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8004974:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	4a84      	ldr	r2, [pc, #528]	; (8004b90 <HAL_TIM_IC_CaptureCallback+0x230>)
 800497e:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 8004980:	4b83      	ldr	r3, [pc, #524]	; (8004b90 <HAL_TIM_IC_CaptureCallback+0x230>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 8004988:	4b81      	ldr	r3, [pc, #516]	; (8004b90 <HAL_TIM_IC_CaptureCallback+0x230>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	b21a      	sxth	r2, r3
 800498e:	4b81      	ldr	r3, [pc, #516]	; (8004b94 <HAL_TIM_IC_CaptureCallback+0x234>)
 8004990:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 8004992:	4b80      	ldr	r3, [pc, #512]	; (8004b94 <HAL_TIM_IC_CaptureCallback+0x234>)
 8004994:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 800499c:	4b7d      	ldr	r3, [pc, #500]	; (8004b94 <HAL_TIM_IC_CaptureCallback+0x234>)
 800499e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da00      	bge.n	80049a8 <HAL_TIM_IC_CaptureCallback+0x48>
 80049a6:	3303      	adds	r3, #3
 80049a8:	109b      	asrs	r3, r3, #2
 80049aa:	b21a      	sxth	r2, r3
 80049ac:	4b7a      	ldr	r3, [pc, #488]	; (8004b98 <HAL_TIM_IC_CaptureCallback+0x238>)
 80049ae:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 80049b0:	4b79      	ldr	r3, [pc, #484]	; (8004b98 <HAL_TIM_IC_CaptureCallback+0x238>)
 80049b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	80da      	strh	r2, [r3, #6]

		distance = (2*3.1415*right_motor_encoder->wheel_radius) * position; // might have consider gear ratio in this calculation
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80049c0:	a36f      	add	r3, pc, #444	; (adr r3, 8004b80 <HAL_TIM_IC_CaptureCallback+0x220>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fd87 	bl	80004d8 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4614      	mov	r4, r2
 80049d0:	461d      	mov	r5, r3
 80049d2:	4b71      	ldr	r3, [pc, #452]	; (8004b98 <HAL_TIM_IC_CaptureCallback+0x238>)
 80049d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fb fd13 	bl	8000404 <__aeabi_i2d>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	f7fb fd77 	bl	80004d8 <__aeabi_dmul>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	496b      	ldr	r1, [pc, #428]	; (8004b9c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80049f0:	e9c1 2300 	strd	r2, r3, [r1]
		right_motor_encoder->distance = distance;
 80049f4:	4b69      	ldr	r3, [pc, #420]	; (8004b9c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
		}
	}

}
 8004a00:	e17c      	b.n	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
	else if (htim->Instance == TIM3) //ultrasonic
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a66      	ldr	r2, [pc, #408]	; (8004ba0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f040 8177 	bne.w	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7f1b      	ldrb	r3, [r3, #28]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d102      	bne.n	8004a1c <HAL_TIM_IC_CaptureCallback+0xbc>
			ultrasonic = &Front_US;
 8004a16:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e005      	b.n	8004a28 <HAL_TIM_IC_CaptureCallback+0xc8>
		else if (TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7f1b      	ldrb	r3, [r3, #28]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_IC_CaptureCallback+0xc8>
			ultrasonic = &Side_US;
 8004a24:	4b60      	ldr	r3, [pc, #384]	; (8004ba8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004a26:	61fb      	str	r3, [r7, #28]
		if (ultrasonic->FIRST_CAPTURED==0) // if the first value is not captured
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d171      	bne.n	8004b16 <HAL_TIM_IC_CaptureCallback+0x1b6>
			ultrasonic->VAL1 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH); // read the first value
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f003 fdb9 	bl	80085b0 <HAL_TIM_ReadCapturedValue>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fb fccf 	bl	80003e4 <__aeabi_ui2d>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	69f9      	ldr	r1, [r7, #28]
 8004a4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ultrasonic->FIRST_CAPTURED = 1;  // set the first captured as true
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d108      	bne.n	8004a72 <HAL_TIM_IC_CaptureCallback+0x112>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 020a 	bic.w	r2, r2, #10
 8004a6e:	621a      	str	r2, [r3, #32]
 8004a70:	e021      	b.n	8004ab6 <HAL_TIM_IC_CaptureCallback+0x156>
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d108      	bne.n	8004a8c <HAL_TIM_IC_CaptureCallback+0x12c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a88:	6213      	str	r3, [r2, #32]
 8004a8a:	e014      	b.n	8004ab6 <HAL_TIM_IC_CaptureCallback+0x156>
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d108      	bne.n	8004aa6 <HAL_TIM_IC_CaptureCallback+0x146>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa2:	6213      	str	r3, [r2, #32]
 8004aa4:	e007      	b.n	8004ab6 <HAL_TIM_IC_CaptureCallback+0x156>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab4:	6213      	str	r3, [r2, #32]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <HAL_TIM_IC_CaptureCallback+0x170>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0202 	orr.w	r2, r2, #2
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	e115      	b.n	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d108      	bne.n	8004aea <HAL_TIM_IC_CaptureCallback+0x18a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	f043 0320 	orr.w	r3, r3, #32
 8004ae6:	6213      	str	r3, [r2, #32]
 8004ae8:	e108      	b.n	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d108      	bne.n	8004b04 <HAL_TIM_IC_CaptureCallback+0x1a4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b00:	6213      	str	r3, [r2, #32]
 8004b02:	e0fb      	b.n	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b12:	6213      	str	r3, [r2, #32]
}
 8004b14:	e0f2      	b.n	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
		else if (ultrasonic->FIRST_CAPTURED==1)   // if the first is already captured
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	f040 80ed 	bne.w	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
			ultrasonic->VAL2 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH);  // read second value
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f003 fd41 	bl	80085b0 <HAL_TIM_ReadCapturedValue>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fb fc57 	bl	80003e4 <__aeabi_ui2d>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	69f9      	ldr	r1, [r7, #28]
 8004b3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2200      	movs	r2, #0
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic->VAL2 > ultrasonic->VAL1)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b54:	f7fb ff50 	bl	80009f8 <__aeabi_dcmpgt>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d026      	beq.n	8004bac <HAL_TIM_IC_CaptureCallback+0x24c>
				ultrasonic->DIFFERENCE = ultrasonic->VAL2-ultrasonic->VAL1;
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b6a:	f7fb fafd 	bl	8000168 <__aeabi_dsub>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	69f9      	ldr	r1, [r7, #28]
 8004b74:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004b78:	e039      	b.n	8004bee <HAL_TIM_IC_CaptureCallback+0x28e>
 8004b7a:	bf00      	nop
 8004b7c:	f3af 8000 	nop.w
 8004b80:	c083126f 	.word	0xc083126f
 8004b84:	401921ca 	.word	0x401921ca
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	20000010 	.word	0x20000010
 8004b90:	20000538 	.word	0x20000538
 8004b94:	2000053c 	.word	0x2000053c
 8004b98:	2000053e 	.word	0x2000053e
 8004b9c:	20000550 	.word	0x20000550
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	20000040 	.word	0x20000040
 8004ba8:	20000078 	.word	0x20000078
			else if (ultrasonic->VAL1 > ultrasonic->VAL2)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004bb8:	f7fb ff1e 	bl	80009f8 <__aeabi_dcmpgt>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_TIM_IC_CaptureCallback+0x28e>
				ultrasonic->DIFFERENCE = (0xffff - ultrasonic->VAL1) + ultrasonic->VAL2;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004bc8:	a14f      	add	r1, pc, #316	; (adr r1, 8004d08 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8004bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bce:	f7fb facb 	bl	8000168 <__aeabi_dsub>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004be0:	f7fb fac4 	bl	800016c <__adddf3>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	e9c1 2308 	strd	r2, r3, [r1, #32]
			sensor_val = ultrasonic->DIFFERENCE * .034/2;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004bf4:	a346      	add	r3, pc, #280	; (adr r3, 8004d10 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb fc6d 	bl	80004d8 <__aeabi_dmul>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c0e:	f7fb fd8d 	bl	800072c <__aeabi_ddiv>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9c7 2304 	strd	r2, r3, [r7, #16]
			ultrasonic->DISTANCE = filter(sensor_val, ultrasonic->DISTANCE);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004c20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c24:	f000 f898 	bl	8004d58 <filter>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	69f9      	ldr	r1, [r7, #28]
 8004c2e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ultrasonic->FIRST_CAPTURED = 0; // set back to false
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d108      	bne.n	8004c54 <HAL_TIM_IC_CaptureCallback+0x2f4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 020a 	bic.w	r2, r2, #10
 8004c50:	621a      	str	r2, [r3, #32]
 8004c52:	e021      	b.n	8004c98 <HAL_TIM_IC_CaptureCallback+0x338>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d108      	bne.n	8004c6e <HAL_TIM_IC_CaptureCallback+0x30e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c6a:	6213      	str	r3, [r2, #32]
 8004c6c:	e014      	b.n	8004c98 <HAL_TIM_IC_CaptureCallback+0x338>
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d108      	bne.n	8004c88 <HAL_TIM_IC_CaptureCallback+0x328>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c84:	6213      	str	r3, [r2, #32]
 8004c86:	e007      	b.n	8004c98 <HAL_TIM_IC_CaptureCallback+0x338>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c96:	6213      	str	r3, [r2, #32]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <HAL_TIM_IC_CaptureCallback+0x34e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a12      	ldr	r2, [r2, #32]
 8004caa:	621a      	str	r2, [r3, #32]
 8004cac:	e01b      	b.n	8004ce6 <HAL_TIM_IC_CaptureCallback+0x386>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d106      	bne.n	8004cc4 <HAL_TIM_IC_CaptureCallback+0x364>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	6213      	str	r3, [r2, #32]
 8004cc2:	e010      	b.n	8004ce6 <HAL_TIM_IC_CaptureCallback+0x386>
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d106      	bne.n	8004cda <HAL_TIM_IC_CaptureCallback+0x37a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	6213      	str	r3, [r2, #32]
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IC_CaptureCallback+0x386>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68d9      	ldr	r1, [r3, #12]
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	60da      	str	r2, [r3, #12]
}
 8004cfa:	e7ff      	b.n	8004cfc <HAL_TIM_IC_CaptureCallback+0x39c>
 8004cfc:	bf00      	nop
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bdb0      	pop	{r4, r5, r7, pc}
 8004d04:	f3af 8000 	nop.w
 8004d08:	00000000 	.word	0x00000000
 8004d0c:	40efffe0 	.word	0x40efffe0
 8004d10:	b020c49c 	.word	0xb020c49c
 8004d14:	3fa16872 	.word	0x3fa16872

08004d18 <HCSR04_Read_Front>:
	0,
	0
};

void HCSR04_Read_Front (TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8004d20:	2201      	movs	r2, #1
 8004d22:	2140      	movs	r1, #64	; 0x40
 8004d24:	480b      	ldr	r0, [pc, #44]	; (8004d54 <HCSR04_Read_Front+0x3c>)
 8004d26:	f000 ff8f 	bl	8005c48 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8004d2a:	200a      	movs	r0, #10
 8004d2c:	f7ff f9e8 	bl	8004100 <delay_us>
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8004d30:	2200      	movs	r2, #0
 8004d32:	2140      	movs	r1, #64	; 0x40
 8004d34:	4807      	ldr	r0, [pc, #28]	; (8004d54 <HCSR04_Read_Front+0x3c>)
 8004d36:	f000 ff87 	bl	8005c48 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0204 	orr.w	r2, r2, #4
 8004d48:	60da      	str	r2, [r3, #12]

}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40010800 	.word	0x40010800

08004d58 <filter>:
{
	return Side_US.DISTANCE;
}

double filter (double Sv, double old_Kv)
{
 8004d58:	b5b0      	push	{r4, r5, r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004d62:	e9c7 2300 	strd	r2, r3, [r7]
	double Kv = Sv*r + old_Kv*(1-r);
 8004d66:	a116      	add	r1, pc, #88	; (adr r1, 8004dc0 <filter+0x68>)
 8004d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d70:	f7fb fbb2 	bl	80004d8 <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	461d      	mov	r5, r3
 8004d7c:	a310      	add	r3, pc, #64	; (adr r3, 8004dc0 <filter+0x68>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	4910      	ldr	r1, [pc, #64]	; (8004dc8 <filter+0x70>)
 8004d88:	f7fb f9ee 	bl	8000168 <__aeabi_dsub>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d98:	f7fb fb9e 	bl	80004d8 <__aeabi_dmul>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	f7fb f9e2 	bl	800016c <__adddf3>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Kv;
 8004db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	47ae147b 	.word	0x47ae147b
 8004dc4:	3f847ae1 	.word	0x3f847ae1
 8004dc8:	3ff00000 	.word	0x3ff00000

08004dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004dcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004dce:	e003      	b.n	8004dd8 <LoopCopyDataInit>

08004dd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004dd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004dd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004dd6:	3104      	adds	r1, #4

08004dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004dd8:	480a      	ldr	r0, [pc, #40]	; (8004e04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004ddc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004dde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004de0:	d3f6      	bcc.n	8004dd0 <CopyDataInit>
  ldr r2, =_sbss
 8004de2:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004de4:	e002      	b.n	8004dec <LoopFillZerobss>

08004de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004de6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004de8:	f842 3b04 	str.w	r3, [r2], #4

08004dec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004dec:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004dee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004df0:	d3f9      	bcc.n	8004de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004df2:	f7ff fdad 	bl	8004950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004df6:	f004 fbc5 	bl	8009584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004dfa:	f7fe fcfd 	bl	80037f8 <main>
  bx lr
 8004dfe:	4770      	bx	lr
  ldr r3, =_sidata
 8004e00:	0800ced4 	.word	0x0800ced4
  ldr r0, =_sdata
 8004e04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004e08:	20000288 	.word	0x20000288
  ldr r2, =_sbss
 8004e0c:	20000288 	.word	0x20000288
  ldr r3, = _ebss
 8004e10:	20000588 	.word	0x20000588

08004e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e14:	e7fe      	b.n	8004e14 <ADC1_2_IRQHandler>
	...

08004e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <HAL_Init+0x28>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <HAL_Init+0x28>)
 8004e22:	f043 0310 	orr.w	r3, r3, #16
 8004e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e28:	2003      	movs	r0, #3
 8004e2a:	f000 fb59 	bl	80054e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f000 f808 	bl	8004e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e34:	f7ff f99a 	bl	800416c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40022000 	.word	0x40022000

08004e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_InitTick+0x54>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_InitTick+0x58>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	4619      	mov	r1, r3
 8004e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fb71 	bl	800554a <HAL_SYSTICK_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e00e      	b.n	8004e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d80a      	bhi.n	8004e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e80:	f000 fb39 	bl	80054f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e84:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <HAL_InitTick+0x5c>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e000      	b.n	8004e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000038 	.word	0x20000038
 8004e9c:	200000b4 	.word	0x200000b4
 8004ea0:	200000b0 	.word	0x200000b0

08004ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_IncTick+0x1c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_IncTick+0x20>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <HAL_IncTick+0x20>)
 8004eb6:	6013      	str	r3, [r2, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	200000b4 	.word	0x200000b4
 8004ec4:	20000574 	.word	0x20000574

08004ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return uwTick;
 8004ecc:	4b02      	ldr	r3, [pc, #8]	; (8004ed8 <HAL_GetTick+0x10>)
 8004ece:	681b      	ldr	r3, [r3, #0]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	20000574 	.word	0x20000574

08004edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ee4:	f7ff fff0 	bl	8004ec8 <HAL_GetTick>
 8004ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ef4:	d005      	beq.n	8004f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_Delay+0x44>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f02:	bf00      	nop
 8004f04:	f7ff ffe0 	bl	8004ec8 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d8f7      	bhi.n	8004f04 <HAL_Delay+0x28>
  {
  }
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200000b4 	.word	0x200000b4

08004f24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0be      	b.n	80050c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff f934 	bl	80041d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f9ab 	bl	80052c4 <ADC_ConversionStop_Disable>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8099 	bne.w	80050b2 <HAL_ADC_Init+0x18e>
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 8095 	bne.w	80050b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f90:	f023 0302 	bic.w	r3, r3, #2
 8004f94:	f043 0202 	orr.w	r2, r3, #2
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fa4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7b1b      	ldrb	r3, [r3, #12]
 8004faa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004fac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbc:	d003      	beq.n	8004fc6 <HAL_ADC_Init+0xa2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d102      	bne.n	8004fcc <HAL_ADC_Init+0xa8>
 8004fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fca:	e000      	b.n	8004fce <HAL_ADC_Init+0xaa>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7d1b      	ldrb	r3, [r3, #20]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d119      	bne.n	8005010 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7b1b      	ldrb	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	035a      	lsls	r2, r3, #13
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	e00b      	b.n	8005010 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f043 0220 	orr.w	r2, r3, #32
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_ADC_Init+0x1a8>)
 800502c:	4013      	ands	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	430b      	orrs	r3, r1
 8005036:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005040:	d003      	beq.n	800504a <HAL_ADC_Init+0x126>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d104      	bne.n	8005054 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	3b01      	subs	r3, #1
 8005050:	051b      	lsls	r3, r3, #20
 8005052:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	430a      	orrs	r2, r1
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_ADC_Init+0x1ac>)
 8005070:	4013      	ands	r3, r2
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	d10b      	bne.n	8005090 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800508e:	e018      	b.n	80050c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	f023 0312 	bic.w	r3, r3, #18
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	f043 0201 	orr.w	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050b0:	e007      	b.n	80050c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	f043 0210 	orr.w	r2, r3, #16
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	ffe1f7fd 	.word	0xffe1f7fd
 80050d0:	ff1f0efe 	.word	0xff1f0efe

080050d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x20>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0dc      	b.n	80052ae <HAL_ADC_ConfigChannel+0x1da>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b06      	cmp	r3, #6
 8005102:	d81c      	bhi.n	800513e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	3b05      	subs	r3, #5
 8005116:	221f      	movs	r2, #31
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	4019      	ands	r1, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	3b05      	subs	r3, #5
 8005130:	fa00 f203 	lsl.w	r2, r0, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	635a      	str	r2, [r3, #52]	; 0x34
 800513c:	e03c      	b.n	80051b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d81c      	bhi.n	8005180 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	3b23      	subs	r3, #35	; 0x23
 8005158:	221f      	movs	r2, #31
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	4019      	ands	r1, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	3b23      	subs	r3, #35	; 0x23
 8005172:	fa00 f203 	lsl.w	r2, r0, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
 800517e:	e01b      	b.n	80051b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	3b41      	subs	r3, #65	; 0x41
 8005192:	221f      	movs	r2, #31
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	4019      	ands	r1, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	3b41      	subs	r3, #65	; 0x41
 80051ac:	fa00 f203 	lsl.w	r2, r0, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b09      	cmp	r3, #9
 80051be:	d91c      	bls.n	80051fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68d9      	ldr	r1, [r3, #12]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	3b1e      	subs	r3, #30
 80051d2:	2207      	movs	r2, #7
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	4019      	ands	r1, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6898      	ldr	r0, [r3, #8]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4413      	add	r3, r2
 80051ea:	3b1e      	subs	r3, #30
 80051ec:	fa00 f203 	lsl.w	r2, r0, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	e019      	b.n	800522e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6919      	ldr	r1, [r3, #16]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	2207      	movs	r2, #7
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	4019      	ands	r1, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6898      	ldr	r0, [r3, #8]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	fa00 f203 	lsl.w	r2, r0, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b10      	cmp	r3, #16
 8005234:	d003      	beq.n	800523e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800523a:	2b11      	cmp	r3, #17
 800523c:	d132      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d125      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d126      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005264:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b10      	cmp	r3, #16
 800526c:	d11a      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_ADC_ConfigChannel+0x1e8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	0c9a      	lsrs	r2, r3, #18
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005284:	e002      	b.n	800528c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	3b01      	subs	r3, #1
 800528a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f9      	bne.n	8005286 <HAL_ADC_ConfigChannel+0x1b2>
 8005292:	e007      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	40012400 	.word	0x40012400
 80052bc:	20000038 	.word	0x20000038
 80052c0:	431bde83 	.word	0x431bde83

080052c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d12e      	bne.n	800533c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052ee:	f7ff fdeb 	bl	8004ec8 <HAL_GetTick>
 80052f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80052f4:	e01b      	b.n	800532e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052f6:	f7ff fde7 	bl	8004ec8 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d914      	bls.n	800532e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10d      	bne.n	800532e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	f043 0210 	orr.w	r2, r3, #16
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e007      	b.n	800533e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	d0dc      	beq.n	80052f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <__NVIC_SetPriorityGrouping>:
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <__NVIC_SetPriorityGrouping+0x44>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005364:	4013      	ands	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800537a:	4a04      	ldr	r2, [pc, #16]	; (800538c <__NVIC_SetPriorityGrouping+0x44>)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	60d3      	str	r3, [r2, #12]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	e000ed00 	.word	0xe000ed00

08005390 <__NVIC_GetPriorityGrouping>:
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	f003 0307 	and.w	r3, r3, #7
}
 800539e:	4618      	mov	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	e000ed00 	.word	0xe000ed00

080053ac <__NVIC_EnableIRQ>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db0b      	blt.n	80053d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	f003 021f 	and.w	r2, r3, #31
 80053c4:	4906      	ldr	r1, [pc, #24]	; (80053e0 <__NVIC_EnableIRQ+0x34>)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2001      	movs	r0, #1
 80053ce:	fa00 f202 	lsl.w	r2, r0, r2
 80053d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr
 80053e0:	e000e100 	.word	0xe000e100

080053e4 <__NVIC_SetPriority>:
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	6039      	str	r1, [r7, #0]
 80053ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	db0a      	blt.n	800540e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	490c      	ldr	r1, [pc, #48]	; (8005430 <__NVIC_SetPriority+0x4c>)
 80053fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005402:	0112      	lsls	r2, r2, #4
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	440b      	add	r3, r1
 8005408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800540c:	e00a      	b.n	8005424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	4908      	ldr	r1, [pc, #32]	; (8005434 <__NVIC_SetPriority+0x50>)
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	3b04      	subs	r3, #4
 800541c:	0112      	lsls	r2, r2, #4
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	440b      	add	r3, r1
 8005422:	761a      	strb	r2, [r3, #24]
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e100 	.word	0xe000e100
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <NVIC_EncodePriority>:
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	; 0x24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f1c3 0307 	rsb	r3, r3, #7
 8005452:	2b04      	cmp	r3, #4
 8005454:	bf28      	it	cs
 8005456:	2304      	movcs	r3, #4
 8005458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3304      	adds	r3, #4
 800545e:	2b06      	cmp	r3, #6
 8005460:	d902      	bls.n	8005468 <NVIC_EncodePriority+0x30>
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3b03      	subs	r3, #3
 8005466:	e000      	b.n	800546a <NVIC_EncodePriority+0x32>
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800546c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43da      	mvns	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	401a      	ands	r2, r3
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	43d9      	mvns	r1, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005490:	4313      	orrs	r3, r2
}
 8005492:	4618      	mov	r0, r3
 8005494:	3724      	adds	r7, #36	; 0x24
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <SysTick_Config>:
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054ac:	d301      	bcc.n	80054b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80054ae:	2301      	movs	r3, #1
 80054b0:	e00f      	b.n	80054d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <SysTick_Config+0x40>)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ba:	210f      	movs	r1, #15
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c0:	f7ff ff90 	bl	80053e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <SysTick_Config+0x40>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <SysTick_Config+0x40>)
 80054cc:	2207      	movs	r2, #7
 80054ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	e000e010 	.word	0xe000e010

080054e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ff2d 	bl	8005348 <__NVIC_SetPriorityGrouping>
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	4603      	mov	r3, r0
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005508:	f7ff ff42 	bl	8005390 <__NVIC_GetPriorityGrouping>
 800550c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	6978      	ldr	r0, [r7, #20]
 8005514:	f7ff ff90 	bl	8005438 <NVIC_EncodePriority>
 8005518:	4602      	mov	r2, r0
 800551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff5f 	bl	80053e4 <__NVIC_SetPriority>
}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	4603      	mov	r3, r0
 8005536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff ff35 	bl	80053ac <__NVIC_EnableIRQ>
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ffa2 	bl	800549c <SysTick_Config>
 8005558:	4603      	mov	r3, r0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e043      	b.n	8005602 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <HAL_DMA_Init+0xa8>)
 8005582:	4413      	add	r3, r2
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_DMA_Init+0xac>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	009a      	lsls	r2, r3, #2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <HAL_DMA_Init+0xb0>)
 8005596:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80055b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80055bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	bffdfff8 	.word	0xbffdfff8
 8005610:	cccccccd 	.word	0xcccccccd
 8005614:	40020000 	.word	0x40020000

08005618 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_DMA_Start_IT+0x20>
 8005634:	2302      	movs	r3, #2
 8005636:	e04a      	b.n	80056ce <HAL_DMA_Start_IT+0xb6>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005646:	2b01      	cmp	r3, #1
 8005648:	d13a      	bne.n	80056c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f938 	bl	80058e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 020e 	orr.w	r2, r2, #14
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e00f      	b.n	80056ae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 020a 	orr.w	r2, r2, #10
 80056ac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e005      	b.n	80056cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80056c8:	2302      	movs	r3, #2
 80056ca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	2204      	movs	r2, #4
 80056f6:	409a      	lsls	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d04f      	beq.n	80057a0 <HAL_DMA_IRQHandler+0xc8>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04a      	beq.n	80057a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d107      	bne.n	8005728 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0204 	bic.w	r2, r2, #4
 8005726:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a66      	ldr	r2, [pc, #408]	; (80058c8 <HAL_DMA_IRQHandler+0x1f0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d029      	beq.n	8005786 <HAL_DMA_IRQHandler+0xae>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a65      	ldr	r2, [pc, #404]	; (80058cc <HAL_DMA_IRQHandler+0x1f4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_IRQHandler+0xaa>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a63      	ldr	r2, [pc, #396]	; (80058d0 <HAL_DMA_IRQHandler+0x1f8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01a      	beq.n	800577c <HAL_DMA_IRQHandler+0xa4>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a62      	ldr	r2, [pc, #392]	; (80058d4 <HAL_DMA_IRQHandler+0x1fc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d012      	beq.n	8005776 <HAL_DMA_IRQHandler+0x9e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a60      	ldr	r2, [pc, #384]	; (80058d8 <HAL_DMA_IRQHandler+0x200>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00a      	beq.n	8005770 <HAL_DMA_IRQHandler+0x98>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a5f      	ldr	r2, [pc, #380]	; (80058dc <HAL_DMA_IRQHandler+0x204>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d102      	bne.n	800576a <HAL_DMA_IRQHandler+0x92>
 8005764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005768:	e00e      	b.n	8005788 <HAL_DMA_IRQHandler+0xb0>
 800576a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800576e:	e00b      	b.n	8005788 <HAL_DMA_IRQHandler+0xb0>
 8005770:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005774:	e008      	b.n	8005788 <HAL_DMA_IRQHandler+0xb0>
 8005776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800577a:	e005      	b.n	8005788 <HAL_DMA_IRQHandler+0xb0>
 800577c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005780:	e002      	b.n	8005788 <HAL_DMA_IRQHandler+0xb0>
 8005782:	2340      	movs	r3, #64	; 0x40
 8005784:	e000      	b.n	8005788 <HAL_DMA_IRQHandler+0xb0>
 8005786:	2304      	movs	r3, #4
 8005788:	4a55      	ldr	r2, [pc, #340]	; (80058e0 <HAL_DMA_IRQHandler+0x208>)
 800578a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8094 	beq.w	80058be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800579e:	e08e      	b.n	80058be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	2202      	movs	r2, #2
 80057a6:	409a      	lsls	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d056      	beq.n	800585e <HAL_DMA_IRQHandler+0x186>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d051      	beq.n	800585e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10b      	bne.n	80057e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 020a 	bic.w	r2, r2, #10
 80057d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a38      	ldr	r2, [pc, #224]	; (80058c8 <HAL_DMA_IRQHandler+0x1f0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d029      	beq.n	800583e <HAL_DMA_IRQHandler+0x166>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a37      	ldr	r2, [pc, #220]	; (80058cc <HAL_DMA_IRQHandler+0x1f4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_DMA_IRQHandler+0x162>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a35      	ldr	r2, [pc, #212]	; (80058d0 <HAL_DMA_IRQHandler+0x1f8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01a      	beq.n	8005834 <HAL_DMA_IRQHandler+0x15c>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a34      	ldr	r2, [pc, #208]	; (80058d4 <HAL_DMA_IRQHandler+0x1fc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d012      	beq.n	800582e <HAL_DMA_IRQHandler+0x156>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a32      	ldr	r2, [pc, #200]	; (80058d8 <HAL_DMA_IRQHandler+0x200>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00a      	beq.n	8005828 <HAL_DMA_IRQHandler+0x150>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a31      	ldr	r2, [pc, #196]	; (80058dc <HAL_DMA_IRQHandler+0x204>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d102      	bne.n	8005822 <HAL_DMA_IRQHandler+0x14a>
 800581c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005820:	e00e      	b.n	8005840 <HAL_DMA_IRQHandler+0x168>
 8005822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005826:	e00b      	b.n	8005840 <HAL_DMA_IRQHandler+0x168>
 8005828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800582c:	e008      	b.n	8005840 <HAL_DMA_IRQHandler+0x168>
 800582e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005832:	e005      	b.n	8005840 <HAL_DMA_IRQHandler+0x168>
 8005834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005838:	e002      	b.n	8005840 <HAL_DMA_IRQHandler+0x168>
 800583a:	2320      	movs	r3, #32
 800583c:	e000      	b.n	8005840 <HAL_DMA_IRQHandler+0x168>
 800583e:	2302      	movs	r3, #2
 8005840:	4a27      	ldr	r2, [pc, #156]	; (80058e0 <HAL_DMA_IRQHandler+0x208>)
 8005842:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	2b00      	cmp	r3, #0
 8005852:	d034      	beq.n	80058be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800585c:	e02f      	b.n	80058be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2208      	movs	r2, #8
 8005864:	409a      	lsls	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d028      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x1e8>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 020e 	bic.w	r2, r2, #14
 8005886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005890:	2101      	movs	r1, #1
 8005892:	fa01 f202 	lsl.w	r2, r1, r2
 8005896:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
    }
  }
  return;
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
}
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40020008 	.word	0x40020008
 80058cc:	4002001c 	.word	0x4002001c
 80058d0:	40020030 	.word	0x40020030
 80058d4:	40020044 	.word	0x40020044
 80058d8:	40020058 	.word	0x40020058
 80058dc:	4002006c 	.word	0x4002006c
 80058e0:	40020000 	.word	0x40020000

080058e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	2101      	movs	r1, #1
 80058fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005900:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b10      	cmp	r3, #16
 8005910:	d108      	bne.n	8005924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005922:	e007      	b.n	8005934 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr
	...

08005940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005940:	b480      	push	{r7}
 8005942:	b08b      	sub	sp, #44	; 0x2c
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005952:	e169      	b.n	8005c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005954:	2201      	movs	r2, #1
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	429a      	cmp	r2, r3
 800596e:	f040 8158 	bne.w	8005c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4a9a      	ldr	r2, [pc, #616]	; (8005be0 <HAL_GPIO_Init+0x2a0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d05e      	beq.n	8005a3a <HAL_GPIO_Init+0xfa>
 800597c:	4a98      	ldr	r2, [pc, #608]	; (8005be0 <HAL_GPIO_Init+0x2a0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d875      	bhi.n	8005a6e <HAL_GPIO_Init+0x12e>
 8005982:	4a98      	ldr	r2, [pc, #608]	; (8005be4 <HAL_GPIO_Init+0x2a4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d058      	beq.n	8005a3a <HAL_GPIO_Init+0xfa>
 8005988:	4a96      	ldr	r2, [pc, #600]	; (8005be4 <HAL_GPIO_Init+0x2a4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d86f      	bhi.n	8005a6e <HAL_GPIO_Init+0x12e>
 800598e:	4a96      	ldr	r2, [pc, #600]	; (8005be8 <HAL_GPIO_Init+0x2a8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d052      	beq.n	8005a3a <HAL_GPIO_Init+0xfa>
 8005994:	4a94      	ldr	r2, [pc, #592]	; (8005be8 <HAL_GPIO_Init+0x2a8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d869      	bhi.n	8005a6e <HAL_GPIO_Init+0x12e>
 800599a:	4a94      	ldr	r2, [pc, #592]	; (8005bec <HAL_GPIO_Init+0x2ac>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d04c      	beq.n	8005a3a <HAL_GPIO_Init+0xfa>
 80059a0:	4a92      	ldr	r2, [pc, #584]	; (8005bec <HAL_GPIO_Init+0x2ac>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d863      	bhi.n	8005a6e <HAL_GPIO_Init+0x12e>
 80059a6:	4a92      	ldr	r2, [pc, #584]	; (8005bf0 <HAL_GPIO_Init+0x2b0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d046      	beq.n	8005a3a <HAL_GPIO_Init+0xfa>
 80059ac:	4a90      	ldr	r2, [pc, #576]	; (8005bf0 <HAL_GPIO_Init+0x2b0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d85d      	bhi.n	8005a6e <HAL_GPIO_Init+0x12e>
 80059b2:	2b12      	cmp	r3, #18
 80059b4:	d82a      	bhi.n	8005a0c <HAL_GPIO_Init+0xcc>
 80059b6:	2b12      	cmp	r3, #18
 80059b8:	d859      	bhi.n	8005a6e <HAL_GPIO_Init+0x12e>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <HAL_GPIO_Init+0x80>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	08005a3b 	.word	0x08005a3b
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a27 	.word	0x08005a27
 80059cc:	08005a69 	.word	0x08005a69
 80059d0:	08005a6f 	.word	0x08005a6f
 80059d4:	08005a6f 	.word	0x08005a6f
 80059d8:	08005a6f 	.word	0x08005a6f
 80059dc:	08005a6f 	.word	0x08005a6f
 80059e0:	08005a6f 	.word	0x08005a6f
 80059e4:	08005a6f 	.word	0x08005a6f
 80059e8:	08005a6f 	.word	0x08005a6f
 80059ec:	08005a6f 	.word	0x08005a6f
 80059f0:	08005a6f 	.word	0x08005a6f
 80059f4:	08005a6f 	.word	0x08005a6f
 80059f8:	08005a6f 	.word	0x08005a6f
 80059fc:	08005a6f 	.word	0x08005a6f
 8005a00:	08005a6f 	.word	0x08005a6f
 8005a04:	08005a1d 	.word	0x08005a1d
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	4a79      	ldr	r2, [pc, #484]	; (8005bf4 <HAL_GPIO_Init+0x2b4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005a12:	e02c      	b.n	8005a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	623b      	str	r3, [r7, #32]
          break;
 8005a1a:	e029      	b.n	8005a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	3304      	adds	r3, #4
 8005a22:	623b      	str	r3, [r7, #32]
          break;
 8005a24:	e024      	b.n	8005a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	623b      	str	r3, [r7, #32]
          break;
 8005a2e:	e01f      	b.n	8005a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	330c      	adds	r3, #12
 8005a36:	623b      	str	r3, [r7, #32]
          break;
 8005a38:	e01a      	b.n	8005a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a42:	2304      	movs	r3, #4
 8005a44:	623b      	str	r3, [r7, #32]
          break;
 8005a46:	e013      	b.n	8005a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d105      	bne.n	8005a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a50:	2308      	movs	r3, #8
 8005a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	611a      	str	r2, [r3, #16]
          break;
 8005a5a:	e009      	b.n	8005a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	615a      	str	r2, [r3, #20]
          break;
 8005a66:	e003      	b.n	8005a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	623b      	str	r3, [r7, #32]
          break;
 8005a6c:	e000      	b.n	8005a70 <HAL_GPIO_Init+0x130>
          break;
 8005a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2bff      	cmp	r3, #255	; 0xff
 8005a74:	d801      	bhi.n	8005a7a <HAL_GPIO_Init+0x13a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	e001      	b.n	8005a7e <HAL_GPIO_Init+0x13e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2bff      	cmp	r3, #255	; 0xff
 8005a84:	d802      	bhi.n	8005a8c <HAL_GPIO_Init+0x14c>
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	e002      	b.n	8005a92 <HAL_GPIO_Init+0x152>
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	3b08      	subs	r3, #8
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	210f      	movs	r1, #15
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	6a39      	ldr	r1, [r7, #32]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	431a      	orrs	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80b1 	beq.w	8005c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005ac0:	4b4d      	ldr	r3, [pc, #308]	; (8005bf8 <HAL_GPIO_Init+0x2b8>)
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	4a4c      	ldr	r2, [pc, #304]	; (8005bf8 <HAL_GPIO_Init+0x2b8>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	6193      	str	r3, [r2, #24]
 8005acc:	4b4a      	ldr	r3, [pc, #296]	; (8005bf8 <HAL_GPIO_Init+0x2b8>)
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005ad8:	4a48      	ldr	r2, [pc, #288]	; (8005bfc <HAL_GPIO_Init+0x2bc>)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	3302      	adds	r3, #2
 8005ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	220f      	movs	r2, #15
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a40      	ldr	r2, [pc, #256]	; (8005c00 <HAL_GPIO_Init+0x2c0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_GPIO_Init+0x1ec>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a3f      	ldr	r2, [pc, #252]	; (8005c04 <HAL_GPIO_Init+0x2c4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00d      	beq.n	8005b28 <HAL_GPIO_Init+0x1e8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3e      	ldr	r2, [pc, #248]	; (8005c08 <HAL_GPIO_Init+0x2c8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d007      	beq.n	8005b24 <HAL_GPIO_Init+0x1e4>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3d      	ldr	r2, [pc, #244]	; (8005c0c <HAL_GPIO_Init+0x2cc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d101      	bne.n	8005b20 <HAL_GPIO_Init+0x1e0>
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e006      	b.n	8005b2e <HAL_GPIO_Init+0x1ee>
 8005b20:	2304      	movs	r3, #4
 8005b22:	e004      	b.n	8005b2e <HAL_GPIO_Init+0x1ee>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e002      	b.n	8005b2e <HAL_GPIO_Init+0x1ee>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_GPIO_Init+0x1ee>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	f002 0203 	and.w	r2, r2, #3
 8005b34:	0092      	lsls	r2, r2, #2
 8005b36:	4093      	lsls	r3, r2
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b3e:	492f      	ldr	r1, [pc, #188]	; (8005bfc <HAL_GPIO_Init+0x2bc>)
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	089b      	lsrs	r3, r3, #2
 8005b44:	3302      	adds	r3, #2
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d006      	beq.n	8005b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b58:	4b2d      	ldr	r3, [pc, #180]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	492c      	ldr	r1, [pc, #176]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	600b      	str	r3, [r1, #0]
 8005b64:	e006      	b.n	8005b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b66:	4b2a      	ldr	r3, [pc, #168]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	4928      	ldr	r1, [pc, #160]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d006      	beq.n	8005b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b80:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	4922      	ldr	r1, [pc, #136]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	604b      	str	r3, [r1, #4]
 8005b8c:	e006      	b.n	8005b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b8e:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	491e      	ldr	r1, [pc, #120]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d006      	beq.n	8005bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	4918      	ldr	r1, [pc, #96]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	608b      	str	r3, [r1, #8]
 8005bb4:	e006      	b.n	8005bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	4914      	ldr	r1, [pc, #80]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d021      	beq.n	8005c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	490e      	ldr	r1, [pc, #56]	; (8005c10 <HAL_GPIO_Init+0x2d0>)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60cb      	str	r3, [r1, #12]
 8005bdc:	e021      	b.n	8005c22 <HAL_GPIO_Init+0x2e2>
 8005bde:	bf00      	nop
 8005be0:	10320000 	.word	0x10320000
 8005be4:	10310000 	.word	0x10310000
 8005be8:	10220000 	.word	0x10220000
 8005bec:	10210000 	.word	0x10210000
 8005bf0:	10120000 	.word	0x10120000
 8005bf4:	10110000 	.word	0x10110000
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40010800 	.word	0x40010800
 8005c04:	40010c00 	.word	0x40010c00
 8005c08:	40011000 	.word	0x40011000
 8005c0c:	40011400 	.word	0x40011400
 8005c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	4909      	ldr	r1, [pc, #36]	; (8005c44 <HAL_GPIO_Init+0x304>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	3301      	adds	r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f47f ae8e 	bne.w	8005954 <HAL_GPIO_Init+0x14>
  }
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	372c      	adds	r7, #44	; 0x2c
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	40010400 	.word	0x40010400

08005c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
 8005c54:	4613      	mov	r3, r2
 8005c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c58:	787b      	ldrb	r3, [r7, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c5e:	887a      	ldrh	r2, [r7, #2]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005c64:	e003      	b.n	8005c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	041a      	lsls	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	611a      	str	r2, [r3, #16]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c8a:	887a      	ldrh	r2, [r7, #2]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	041a      	lsls	r2, r3, #16
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	43d9      	mvns	r1, r3
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	400b      	ands	r3, r1
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	611a      	str	r2, [r3, #16]
}
 8005ca0:	bf00      	nop
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e12b      	b.n	8005f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fe fab8 	bl	8004248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	; 0x24
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d10:	f001 fb6e 	bl	80073f0 <HAL_RCC_GetPCLK1Freq>
 8005d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4a81      	ldr	r2, [pc, #516]	; (8005f20 <HAL_I2C_Init+0x274>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d807      	bhi.n	8005d30 <HAL_I2C_Init+0x84>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a80      	ldr	r2, [pc, #512]	; (8005f24 <HAL_I2C_Init+0x278>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bf94      	ite	ls
 8005d28:	2301      	movls	r3, #1
 8005d2a:	2300      	movhi	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e006      	b.n	8005d3e <HAL_I2C_Init+0x92>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a7d      	ldr	r2, [pc, #500]	; (8005f28 <HAL_I2C_Init+0x27c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	bf94      	ite	ls
 8005d38:	2301      	movls	r3, #1
 8005d3a:	2300      	movhi	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0e7      	b.n	8005f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a78      	ldr	r2, [pc, #480]	; (8005f2c <HAL_I2C_Init+0x280>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	0c9b      	lsrs	r3, r3, #18
 8005d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a6a      	ldr	r2, [pc, #424]	; (8005f20 <HAL_I2C_Init+0x274>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d802      	bhi.n	8005d80 <HAL_I2C_Init+0xd4>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	e009      	b.n	8005d94 <HAL_I2C_Init+0xe8>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	4a69      	ldr	r2, [pc, #420]	; (8005f30 <HAL_I2C_Init+0x284>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	099b      	lsrs	r3, r3, #6
 8005d92:	3301      	adds	r3, #1
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	495c      	ldr	r1, [pc, #368]	; (8005f20 <HAL_I2C_Init+0x274>)
 8005db0:	428b      	cmp	r3, r1
 8005db2:	d819      	bhi.n	8005de8 <HAL_I2C_Init+0x13c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1e59      	subs	r1, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dc2:	1c59      	adds	r1, r3, #1
 8005dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005dc8:	400b      	ands	r3, r1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_I2C_Init+0x138>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1e59      	subs	r1, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de2:	e051      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005de4:	2304      	movs	r3, #4
 8005de6:	e04f      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d111      	bne.n	8005e14 <HAL_I2C_Init+0x168>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1e58      	subs	r0, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6859      	ldr	r1, [r3, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	440b      	add	r3, r1
 8005dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e02:	3301      	adds	r3, #1
 8005e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2301      	moveq	r3, #1
 8005e0e:	2300      	movne	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e012      	b.n	8005e3a <HAL_I2C_Init+0x18e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1e58      	subs	r0, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	0099      	lsls	r1, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Init+0x196>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e022      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <HAL_I2C_Init+0x1bc>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1e58      	subs	r0, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	440b      	add	r3, r1
 8005e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	e00f      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1e58      	subs	r0, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	0099      	lsls	r1, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	6809      	ldr	r1, [r1, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6911      	ldr	r1, [r2, #16]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68d2      	ldr	r2, [r2, #12]
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	000186a0 	.word	0x000186a0
 8005f24:	001e847f 	.word	0x001e847f
 8005f28:	003d08ff 	.word	0x003d08ff
 8005f2c:	431bde83 	.word	0x431bde83
 8005f30:	10624dd3 	.word	0x10624dd3

08005f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	460b      	mov	r3, r1
 8005f42:	817b      	strh	r3, [r7, #10]
 8005f44:	4613      	mov	r3, r2
 8005f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f48:	f7fe ffbe 	bl	8004ec8 <HAL_GetTick>
 8005f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	f040 80e0 	bne.w	800611c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2319      	movs	r3, #25
 8005f62:	2201      	movs	r2, #1
 8005f64:	4970      	ldr	r1, [pc, #448]	; (8006128 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fc92 	bl	8006890 <I2C_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
 8005f74:	e0d3      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_I2C_Master_Transmit+0x50>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0cc      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d007      	beq.n	8005faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	; 0x21
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	893a      	ldrh	r2, [r7, #8]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a50      	ldr	r2, [pc, #320]	; (800612c <HAL_I2C_Master_Transmit+0x1f8>)
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fec:	8979      	ldrh	r1, [r7, #10]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fafc 	bl	80065f0 <I2C_MasterRequestWrite>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e08d      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006018:	e066      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	6a39      	ldr	r1, [r7, #32]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fd0c 	bl	8006a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	2b04      	cmp	r3, #4
 8006030:	d107      	bne.n	8006042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e06b      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b04      	cmp	r3, #4
 8006082:	d11b      	bne.n	80060bc <HAL_I2C_Master_Transmit+0x188>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006088:	2b00      	cmp	r3, #0
 800608a:	d017      	beq.n	80060bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	6a39      	ldr	r1, [r7, #32]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fcfc 	bl	8006abe <I2C_WaitOnBTFFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d107      	bne.n	80060e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e01a      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d194      	bne.n	800601a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	00100002 	.word	0x00100002
 800612c:	ffff0000 	.word	0xffff0000

08006130 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	; 0x30
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	461a      	mov	r2, r3
 800613c:	460b      	mov	r3, r1
 800613e:	817b      	strh	r3, [r7, #10]
 8006140:	4613      	mov	r3, r2
 8006142:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006148:	f7fe febe 	bl	8004ec8 <HAL_GetTick>
 800614c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b20      	cmp	r3, #32
 8006158:	f040 823f 	bne.w	80065da <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	2319      	movs	r3, #25
 8006162:	2201      	movs	r2, #1
 8006164:	497f      	ldr	r1, [pc, #508]	; (8006364 <HAL_I2C_Master_Receive+0x234>)
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fb92 	bl	8006890 <I2C_WaitOnFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006172:	2302      	movs	r3, #2
 8006174:	e232      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_I2C_Master_Receive+0x54>
 8006180:	2302      	movs	r3, #2
 8006182:	e22b      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b01      	cmp	r3, #1
 8006198:	d007      	beq.n	80061aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2222      	movs	r2, #34	; 0x22
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2210      	movs	r2, #16
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	893a      	ldrh	r2, [r7, #8]
 80061da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a5f      	ldr	r2, [pc, #380]	; (8006368 <HAL_I2C_Master_Receive+0x238>)
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061ec:	8979      	ldrh	r1, [r7, #10]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fa7e 	bl	80066f4 <I2C_MasterRequestRead>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e1ec      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d113      	bne.n	8006232 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	e1c0      	b.n	80065b4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006236:	2b01      	cmp	r3, #1
 8006238:	d11e      	bne.n	8006278 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006248:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800624a:	b672      	cpsid	i
}
 800624c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006272:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006274:	b662      	cpsie	i
}
 8006276:	e035      	b.n	80062e4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	2b02      	cmp	r3, #2
 800627e:	d11e      	bne.n	80062be <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800628e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006290:	b672      	cpsid	i
}
 8006292:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80062ba:	b662      	cpsie	i
}
 80062bc:	e012      	b.n	80062e4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80062e4:	e166      	b.n	80065b4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	f200 811f 	bhi.w	800652e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d123      	bne.n	8006340 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fc1f 	bl	8006b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e167      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800633e:	e139      	b.n	80065b4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006344:	2b02      	cmp	r3, #2
 8006346:	d152      	bne.n	80063ee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2200      	movs	r2, #0
 8006350:	4906      	ldr	r1, [pc, #24]	; (800636c <HAL_I2C_Master_Receive+0x23c>)
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fa9c 	bl	8006890 <I2C_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e13c      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
 8006362:	bf00      	nop
 8006364:	00100002 	.word	0x00100002
 8006368:	ffff0000 	.word	0xffff0000
 800636c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006370:	b672      	cpsid	i
}
 8006372:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80063b6:	b662      	cpsie	i
}
 80063b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063ec:	e0e2      	b.n	80065b4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2200      	movs	r2, #0
 80063f6:	497b      	ldr	r1, [pc, #492]	; (80065e4 <HAL_I2C_Master_Receive+0x4b4>)
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fa49 	bl	8006890 <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0e9      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006416:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006418:	b672      	cpsid	i
}
 800641a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800644e:	4b66      	ldr	r3, [pc, #408]	; (80065e8 <HAL_I2C_Master_Receive+0x4b8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	4a65      	ldr	r2, [pc, #404]	; (80065ec <HAL_I2C_Master_Receive+0x4bc>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	0a1a      	lsrs	r2, r3, #8
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	00da      	lsls	r2, r3, #3
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	3b01      	subs	r3, #1
 800646c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d118      	bne.n	80064a6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f043 0220 	orr.w	r2, r3, #32
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006496:	b662      	cpsie	i
}
 8006498:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e09a      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d1d9      	bne.n	8006468 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80064f6:	b662      	cpsie	i
}
 80064f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800652c:	e042      	b.n	80065b4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fb04 	bl	8006b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e04c      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d118      	bne.n	80065b4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f47f ae94 	bne.w	80062e6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3728      	adds	r7, #40	; 0x28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	00010004 	.word	0x00010004
 80065e8:	20000038 	.word	0x20000038
 80065ec:	14f8b589 	.word	0x14f8b589

080065f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	460b      	mov	r3, r1
 80065fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d006      	beq.n	800661a <I2C_MasterRequestWrite+0x2a>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d003      	beq.n	800661a <I2C_MasterRequestWrite+0x2a>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006618:	d108      	bne.n	800662c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e00b      	b.n	8006644 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	2b12      	cmp	r3, #18
 8006632:	d107      	bne.n	8006644 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006642:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f91d 	bl	8006890 <I2C_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666a:	d103      	bne.n	8006674 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e035      	b.n	80066e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006680:	d108      	bne.n	8006694 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006682:	897b      	ldrh	r3, [r7, #10]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006690:	611a      	str	r2, [r3, #16]
 8006692:	e01b      	b.n	80066cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006694:	897b      	ldrh	r3, [r7, #10]
 8006696:	11db      	asrs	r3, r3, #7
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 0306 	and.w	r3, r3, #6
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f063 030f 	orn	r3, r3, #15
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	490e      	ldr	r1, [pc, #56]	; (80066ec <I2C_MasterRequestWrite+0xfc>)
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f943 	bl	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e010      	b.n	80066e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066c2:	897b      	ldrh	r3, [r7, #10]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4907      	ldr	r1, [pc, #28]	; (80066f0 <I2C_MasterRequestWrite+0x100>)
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f933 	bl	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	00010008 	.word	0x00010008
 80066f0:	00010002 	.word	0x00010002

080066f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	460b      	mov	r3, r1
 8006702:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006718:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d006      	beq.n	800672e <I2C_MasterRequestRead+0x3a>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d003      	beq.n	800672e <I2C_MasterRequestRead+0x3a>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800672c:	d108      	bne.n	8006740 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e00b      	b.n	8006758 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	2b11      	cmp	r3, #17
 8006746:	d107      	bne.n	8006758 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f893 	bl	8006890 <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800677e:	d103      	bne.n	8006788 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e079      	b.n	8006880 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006794:	d108      	bne.n	80067a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006796:	897b      	ldrh	r3, [r7, #10]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	611a      	str	r2, [r3, #16]
 80067a6:	e05f      	b.n	8006868 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067a8:	897b      	ldrh	r3, [r7, #10]
 80067aa:	11db      	asrs	r3, r3, #7
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f003 0306 	and.w	r3, r3, #6
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f063 030f 	orn	r3, r3, #15
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4930      	ldr	r1, [pc, #192]	; (8006888 <I2C_MasterRequestRead+0x194>)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f8b9 	bl	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e054      	b.n	8006880 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067d6:	897b      	ldrh	r3, [r7, #10]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4929      	ldr	r1, [pc, #164]	; (800688c <I2C_MasterRequestRead+0x198>)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8a9 	bl	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e044      	b.n	8006880 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800681a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 f831 	bl	8006890 <I2C_WaitOnFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006842:	d103      	bne.n	800684c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800684a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e017      	b.n	8006880 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006850:	897b      	ldrh	r3, [r7, #10]
 8006852:	11db      	asrs	r3, r3, #7
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 0306 	and.w	r3, r3, #6
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f063 030e 	orn	r3, r3, #14
 8006860:	b2da      	uxtb	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4907      	ldr	r1, [pc, #28]	; (800688c <I2C_MasterRequestRead+0x198>)
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 f865 	bl	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	00010008 	.word	0x00010008
 800688c:	00010002 	.word	0x00010002

08006890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068a0:	e025      	b.n	80068ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a8:	d021      	beq.n	80068ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068aa:	f7fe fb0d 	bl	8004ec8 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d116      	bne.n	80068ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f043 0220 	orr.w	r2, r3, #32
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e023      	b.n	8006936 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	0c1b      	lsrs	r3, r3, #16
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d10d      	bne.n	8006914 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	43da      	mvns	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4013      	ands	r3, r2
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf0c      	ite	eq
 800690a:	2301      	moveq	r3, #1
 800690c:	2300      	movne	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	e00c      	b.n	800692e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	43da      	mvns	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4013      	ands	r3, r2
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	bf0c      	ite	eq
 8006926:	2301      	moveq	r3, #1
 8006928:	2300      	movne	r3, #0
 800692a:	b2db      	uxtb	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	429a      	cmp	r2, r3
 8006932:	d0b6      	beq.n	80068a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800694c:	e051      	b.n	80069f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695c:	d123      	bne.n	80069a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800696c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006976:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f043 0204 	orr.w	r2, r3, #4
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e046      	b.n	8006a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ac:	d021      	beq.n	80069f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fe fa8b 	bl	8004ec8 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d116      	bne.n	80069f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f043 0220 	orr.w	r2, r3, #32
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e020      	b.n	8006a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d10c      	bne.n	8006a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	43da      	mvns	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4013      	ands	r3, r2
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bf14      	ite	ne
 8006a0e:	2301      	movne	r3, #1
 8006a10:	2300      	moveq	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	e00b      	b.n	8006a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	43da      	mvns	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	4013      	ands	r3, r2
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf14      	ite	ne
 8006a28:	2301      	movne	r3, #1
 8006a2a:	2300      	moveq	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d18d      	bne.n	800694e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a48:	e02d      	b.n	8006aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f8ce 	bl	8006bec <I2C_IsAcknowledgeFailed>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e02d      	b.n	8006ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a60:	d021      	beq.n	8006aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a62:	f7fe fa31 	bl	8004ec8 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d302      	bcc.n	8006a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d116      	bne.n	8006aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e007      	b.n	8006ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d1ca      	bne.n	8006a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aca:	e02d      	b.n	8006b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f88d 	bl	8006bec <I2C_IsAcknowledgeFailed>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e02d      	b.n	8006b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ae2:	d021      	beq.n	8006b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae4:	f7fe f9f0 	bl	8004ec8 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d302      	bcc.n	8006afa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d116      	bne.n	8006b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	f043 0220 	orr.w	r2, r3, #32
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e007      	b.n	8006b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d1ca      	bne.n	8006acc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b4c:	e042      	b.n	8006bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b10      	cmp	r3, #16
 8006b5a:	d119      	bne.n	8006b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0210 	mvn.w	r2, #16
 8006b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e029      	b.n	8006be4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b90:	f7fe f99a 	bl	8004ec8 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d116      	bne.n	8006bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	f043 0220 	orr.w	r2, r3, #32
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e007      	b.n	8006be4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d1b5      	bne.n	8006b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c02:	d11b      	bne.n	8006c3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	f043 0204 	orr.w	r2, r3, #4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e272      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 8087 	beq.w	8006d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c68:	4b92      	ldr	r3, [pc, #584]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 030c 	and.w	r3, r3, #12
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d00c      	beq.n	8006c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c74:	4b8f      	ldr	r3, [pc, #572]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f003 030c 	and.w	r3, r3, #12
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d112      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x5e>
 8006c80:	4b8c      	ldr	r3, [pc, #560]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8c:	d10b      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c8e:	4b89      	ldr	r3, [pc, #548]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d06c      	beq.n	8006d74 <HAL_RCC_OscConfig+0x12c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d168      	bne.n	8006d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e24c      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cae:	d106      	bne.n	8006cbe <HAL_RCC_OscConfig+0x76>
 8006cb0:	4b80      	ldr	r3, [pc, #512]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a7f      	ldr	r2, [pc, #508]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	e02e      	b.n	8006d1c <HAL_RCC_OscConfig+0xd4>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10c      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x98>
 8006cc6:	4b7b      	ldr	r3, [pc, #492]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a7a      	ldr	r2, [pc, #488]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4b78      	ldr	r3, [pc, #480]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a77      	ldr	r2, [pc, #476]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	e01d      	b.n	8006d1c <HAL_RCC_OscConfig+0xd4>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCC_OscConfig+0xbc>
 8006cea:	4b72      	ldr	r3, [pc, #456]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a71      	ldr	r2, [pc, #452]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	4b6f      	ldr	r3, [pc, #444]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a6e      	ldr	r2, [pc, #440]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	e00b      	b.n	8006d1c <HAL_RCC_OscConfig+0xd4>
 8006d04:	4b6b      	ldr	r3, [pc, #428]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a6a      	ldr	r2, [pc, #424]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	4b68      	ldr	r3, [pc, #416]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a67      	ldr	r2, [pc, #412]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d013      	beq.n	8006d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d24:	f7fe f8d0 	bl	8004ec8 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d2c:	f7fe f8cc 	bl	8004ec8 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b64      	cmp	r3, #100	; 0x64
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e200      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3e:	4b5d      	ldr	r3, [pc, #372]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0f0      	beq.n	8006d2c <HAL_RCC_OscConfig+0xe4>
 8006d4a:	e014      	b.n	8006d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4c:	f7fe f8bc 	bl	8004ec8 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d54:	f7fe f8b8 	bl	8004ec8 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b64      	cmp	r3, #100	; 0x64
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e1ec      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d66:	4b53      	ldr	r3, [pc, #332]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f0      	bne.n	8006d54 <HAL_RCC_OscConfig+0x10c>
 8006d72:	e000      	b.n	8006d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d063      	beq.n	8006e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d82:	4b4c      	ldr	r3, [pc, #304]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f003 030c 	and.w	r3, r3, #12
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d8e:	4b49      	ldr	r3, [pc, #292]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d11c      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x18c>
 8006d9a:	4b46      	ldr	r3, [pc, #280]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d116      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006da6:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <HAL_RCC_OscConfig+0x176>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d001      	beq.n	8006dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e1c0      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dbe:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	4939      	ldr	r1, [pc, #228]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd2:	e03a      	b.n	8006e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d020      	beq.n	8006e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ddc:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <HAL_RCC_OscConfig+0x270>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de2:	f7fe f871 	bl	8004ec8 <HAL_GetTick>
 8006de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dea:	f7fe f86d 	bl	8004ec8 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e1a1      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dfc:	4b2d      	ldr	r3, [pc, #180]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0f0      	beq.n	8006dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e08:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	4927      	ldr	r1, [pc, #156]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]
 8006e1c:	e015      	b.n	8006e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e1e:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <HAL_RCC_OscConfig+0x270>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e24:	f7fe f850 	bl	8004ec8 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e2c:	f7fe f84c 	bl	8004ec8 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e180      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d03a      	beq.n	8006ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d019      	beq.n	8006e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e64:	f7fe f830 	bl	8004ec8 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e6c:	f7fe f82c 	bl	8004ec8 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e160      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <HAL_RCC_OscConfig+0x26c>)
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	f000 fad8 	bl	8007440 <RCC_Delay>
 8006e90:	e01c      	b.n	8006ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e92:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <HAL_RCC_OscConfig+0x274>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e98:	f7fe f816 	bl	8004ec8 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e9e:	e00f      	b.n	8006ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7fe f812 	bl	8004ec8 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d908      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e146      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
 8006eb2:	bf00      	nop
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	42420000 	.word	0x42420000
 8006ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec0:	4b92      	ldr	r3, [pc, #584]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e9      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80a6 	beq.w	8007026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eda:	2300      	movs	r3, #0
 8006edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ede:	4b8b      	ldr	r3, [pc, #556]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10d      	bne.n	8006f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eea:	4b88      	ldr	r3, [pc, #544]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4a87      	ldr	r2, [pc, #540]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef4:	61d3      	str	r3, [r2, #28]
 8006ef6:	4b85      	ldr	r3, [pc, #532]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efe:	60bb      	str	r3, [r7, #8]
 8006f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f06:	4b82      	ldr	r3, [pc, #520]	; (8007110 <HAL_RCC_OscConfig+0x4c8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d118      	bne.n	8006f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f12:	4b7f      	ldr	r3, [pc, #508]	; (8007110 <HAL_RCC_OscConfig+0x4c8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a7e      	ldr	r2, [pc, #504]	; (8007110 <HAL_RCC_OscConfig+0x4c8>)
 8006f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f1e:	f7fd ffd3 	bl	8004ec8 <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f26:	f7fd ffcf 	bl	8004ec8 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b64      	cmp	r3, #100	; 0x64
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e103      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f38:	4b75      	ldr	r3, [pc, #468]	; (8007110 <HAL_RCC_OscConfig+0x4c8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0f0      	beq.n	8006f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d106      	bne.n	8006f5a <HAL_RCC_OscConfig+0x312>
 8006f4c:	4b6f      	ldr	r3, [pc, #444]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	4a6e      	ldr	r2, [pc, #440]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	6213      	str	r3, [r2, #32]
 8006f58:	e02d      	b.n	8006fb6 <HAL_RCC_OscConfig+0x36e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCC_OscConfig+0x334>
 8006f62:	4b6a      	ldr	r3, [pc, #424]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	4a69      	ldr	r2, [pc, #420]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	6213      	str	r3, [r2, #32]
 8006f6e:	4b67      	ldr	r3, [pc, #412]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	4a66      	ldr	r2, [pc, #408]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f74:	f023 0304 	bic.w	r3, r3, #4
 8006f78:	6213      	str	r3, [r2, #32]
 8006f7a:	e01c      	b.n	8006fb6 <HAL_RCC_OscConfig+0x36e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	d10c      	bne.n	8006f9e <HAL_RCC_OscConfig+0x356>
 8006f84:	4b61      	ldr	r3, [pc, #388]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	4a60      	ldr	r2, [pc, #384]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f8a:	f043 0304 	orr.w	r3, r3, #4
 8006f8e:	6213      	str	r3, [r2, #32]
 8006f90:	4b5e      	ldr	r3, [pc, #376]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	4a5d      	ldr	r2, [pc, #372]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	6213      	str	r3, [r2, #32]
 8006f9c:	e00b      	b.n	8006fb6 <HAL_RCC_OscConfig+0x36e>
 8006f9e:	4b5b      	ldr	r3, [pc, #364]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	4a5a      	ldr	r2, [pc, #360]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	6213      	str	r3, [r2, #32]
 8006faa:	4b58      	ldr	r3, [pc, #352]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	4a57      	ldr	r2, [pc, #348]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006fb0:	f023 0304 	bic.w	r3, r3, #4
 8006fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d015      	beq.n	8006fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fbe:	f7fd ff83 	bl	8004ec8 <HAL_GetTick>
 8006fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc4:	e00a      	b.n	8006fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc6:	f7fd ff7f 	bl	8004ec8 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e0b1      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fdc:	4b4b      	ldr	r3, [pc, #300]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0ee      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x37e>
 8006fe8:	e014      	b.n	8007014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fea:	f7fd ff6d 	bl	8004ec8 <HAL_GetTick>
 8006fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff0:	e00a      	b.n	8007008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff2:	f7fd ff69 	bl	8004ec8 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007000:	4293      	cmp	r3, r2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e09b      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007008:	4b40      	ldr	r3, [pc, #256]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1ee      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d105      	bne.n	8007026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701a:	4b3c      	ldr	r3, [pc, #240]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	4a3b      	ldr	r2, [pc, #236]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8007020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8087 	beq.w	800713e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007030:	4b36      	ldr	r3, [pc, #216]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 030c 	and.w	r3, r3, #12
 8007038:	2b08      	cmp	r3, #8
 800703a:	d061      	beq.n	8007100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d146      	bne.n	80070d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007044:	4b33      	ldr	r3, [pc, #204]	; (8007114 <HAL_RCC_OscConfig+0x4cc>)
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704a:	f7fd ff3d 	bl	8004ec8 <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007052:	f7fd ff39 	bl	8004ec8 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e06d      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007064:	4b29      	ldr	r3, [pc, #164]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f0      	bne.n	8007052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d108      	bne.n	800708c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	4921      	ldr	r1, [pc, #132]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 8007088:	4313      	orrs	r3, r2
 800708a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800708c:	4b1f      	ldr	r3, [pc, #124]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a19      	ldr	r1, [r3, #32]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	430b      	orrs	r3, r1
 800709e:	491b      	ldr	r1, [pc, #108]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070a4:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <HAL_RCC_OscConfig+0x4cc>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070aa:	f7fd ff0d 	bl	8004ec8 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b2:	f7fd ff09 	bl	8004ec8 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e03d      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070c4:	4b11      	ldr	r3, [pc, #68]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCC_OscConfig+0x46a>
 80070d0:	e035      	b.n	800713e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <HAL_RCC_OscConfig+0x4cc>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d8:	f7fd fef6 	bl	8004ec8 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e0:	f7fd fef2 	bl	8004ec8 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e026      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070f2:	4b06      	ldr	r3, [pc, #24]	; (800710c <HAL_RCC_OscConfig+0x4c4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x498>
 80070fe:	e01e      	b.n	800713e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d107      	bne.n	8007118 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e019      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
 800710c:	40021000 	.word	0x40021000
 8007110:	40007000 	.word	0x40007000
 8007114:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_OscConfig+0x500>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	429a      	cmp	r2, r3
 800712a:	d106      	bne.n	800713a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007136:	429a      	cmp	r2, r3
 8007138:	d001      	beq.n	800713e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40021000 	.word	0x40021000

0800714c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e0d0      	b.n	8007302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007160:	4b6a      	ldr	r3, [pc, #424]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d910      	bls.n	8007190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b67      	ldr	r3, [pc, #412]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 0207 	bic.w	r2, r3, #7
 8007176:	4965      	ldr	r1, [pc, #404]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b63      	ldr	r3, [pc, #396]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e0b8      	b.n	8007302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d020      	beq.n	80071de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071a8:	4b59      	ldr	r3, [pc, #356]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4a58      	ldr	r2, [pc, #352]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80071ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c0:	4b53      	ldr	r3, [pc, #332]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4a52      	ldr	r2, [pc, #328]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80071c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80071ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071cc:	4b50      	ldr	r3, [pc, #320]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	494d      	ldr	r1, [pc, #308]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d040      	beq.n	800726c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d107      	bne.n	8007202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	4b47      	ldr	r3, [pc, #284]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d115      	bne.n	800722a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e07f      	b.n	8007302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d107      	bne.n	800721a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800720a:	4b41      	ldr	r3, [pc, #260]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e073      	b.n	8007302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721a:	4b3d      	ldr	r3, [pc, #244]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e06b      	b.n	8007302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800722a:	4b39      	ldr	r3, [pc, #228]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f023 0203 	bic.w	r2, r3, #3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4936      	ldr	r1, [pc, #216]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 8007238:	4313      	orrs	r3, r2
 800723a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800723c:	f7fd fe44 	bl	8004ec8 <HAL_GetTick>
 8007240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007242:	e00a      	b.n	800725a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007244:	f7fd fe40 	bl	8004ec8 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007252:	4293      	cmp	r3, r2
 8007254:	d901      	bls.n	800725a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e053      	b.n	8007302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800725a:	4b2d      	ldr	r3, [pc, #180]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f003 020c 	and.w	r2, r3, #12
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	429a      	cmp	r2, r3
 800726a:	d1eb      	bne.n	8007244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800726c:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d210      	bcs.n	800729c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727a:	4b24      	ldr	r3, [pc, #144]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 0207 	bic.w	r2, r3, #7
 8007282:	4922      	ldr	r1, [pc, #136]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b20      	ldr	r3, [pc, #128]	; (800730c <HAL_RCC_ClockConfig+0x1c0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e032      	b.n	8007302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072a8:	4b19      	ldr	r3, [pc, #100]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4916      	ldr	r1, [pc, #88]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	490e      	ldr	r1, [pc, #56]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072da:	f000 f821 	bl	8007320 <HAL_RCC_GetSysClockFreq>
 80072de:	4602      	mov	r2, r0
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_ClockConfig+0x1c4>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	091b      	lsrs	r3, r3, #4
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	490a      	ldr	r1, [pc, #40]	; (8007314 <HAL_RCC_ClockConfig+0x1c8>)
 80072ec:	5ccb      	ldrb	r3, [r1, r3]
 80072ee:	fa22 f303 	lsr.w	r3, r2, r3
 80072f2:	4a09      	ldr	r2, [pc, #36]	; (8007318 <HAL_RCC_ClockConfig+0x1cc>)
 80072f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072f6:	4b09      	ldr	r3, [pc, #36]	; (800731c <HAL_RCC_ClockConfig+0x1d0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd fda2 	bl	8004e44 <HAL_InitTick>

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40022000 	.word	0x40022000
 8007310:	40021000 	.word	0x40021000
 8007314:	0800caa0 	.word	0x0800caa0
 8007318:	20000038 	.word	0x20000038
 800731c:	200000b0 	.word	0x200000b0

08007320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007320:	b490      	push	{r4, r7}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007326:	4b29      	ldr	r3, [pc, #164]	; (80073cc <HAL_RCC_GetSysClockFreq+0xac>)
 8007328:	1d3c      	adds	r4, r7, #4
 800732a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800732c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007330:	f240 2301 	movw	r3, #513	; 0x201
 8007334:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	2300      	movs	r3, #0
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	2300      	movs	r3, #0
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800734a:	4b21      	ldr	r3, [pc, #132]	; (80073d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b04      	cmp	r3, #4
 8007358:	d002      	beq.n	8007360 <HAL_RCC_GetSysClockFreq+0x40>
 800735a:	2b08      	cmp	r3, #8
 800735c:	d003      	beq.n	8007366 <HAL_RCC_GetSysClockFreq+0x46>
 800735e:	e02b      	b.n	80073b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007360:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007362:	623b      	str	r3, [r7, #32]
      break;
 8007364:	e02b      	b.n	80073be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	0c9b      	lsrs	r3, r3, #18
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	3328      	adds	r3, #40	; 0x28
 8007370:	443b      	add	r3, r7
 8007372:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007376:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007382:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	0c5b      	lsrs	r3, r3, #17
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	3328      	adds	r3, #40	; 0x28
 800738e:	443b      	add	r3, r7
 8007390:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007394:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800739a:	fb03 f202 	mul.w	r2, r3, r2
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
 80073a6:	e004      	b.n	80073b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4a0b      	ldr	r2, [pc, #44]	; (80073d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	623b      	str	r3, [r7, #32]
      break;
 80073b6:	e002      	b.n	80073be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80073ba:	623b      	str	r3, [r7, #32]
      break;
 80073bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073be:	6a3b      	ldr	r3, [r7, #32]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3728      	adds	r7, #40	; 0x28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc90      	pop	{r4, r7}
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	0800ca90 	.word	0x0800ca90
 80073d0:	40021000 	.word	0x40021000
 80073d4:	007a1200 	.word	0x007a1200
 80073d8:	003d0900 	.word	0x003d0900

080073dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <HAL_RCC_GetHCLKFreq+0x10>)
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	20000038 	.word	0x20000038

080073f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073f4:	f7ff fff2 	bl	80073dc <HAL_RCC_GetHCLKFreq>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	4903      	ldr	r1, [pc, #12]	; (8007414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007406:	5ccb      	ldrb	r3, [r1, r3]
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40021000 	.word	0x40021000
 8007414:	0800cab0 	.word	0x0800cab0

08007418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800741c:	f7ff ffde 	bl	80073dc <HAL_RCC_GetHCLKFreq>
 8007420:	4602      	mov	r2, r0
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	0adb      	lsrs	r3, r3, #11
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	4903      	ldr	r1, [pc, #12]	; (800743c <HAL_RCC_GetPCLK2Freq+0x24>)
 800742e:	5ccb      	ldrb	r3, [r1, r3]
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40021000 	.word	0x40021000
 800743c:	0800cab0 	.word	0x0800cab0

08007440 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <RCC_Delay+0x34>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <RCC_Delay+0x38>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	0a5b      	lsrs	r3, r3, #9
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	fb02 f303 	mul.w	r3, r2, r3
 800745a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800745c:	bf00      	nop
  }
  while (Delay --);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1e5a      	subs	r2, r3, #1
 8007462:	60fa      	str	r2, [r7, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f9      	bne.n	800745c <RCC_Delay+0x1c>
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr
 8007474:	20000038 	.word	0x20000038
 8007478:	10624dd3 	.word	0x10624dd3

0800747c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d07d      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007498:	2300      	movs	r3, #0
 800749a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800749c:	4b4f      	ldr	r3, [pc, #316]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10d      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074a8:	4b4c      	ldr	r3, [pc, #304]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	4a4b      	ldr	r2, [pc, #300]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b2:	61d3      	str	r3, [r2, #28]
 80074b4:	4b49      	ldr	r3, [pc, #292]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c0:	2301      	movs	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c4:	4b46      	ldr	r3, [pc, #280]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d118      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d0:	4b43      	ldr	r3, [pc, #268]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a42      	ldr	r2, [pc, #264]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074dc:	f7fd fcf4 	bl	8004ec8 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e2:	e008      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e4:	f7fd fcf0 	bl	8004ec8 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b64      	cmp	r3, #100	; 0x64
 80074f0:	d901      	bls.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e06d      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f6:	4b3a      	ldr	r3, [pc, #232]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007502:	4b36      	ldr	r3, [pc, #216]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d02e      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	429a      	cmp	r2, r3
 800751e:	d027      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007520:	4b2e      	ldr	r3, [pc, #184]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007528:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800752a:	4b2e      	ldr	r3, [pc, #184]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800752c:	2201      	movs	r2, #1
 800752e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007530:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007536:	4a29      	ldr	r2, [pc, #164]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d014      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007546:	f7fd fcbf 	bl	8004ec8 <HAL_GetTick>
 800754a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800754c:	e00a      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800754e:	f7fd fcbb 	bl	8004ec8 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	f241 3288 	movw	r2, #5000	; 0x1388
 800755c:	4293      	cmp	r3, r2
 800755e:	d901      	bls.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e036      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007564:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0ee      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4917      	ldr	r1, [pc, #92]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800757e:	4313      	orrs	r3, r2
 8007580:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d105      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007588:	4b14      	ldr	r3, [pc, #80]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	4a13      	ldr	r2, [pc, #76]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800758e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007592:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075a0:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	490b      	ldr	r1, [pc, #44]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d008      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	4904      	ldr	r1, [pc, #16]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40021000 	.word	0x40021000
 80075e0:	40007000 	.word	0x40007000
 80075e4:	42420440 	.word	0x42420440

080075e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e076      	b.n	80076e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d108      	bne.n	8007614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800760a:	d009      	beq.n	8007620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	61da      	str	r2, [r3, #28]
 8007612:	e005      	b.n	8007620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fc fe44 	bl	80042c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007656:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a4:	ea42 0103 	orr.w	r1, r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	0c1a      	lsrs	r2, r3, #16
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f002 0204 	and.w	r2, r2, #4
 80076c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69da      	ldr	r2, [r3, #28]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e041      	b.n	8007786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fc fe82 	bl	8004420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3304      	adds	r3, #4
 800772c:	4619      	mov	r1, r3
 800772e:	4610      	mov	r0, r2
 8007730:	f000 ffa6 	bl	8008680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d001      	beq.n	80077a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e032      	b.n	800780e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a18      	ldr	r2, [pc, #96]	; (8007818 <HAL_TIM_Base_Start+0x88>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00e      	beq.n	80077d8 <HAL_TIM_Base_Start+0x48>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d009      	beq.n	80077d8 <HAL_TIM_Base_Start+0x48>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a14      	ldr	r2, [pc, #80]	; (800781c <HAL_TIM_Base_Start+0x8c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <HAL_TIM_Base_Start+0x48>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a13      	ldr	r2, [pc, #76]	; (8007820 <HAL_TIM_Base_Start+0x90>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d111      	bne.n	80077fc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b06      	cmp	r3, #6
 80077e8:	d010      	beq.n	800780c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0201 	orr.w	r2, r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fa:	e007      	b.n	800780c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr
 8007818:	40012c00 	.word	0x40012c00
 800781c:	40000400 	.word	0x40000400
 8007820:	40000800 	.word	0x40000800

08007824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e041      	b.n	80078ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f839 	bl	80078c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3304      	adds	r3, #4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f000 ff0c 	bl	8008680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <HAL_TIM_PWM_Start+0x24>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	e022      	b.n	800793e <HAL_TIM_PWM_Start+0x6a>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d109      	bne.n	8007912 <HAL_TIM_PWM_Start+0x3e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b01      	cmp	r3, #1
 8007908:	bf14      	ite	ne
 800790a:	2301      	movne	r3, #1
 800790c:	2300      	moveq	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	e015      	b.n	800793e <HAL_TIM_PWM_Start+0x6a>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d109      	bne.n	800792c <HAL_TIM_PWM_Start+0x58>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	bf14      	ite	ne
 8007924:	2301      	movne	r3, #1
 8007926:	2300      	moveq	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	e008      	b.n	800793e <HAL_TIM_PWM_Start+0x6a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	bf14      	ite	ne
 8007938:	2301      	movne	r3, #1
 800793a:	2300      	moveq	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e05e      	b.n	8007a04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <HAL_TIM_PWM_Start+0x82>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007954:	e013      	b.n	800797e <HAL_TIM_PWM_Start+0xaa>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b04      	cmp	r3, #4
 800795a:	d104      	bne.n	8007966 <HAL_TIM_PWM_Start+0x92>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007964:	e00b      	b.n	800797e <HAL_TIM_PWM_Start+0xaa>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d104      	bne.n	8007976 <HAL_TIM_PWM_Start+0xa2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007974:	e003      	b.n	800797e <HAL_TIM_PWM_Start+0xaa>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2202      	movs	r2, #2
 800797a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2201      	movs	r2, #1
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f001 fa07 	bl	8008d9a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1e      	ldr	r2, [pc, #120]	; (8007a0c <HAL_TIM_PWM_Start+0x138>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d107      	bne.n	80079a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a18      	ldr	r2, [pc, #96]	; (8007a0c <HAL_TIM_PWM_Start+0x138>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00e      	beq.n	80079ce <HAL_TIM_PWM_Start+0xfa>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b8:	d009      	beq.n	80079ce <HAL_TIM_PWM_Start+0xfa>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a14      	ldr	r2, [pc, #80]	; (8007a10 <HAL_TIM_PWM_Start+0x13c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <HAL_TIM_PWM_Start+0xfa>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a12      	ldr	r2, [pc, #72]	; (8007a14 <HAL_TIM_PWM_Start+0x140>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d111      	bne.n	80079f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b06      	cmp	r3, #6
 80079de:	d010      	beq.n	8007a02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f0:	e007      	b.n	8007a02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0201 	orr.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40012c00 	.word	0x40012c00
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800

08007a18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e041      	b.n	8007aae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f839 	bl	8007ab6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f000 fe12 	bl	8008680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <HAL_TIM_IC_Start_IT+0x1a>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	e013      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x42>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIM_IC_Start_IT+0x2a>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	e00b      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x42>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	d104      	bne.n	8007b02 <HAL_TIM_IC_Start_IT+0x3a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e003      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x42>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d104      	bne.n	8007b1c <HAL_TIM_IC_Start_IT+0x54>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	e013      	b.n	8007b44 <HAL_TIM_IC_Start_IT+0x7c>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d104      	bne.n	8007b2c <HAL_TIM_IC_Start_IT+0x64>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	e00b      	b.n	8007b44 <HAL_TIM_IC_Start_IT+0x7c>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d104      	bne.n	8007b3c <HAL_TIM_IC_Start_IT+0x74>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e003      	b.n	8007b44 <HAL_TIM_IC_Start_IT+0x7c>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d102      	bne.n	8007b52 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d001      	beq.n	8007b56 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0b3      	b.n	8007cbe <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_IC_Start_IT+0x9e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b64:	e013      	b.n	8007b8e <HAL_TIM_IC_Start_IT+0xc6>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_IC_Start_IT+0xae>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b74:	e00b      	b.n	8007b8e <HAL_TIM_IC_Start_IT+0xc6>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_IC_Start_IT+0xbe>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b84:	e003      	b.n	8007b8e <HAL_TIM_IC_Start_IT+0xc6>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_IC_Start_IT+0xd6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b9c:	e013      	b.n	8007bc6 <HAL_TIM_IC_Start_IT+0xfe>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d104      	bne.n	8007bae <HAL_TIM_IC_Start_IT+0xe6>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bac:	e00b      	b.n	8007bc6 <HAL_TIM_IC_Start_IT+0xfe>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_IC_Start_IT+0xf6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bbc:	e003      	b.n	8007bc6 <HAL_TIM_IC_Start_IT+0xfe>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b0c      	cmp	r3, #12
 8007bca:	d841      	bhi.n	8007c50 <HAL_TIM_IC_Start_IT+0x188>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <HAL_TIM_IC_Start_IT+0x10c>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007c09 	.word	0x08007c09
 8007bd8:	08007c51 	.word	0x08007c51
 8007bdc:	08007c51 	.word	0x08007c51
 8007be0:	08007c51 	.word	0x08007c51
 8007be4:	08007c1b 	.word	0x08007c1b
 8007be8:	08007c51 	.word	0x08007c51
 8007bec:	08007c51 	.word	0x08007c51
 8007bf0:	08007c51 	.word	0x08007c51
 8007bf4:	08007c2d 	.word	0x08007c2d
 8007bf8:	08007c51 	.word	0x08007c51
 8007bfc:	08007c51 	.word	0x08007c51
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	08007c3f 	.word	0x08007c3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0202 	orr.w	r2, r2, #2
 8007c16:	60da      	str	r2, [r3, #12]
      break;
 8007c18:	e01b      	b.n	8007c52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0204 	orr.w	r2, r2, #4
 8007c28:	60da      	str	r2, [r3, #12]
      break;
 8007c2a:	e012      	b.n	8007c52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	60da      	str	r2, [r3, #12]
      break;
 8007c3c:	e009      	b.n	8007c52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0210 	orr.w	r2, r2, #16
 8007c4c:	60da      	str	r2, [r3, #12]
      break;
 8007c4e:	e000      	b.n	8007c52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007c50:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2201      	movs	r2, #1
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 f89d 	bl	8008d9a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <HAL_TIM_IC_Start_IT+0x200>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00e      	beq.n	8007c88 <HAL_TIM_IC_Start_IT+0x1c0>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c72:	d009      	beq.n	8007c88 <HAL_TIM_IC_Start_IT+0x1c0>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a14      	ldr	r2, [pc, #80]	; (8007ccc <HAL_TIM_IC_Start_IT+0x204>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_TIM_IC_Start_IT+0x1c0>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <HAL_TIM_IC_Start_IT+0x208>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d111      	bne.n	8007cac <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b06      	cmp	r3, #6
 8007c98:	d010      	beq.n	8007cbc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f042 0201 	orr.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007caa:	e007      	b.n	8007cbc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0201 	orr.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40012c00 	.word	0x40012c00
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800

08007cd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e093      	b.n	8007e10 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fc fb2f 	bl	8004360 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d18:	f023 0307 	bic.w	r3, r3, #7
 8007d1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f000 fca9 	bl	8008680 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	4313      	orrs	r3, r2
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d74:	f023 030c 	bic.w	r3, r3, #12
 8007d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	4313      	orrs	r3, r2
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	011a      	lsls	r2, r3, #4
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	031b      	lsls	r3, r3, #12
 8007da4:	4313      	orrs	r3, r2
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007db2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d110      	bne.n	8007e6a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d102      	bne.n	8007e54 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e4e:	7b7b      	ldrb	r3, [r7, #13]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d001      	beq.n	8007e58 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e089      	b.n	8007f6c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e68:	e031      	b.n	8007ece <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d110      	bne.n	8007e92 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d102      	bne.n	8007e7c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e76:	7b3b      	ldrb	r3, [r7, #12]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d001      	beq.n	8007e80 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e075      	b.n	8007f6c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e90:	e01d      	b.n	8007ece <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d108      	bne.n	8007eaa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d105      	bne.n	8007eaa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d102      	bne.n	8007eaa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ea4:	7b3b      	ldrb	r3, [r7, #12]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d001      	beq.n	8007eae <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e05e      	b.n	8007f6c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_TIM_Encoder_Start_IT+0xc4>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d010      	beq.n	8007efc <HAL_TIM_Encoder_Start_IT+0xe4>
 8007eda:	e01f      	b.n	8007f1c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 ff58 	bl	8008d9a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0202 	orr.w	r2, r2, #2
 8007ef8:	60da      	str	r2, [r3, #12]
      break;
 8007efa:	e02e      	b.n	8007f5a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2201      	movs	r2, #1
 8007f02:	2104      	movs	r1, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 ff48 	bl	8008d9a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0204 	orr.w	r2, r2, #4
 8007f18:	60da      	str	r2, [r3, #12]
      break;
 8007f1a:	e01e      	b.n	8007f5a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2201      	movs	r2, #1
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 ff38 	bl	8008d9a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	2104      	movs	r1, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 ff31 	bl	8008d9a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0202 	orr.w	r2, r2, #2
 8007f46:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0204 	orr.w	r2, r2, #4
 8007f56:	60da      	str	r2, [r3, #12]
      break;
 8007f58:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0201 	orr.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d122      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d11b      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0202 	mvn.w	r2, #2
 8007fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fc fcd2 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fb43 	bl	800864a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fb49 	bl	800865c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0204 	mvn.w	r2, #4
 8007ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fc fca8 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fb19 	bl	800864a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fb1f 	bl	800865c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b08      	cmp	r3, #8
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b08      	cmp	r3, #8
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0208 	mvn.w	r2, #8
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7fc fc7e 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 faef 	bl	800864a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 faf5 	bl	800865c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b10      	cmp	r3, #16
 8008084:	d122      	bne.n	80080cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b10      	cmp	r3, #16
 8008092:	d11b      	bne.n	80080cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0210 	mvn.w	r2, #16
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2208      	movs	r2, #8
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fc fc54 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fac5 	bl	800864a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 facb 	bl	800865c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0201 	mvn.w	r2, #1
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 faa0 	bl	8008638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d10e      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008110:	2b80      	cmp	r3, #128	; 0x80
 8008112:	d107      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fec7 	bl	8008eb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d10e      	bne.n	8008150 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	d107      	bne.n	8008150 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa8f 	bl	800866e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b20      	cmp	r3, #32
 800815c:	d10e      	bne.n	800817c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b20      	cmp	r3, #32
 800816a:	d107      	bne.n	800817c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0220 	mvn.w	r2, #32
 8008174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fe92 	bl	8008ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_TIM_IC_ConfigChannel+0x1a>
 800819a:	2302      	movs	r3, #2
 800819c:	e082      	b.n	80082a4 <HAL_TIM_IC_ConfigChannel+0x120>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d11b      	bne.n	80081e4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f000 fc4a 	bl	8008a54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 020c 	bic.w	r2, r2, #12
 80081ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6999      	ldr	r1, [r3, #24]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	619a      	str	r2, [r3, #24]
 80081e2:	e05a      	b.n	800829a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d11c      	bne.n	8008224 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6819      	ldr	r1, [r3, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f000 fcb3 	bl	8008b64 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800820c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6999      	ldr	r1, [r3, #24]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	021a      	lsls	r2, r3, #8
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	619a      	str	r2, [r3, #24]
 8008222:	e03a      	b.n	800829a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b08      	cmp	r3, #8
 8008228:	d11b      	bne.n	8008262 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6819      	ldr	r1, [r3, #0]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f000 fcfe 	bl	8008c3a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 020c 	bic.w	r2, r2, #12
 800824c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69d9      	ldr	r1, [r3, #28]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	61da      	str	r2, [r3, #28]
 8008260:	e01b      	b.n	800829a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	6819      	ldr	r1, [r3, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f000 fd1d 	bl	8008cb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69da      	ldr	r2, [r3, #28]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008284:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69d9      	ldr	r1, [r3, #28]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	021a      	lsls	r2, r3, #8
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80082c2:	2302      	movs	r3, #2
 80082c4:	e0ac      	b.n	8008420 <HAL_TIM_PWM_ConfigChannel+0x174>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b0c      	cmp	r3, #12
 80082d2:	f200 809f 	bhi.w	8008414 <HAL_TIM_PWM_ConfigChannel+0x168>
 80082d6:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	08008311 	.word	0x08008311
 80082e0:	08008415 	.word	0x08008415
 80082e4:	08008415 	.word	0x08008415
 80082e8:	08008415 	.word	0x08008415
 80082ec:	08008351 	.word	0x08008351
 80082f0:	08008415 	.word	0x08008415
 80082f4:	08008415 	.word	0x08008415
 80082f8:	08008415 	.word	0x08008415
 80082fc:	08008393 	.word	0x08008393
 8008300:	08008415 	.word	0x08008415
 8008304:	08008415 	.word	0x08008415
 8008308:	08008415 	.word	0x08008415
 800830c:	080083d3 	.word	0x080083d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fa14 	bl	8008744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0208 	orr.w	r2, r2, #8
 800832a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0204 	bic.w	r2, r2, #4
 800833a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6999      	ldr	r1, [r3, #24]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	619a      	str	r2, [r3, #24]
      break;
 800834e:	e062      	b.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fa5a 	bl	8008810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800836a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800837a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6999      	ldr	r1, [r3, #24]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	021a      	lsls	r2, r3, #8
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	619a      	str	r2, [r3, #24]
      break;
 8008390:	e041      	b.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68b9      	ldr	r1, [r7, #8]
 8008398:	4618      	mov	r0, r3
 800839a:	f000 faa3 	bl	80088e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69da      	ldr	r2, [r3, #28]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f042 0208 	orr.w	r2, r2, #8
 80083ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69da      	ldr	r2, [r3, #28]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 0204 	bic.w	r2, r2, #4
 80083bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69d9      	ldr	r1, [r3, #28]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	61da      	str	r2, [r3, #28]
      break;
 80083d0:	e021      	b.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 faed 	bl	80089b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69da      	ldr	r2, [r3, #28]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69d9      	ldr	r1, [r3, #28]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	021a      	lsls	r2, r3, #8
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	61da      	str	r2, [r3, #28]
      break;
 8008412:	e000      	b.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_TIM_ConfigClockSource+0x18>
 800843c:	2302      	movs	r3, #2
 800843e:	e0b3      	b.n	80085a8 <HAL_TIM_ConfigClockSource+0x180>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800845e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008466:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008478:	d03e      	beq.n	80084f8 <HAL_TIM_ConfigClockSource+0xd0>
 800847a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847e:	f200 8087 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x168>
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008486:	f000 8085 	beq.w	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 800848a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848e:	d87f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 8008490:	2b70      	cmp	r3, #112	; 0x70
 8008492:	d01a      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0xa2>
 8008494:	2b70      	cmp	r3, #112	; 0x70
 8008496:	d87b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 8008498:	2b60      	cmp	r3, #96	; 0x60
 800849a:	d050      	beq.n	800853e <HAL_TIM_ConfigClockSource+0x116>
 800849c:	2b60      	cmp	r3, #96	; 0x60
 800849e:	d877      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084a0:	2b50      	cmp	r3, #80	; 0x50
 80084a2:	d03c      	beq.n	800851e <HAL_TIM_ConfigClockSource+0xf6>
 80084a4:	2b50      	cmp	r3, #80	; 0x50
 80084a6:	d873      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084a8:	2b40      	cmp	r3, #64	; 0x40
 80084aa:	d058      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x136>
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d86f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084b0:	2b30      	cmp	r3, #48	; 0x30
 80084b2:	d064      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
 80084b4:	2b30      	cmp	r3, #48	; 0x30
 80084b6:	d86b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d060      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d867      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05c      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d05a      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084c8:	e062      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6899      	ldr	r1, [r3, #8]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f000 fc3f 	bl	8008d5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	609a      	str	r2, [r3, #8]
      break;
 80084f6:	e04e      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6899      	ldr	r1, [r3, #8]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f000 fc28 	bl	8008d5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800851a:	609a      	str	r2, [r3, #8]
      break;
 800851c:	e03b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6859      	ldr	r1, [r3, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	461a      	mov	r2, r3
 800852c:	f000 faec 	bl	8008b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2150      	movs	r1, #80	; 0x50
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fbf6 	bl	8008d28 <TIM_ITRx_SetConfig>
      break;
 800853c:	e02b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	461a      	mov	r2, r3
 800854c:	f000 fb46 	bl	8008bdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2160      	movs	r1, #96	; 0x60
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fbe6 	bl	8008d28 <TIM_ITRx_SetConfig>
      break;
 800855c:	e01b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6859      	ldr	r1, [r3, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	461a      	mov	r2, r3
 800856c:	f000 facc 	bl	8008b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2140      	movs	r1, #64	; 0x40
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fbd6 	bl	8008d28 <TIM_ITRx_SetConfig>
      break;
 800857c:	e00b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f000 fbcd 	bl	8008d28 <TIM_ITRx_SetConfig>
        break;
 800858e:	e002      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008590:	bf00      	nop
 8008592:	e000      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b0c      	cmp	r3, #12
 80085c2:	d831      	bhi.n	8008628 <HAL_TIM_ReadCapturedValue+0x78>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	08008601 	.word	0x08008601
 80085d0:	08008629 	.word	0x08008629
 80085d4:	08008629 	.word	0x08008629
 80085d8:	08008629 	.word	0x08008629
 80085dc:	0800860b 	.word	0x0800860b
 80085e0:	08008629 	.word	0x08008629
 80085e4:	08008629 	.word	0x08008629
 80085e8:	08008629 	.word	0x08008629
 80085ec:	08008615 	.word	0x08008615
 80085f0:	08008629 	.word	0x08008629
 80085f4:	08008629 	.word	0x08008629
 80085f8:	08008629 	.word	0x08008629
 80085fc:	0800861f 	.word	0x0800861f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008606:	60fb      	str	r3, [r7, #12]

      break;
 8008608:	e00f      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	60fb      	str	r3, [r7, #12]

      break;
 8008612:	e00a      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	60fb      	str	r3, [r7, #12]

      break;
 800861c:	e005      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008624:	60fb      	str	r3, [r7, #12]

      break;
 8008626:	e000      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008628:	bf00      	nop
  }

  return tmpreg;
 800862a:	68fb      	ldr	r3, [r7, #12]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop

08008638 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	bc80      	pop	{r7}
 8008648:	4770      	bx	lr

0800864a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a29      	ldr	r2, [pc, #164]	; (8008738 <TIM_Base_SetConfig+0xb8>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_Base_SetConfig+0x30>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869e:	d007      	beq.n	80086b0 <TIM_Base_SetConfig+0x30>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a26      	ldr	r2, [pc, #152]	; (800873c <TIM_Base_SetConfig+0xbc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_Base_SetConfig+0x30>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a25      	ldr	r2, [pc, #148]	; (8008740 <TIM_Base_SetConfig+0xc0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d108      	bne.n	80086c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a1c      	ldr	r2, [pc, #112]	; (8008738 <TIM_Base_SetConfig+0xb8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00b      	beq.n	80086e2 <TIM_Base_SetConfig+0x62>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d0:	d007      	beq.n	80086e2 <TIM_Base_SetConfig+0x62>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a19      	ldr	r2, [pc, #100]	; (800873c <TIM_Base_SetConfig+0xbc>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d003      	beq.n	80086e2 <TIM_Base_SetConfig+0x62>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a18      	ldr	r2, [pc, #96]	; (8008740 <TIM_Base_SetConfig+0xc0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d108      	bne.n	80086f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a07      	ldr	r2, [pc, #28]	; (8008738 <TIM_Base_SetConfig+0xb8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d103      	bne.n	8008728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	615a      	str	r2, [r3, #20]
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr
 8008738:	40012c00 	.word	0x40012c00
 800873c:	40000400 	.word	0x40000400
 8008740:	40000800 	.word	0x40000800

08008744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f023 0201 	bic.w	r2, r3, #1
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f023 0302 	bic.w	r3, r3, #2
 800878c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a1c      	ldr	r2, [pc, #112]	; (800880c <TIM_OC1_SetConfig+0xc8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10c      	bne.n	80087ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f023 0308 	bic.w	r3, r3, #8
 80087a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f023 0304 	bic.w	r3, r3, #4
 80087b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a13      	ldr	r2, [pc, #76]	; (800880c <TIM_OC1_SetConfig+0xc8>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d111      	bne.n	80087e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	621a      	str	r2, [r3, #32]
}
 8008800:	bf00      	nop
 8008802:	371c      	adds	r7, #28
 8008804:	46bd      	mov	sp, r7
 8008806:	bc80      	pop	{r7}
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40012c00 	.word	0x40012c00

08008810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f023 0210 	bic.w	r2, r3, #16
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 0320 	bic.w	r3, r3, #32
 800885a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <TIM_OC2_SetConfig+0xd0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d10d      	bne.n	800888c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a14      	ldr	r2, [pc, #80]	; (80088e0 <TIM_OC2_SetConfig+0xd0>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d113      	bne.n	80088bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800889a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	bc80      	pop	{r7}
 80088de:	4770      	bx	lr
 80088e0:	40012c00 	.word	0x40012c00

080088e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800892c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a1d      	ldr	r2, [pc, #116]	; (80089b4 <TIM_OC3_SetConfig+0xd0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d10d      	bne.n	800895e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800895c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a14      	ldr	r2, [pc, #80]	; (80089b4 <TIM_OC3_SetConfig+0xd0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d113      	bne.n	800898e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800896c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4313      	orrs	r3, r2
 800898c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	621a      	str	r2, [r3, #32]
}
 80089a8:	bf00      	nop
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40012c00 	.word	0x40012c00

080089b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	031b      	lsls	r3, r3, #12
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a0f      	ldr	r2, [pc, #60]	; (8008a50 <TIM_OC4_SetConfig+0x98>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d109      	bne.n	8008a2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	019b      	lsls	r3, r3, #6
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	621a      	str	r2, [r3, #32]
}
 8008a46:	bf00      	nop
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr
 8008a50:	40012c00 	.word	0x40012c00

08008a54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f023 0201 	bic.w	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <TIM_TI1_SetConfig+0xa8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00b      	beq.n	8008a9a <TIM_TI1_SetConfig+0x46>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a88:	d007      	beq.n	8008a9a <TIM_TI1_SetConfig+0x46>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <TIM_TI1_SetConfig+0xac>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d003      	beq.n	8008a9a <TIM_TI1_SetConfig+0x46>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <TIM_TI1_SetConfig+0xb0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d101      	bne.n	8008a9e <TIM_TI1_SetConfig+0x4a>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <TIM_TI1_SetConfig+0x4c>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d008      	beq.n	8008ab6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	e003      	b.n	8008abe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f043 0301 	orr.w	r3, r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f023 030a 	bic.w	r3, r3, #10
 8008ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f003 030a 	and.w	r3, r3, #10
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bc80      	pop	{r7}
 8008afa:	4770      	bx	lr
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40000800 	.word	0x40000800

08008b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	f023 0201 	bic.w	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f023 030a 	bic.w	r3, r3, #10
 8008b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr

08008b64 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f023 0210 	bic.w	r2, r3, #16
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ba2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	031b      	lsls	r3, r3, #12
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	621a      	str	r2, [r3, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	f023 0210 	bic.w	r2, r3, #16
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	031b      	lsls	r3, r3, #12
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	621a      	str	r2, [r3, #32]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bc80      	pop	{r7}
 8008c38:	4770      	bx	lr

08008c3a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b087      	sub	sp, #28
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f023 0303 	bic.w	r3, r3, #3
 8008c66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	621a      	str	r2, [r3, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	031b      	lsls	r3, r3, #12
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	031b      	lsls	r3, r3, #12
 8008d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bc80      	pop	{r7}
 8008d26:	4770      	bx	lr

08008d28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	f043 0307 	orr.w	r3, r3, #7
 8008d4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	609a      	str	r2, [r3, #8]
}
 8008d52:	bf00      	nop
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr

08008d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	021a      	lsls	r2, r3, #8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	609a      	str	r2, [r3, #8]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b087      	sub	sp, #28
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f003 031f 	and.w	r3, r3, #31
 8008dac:	2201      	movs	r2, #1
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a1a      	ldr	r2, [r3, #32]
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	401a      	ands	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1a      	ldr	r2, [r3, #32]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f003 031f 	and.w	r3, r3, #31
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	621a      	str	r2, [r3, #32]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr
	...

08008de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e046      	b.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a16      	ldr	r2, [pc, #88]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d00e      	beq.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e48:	d009      	beq.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a12      	ldr	r2, [pc, #72]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d004      	beq.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a10      	ldr	r2, [pc, #64]	; (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d10c      	bne.n	8008e78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr
 8008e94:	40012c00 	.word	0x40012c00
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800

08008ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e03f      	b.n	8008f56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d106      	bne.n	8008ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7fb fb3a 	bl	8004564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2224      	movs	r2, #36	; 0x24
 8008ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 faa7 	bl	800945c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695a      	ldr	r2, [r3, #20]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b08a      	sub	sp, #40	; 0x28
 8008f62:	af02      	add	r7, sp, #8
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	603b      	str	r3, [r7, #0]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d17c      	bne.n	8009078 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <HAL_UART_Transmit+0x2c>
 8008f84:	88fb      	ldrh	r3, [r7, #6]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e075      	b.n	800907a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_UART_Transmit+0x3e>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e06e      	b.n	800907a <HAL_UART_Transmit+0x11c>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2221      	movs	r2, #33	; 0x21
 8008fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fb2:	f7fb ff89 	bl	8004ec8 <HAL_GetTick>
 8008fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	88fa      	ldrh	r2, [r7, #6]
 8008fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	88fa      	ldrh	r2, [r7, #6]
 8008fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fcc:	d108      	bne.n	8008fe0 <HAL_UART_Transmit+0x82>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d104      	bne.n	8008fe0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	e003      	b.n	8008fe8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008ff0:	e02a      	b.n	8009048 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2180      	movs	r1, #128	; 0x80
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f93d 	bl	800927c <UART_WaitOnFlagUntilTimeout>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e036      	b.n	800907a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10b      	bne.n	800902a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	3302      	adds	r3, #2
 8009026:	61bb      	str	r3, [r7, #24]
 8009028:	e007      	b.n	800903a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	781a      	ldrb	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	3301      	adds	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800903e:	b29b      	uxth	r3, r3
 8009040:	3b01      	subs	r3, #1
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1cf      	bne.n	8008ff2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2200      	movs	r2, #0
 800905a:	2140      	movs	r1, #64	; 0x40
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f90d 	bl	800927c <UART_WaitOnFlagUntilTimeout>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e006      	b.n	800907a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	e000      	b.n	800907a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009078:	2302      	movs	r3, #2
  }
}
 800907a:	4618      	mov	r0, r3
 800907c:	3720      	adds	r7, #32
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	4613      	mov	r3, r2
 800908e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b20      	cmp	r3, #32
 800909a:	d11d      	bne.n	80090d8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <HAL_UART_Receive_DMA+0x26>
 80090a2:	88fb      	ldrh	r3, [r7, #6]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e016      	b.n	80090da <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_UART_Receive_DMA+0x38>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e00f      	b.n	80090da <HAL_UART_Receive_DMA+0x58>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80090c8:	88fb      	ldrh	r3, [r7, #6]
 80090ca:	461a      	mov	r2, r3
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 f91e 	bl	8009310 <UART_Start_Receive_DMA>
 80090d4:	4603      	mov	r3, r0
 80090d6:	e000      	b.n	80090da <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80090d8:	2302      	movs	r3, #2
  }
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr

08009106 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009112:	bf00      	nop
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	bc80      	pop	{r7}
 800911a:	4770      	bx	lr

0800911c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0320 	and.w	r3, r3, #32
 8009134:	2b00      	cmp	r3, #0
 8009136:	d12a      	bne.n	800918e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800914c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	695a      	ldr	r2, [r3, #20]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0201 	bic.w	r2, r2, #1
 800915c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695a      	ldr	r2, [r3, #20]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800916c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2220      	movs	r2, #32
 8009172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	2b01      	cmp	r3, #1
 800917c:	d107      	bne.n	800918e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0210 	bic.w	r2, r2, #16
 800918c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	2b01      	cmp	r3, #1
 8009194:	d106      	bne.n	80091a4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800919a:	4619      	mov	r1, r3
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff ffb2 	bl	8009106 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091a2:	e002      	b.n	80091aa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7fa ffc3 	bl	8004130 <HAL_UART_RxCpltCallback>
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d108      	bne.n	80091da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff ff97 	bl	8009106 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091d8:	e002      	b.n	80091e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f7ff ff81 	bl	80090e2 <HAL_UART_RxHalfCpltCallback>
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009204:	2b00      	cmp	r3, #0
 8009206:	bf14      	ite	ne
 8009208:	2301      	movne	r3, #1
 800920a:	2300      	moveq	r3, #0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b21      	cmp	r3, #33	; 0x21
 800921a:	d108      	bne.n	800922e <UART_DMAError+0x46>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009228:	68b8      	ldr	r0, [r7, #8]
 800922a:	f000 f8d5 	bl	80093d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	bf14      	ite	ne
 800923c:	2301      	movne	r3, #1
 800923e:	2300      	moveq	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b22      	cmp	r3, #34	; 0x22
 800924e:	d108      	bne.n	8009262 <UART_DMAError+0x7a>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2200      	movs	r2, #0
 800925a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800925c:	68b8      	ldr	r0, [r7, #8]
 800925e:	f000 f8d0 	bl	8009402 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	f043 0210 	orr.w	r2, r3, #16
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800926e:	68b8      	ldr	r0, [r7, #8]
 8009270:	f7ff ff40 	bl	80090f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009274:	bf00      	nop
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	4613      	mov	r3, r2
 800928a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800928c:	e02c      	b.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009294:	d028      	beq.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d007      	beq.n	80092ac <UART_WaitOnFlagUntilTimeout+0x30>
 800929c:	f7fb fe14 	bl	8004ec8 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d21d      	bcs.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695a      	ldr	r2, [r3, #20]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0201 	bic.w	r2, r2, #1
 80092ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e00f      	b.n	8009308 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4013      	ands	r3, r2
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	bf0c      	ite	eq
 80092f8:	2301      	moveq	r3, #1
 80092fa:	2300      	movne	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	429a      	cmp	r2, r3
 8009304:	d0c3      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	4613      	mov	r3, r2
 800931c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2222      	movs	r2, #34	; 0x22
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933c:	4a23      	ldr	r2, [pc, #140]	; (80093cc <UART_Start_Receive_DMA+0xbc>)
 800933e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	4a22      	ldr	r2, [pc, #136]	; (80093d0 <UART_Start_Receive_DMA+0xc0>)
 8009346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934c:	4a21      	ldr	r2, [pc, #132]	; (80093d4 <UART_Start_Receive_DMA+0xc4>)
 800934e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	2200      	movs	r2, #0
 8009356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009358:	f107 0308 	add.w	r3, r7, #8
 800935c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3304      	adds	r3, #4
 8009368:	4619      	mov	r1, r3
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	f7fc f952 	bl	8005618 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009374:	2300      	movs	r3, #0
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	613b      	str	r3, [r7, #16]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695a      	ldr	r2, [r3, #20]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0201 	orr.w	r2, r2, #1
 80093b0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	695a      	ldr	r2, [r3, #20]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	0800911d 	.word	0x0800911d
 80093d0:	080091b3 	.word	0x080091b3
 80093d4:	080091e9 	.word	0x080091e9

080093d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80093ee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr

08009402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009418:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0201 	bic.w	r2, r2, #1
 8009428:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942e:	2b01      	cmp	r3, #1
 8009430:	d107      	bne.n	8009442 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0210 	bic.w	r2, r2, #16
 8009440:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr
	...

0800945c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	431a      	orrs	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009496:	f023 030c 	bic.w	r3, r3, #12
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	430b      	orrs	r3, r1
 80094a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2c      	ldr	r2, [pc, #176]	; (8009570 <UART_SetConfig+0x114>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d103      	bne.n	80094cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80094c4:	f7fd ffa8 	bl	8007418 <HAL_RCC_GetPCLK2Freq>
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	e002      	b.n	80094d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80094cc:	f7fd ff90 	bl	80073f0 <HAL_RCC_GetPCLK1Freq>
 80094d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009a      	lsls	r2, r3, #2
 80094dc:	441a      	add	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e8:	4a22      	ldr	r2, [pc, #136]	; (8009574 <UART_SetConfig+0x118>)
 80094ea:	fba2 2303 	umull	r2, r3, r2, r3
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	0119      	lsls	r1, r3, #4
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009a      	lsls	r2, r3, #2
 80094fc:	441a      	add	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	fbb2 f2f3 	udiv	r2, r2, r3
 8009508:	4b1a      	ldr	r3, [pc, #104]	; (8009574 <UART_SetConfig+0x118>)
 800950a:	fba3 0302 	umull	r0, r3, r3, r2
 800950e:	095b      	lsrs	r3, r3, #5
 8009510:	2064      	movs	r0, #100	; 0x64
 8009512:	fb00 f303 	mul.w	r3, r0, r3
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	011b      	lsls	r3, r3, #4
 800951a:	3332      	adds	r3, #50	; 0x32
 800951c:	4a15      	ldr	r2, [pc, #84]	; (8009574 <UART_SetConfig+0x118>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	095b      	lsrs	r3, r3, #5
 8009524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009528:	4419      	add	r1, r3
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009a      	lsls	r2, r3, #2
 8009534:	441a      	add	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009540:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <UART_SetConfig+0x118>)
 8009542:	fba3 0302 	umull	r0, r3, r3, r2
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	2064      	movs	r0, #100	; 0x64
 800954a:	fb00 f303 	mul.w	r3, r0, r3
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	011b      	lsls	r3, r3, #4
 8009552:	3332      	adds	r3, #50	; 0x32
 8009554:	4a07      	ldr	r2, [pc, #28]	; (8009574 <UART_SetConfig+0x118>)
 8009556:	fba2 2303 	umull	r2, r3, r2, r3
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	f003 020f 	and.w	r2, r3, #15
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	440a      	add	r2, r1
 8009566:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009568:	bf00      	nop
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	40013800 	.word	0x40013800
 8009574:	51eb851f 	.word	0x51eb851f

08009578 <__errno>:
 8009578:	4b01      	ldr	r3, [pc, #4]	; (8009580 <__errno+0x8>)
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	200000b8 	.word	0x200000b8

08009584 <__libc_init_array>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	2600      	movs	r6, #0
 8009588:	4d0c      	ldr	r5, [pc, #48]	; (80095bc <__libc_init_array+0x38>)
 800958a:	4c0d      	ldr	r4, [pc, #52]	; (80095c0 <__libc_init_array+0x3c>)
 800958c:	1b64      	subs	r4, r4, r5
 800958e:	10a4      	asrs	r4, r4, #2
 8009590:	42a6      	cmp	r6, r4
 8009592:	d109      	bne.n	80095a8 <__libc_init_array+0x24>
 8009594:	f003 fa68 	bl	800ca68 <_init>
 8009598:	2600      	movs	r6, #0
 800959a:	4d0a      	ldr	r5, [pc, #40]	; (80095c4 <__libc_init_array+0x40>)
 800959c:	4c0a      	ldr	r4, [pc, #40]	; (80095c8 <__libc_init_array+0x44>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	42a6      	cmp	r6, r4
 80095a4:	d105      	bne.n	80095b2 <__libc_init_array+0x2e>
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ac:	4798      	blx	r3
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7ee      	b.n	8009590 <__libc_init_array+0xc>
 80095b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b6:	4798      	blx	r3
 80095b8:	3601      	adds	r6, #1
 80095ba:	e7f2      	b.n	80095a2 <__libc_init_array+0x1e>
 80095bc:	0800cecc 	.word	0x0800cecc
 80095c0:	0800cecc 	.word	0x0800cecc
 80095c4:	0800cecc 	.word	0x0800cecc
 80095c8:	0800ced0 	.word	0x0800ced0

080095cc <memset>:
 80095cc:	4603      	mov	r3, r0
 80095ce:	4402      	add	r2, r0
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d100      	bne.n	80095d6 <memset+0xa>
 80095d4:	4770      	bx	lr
 80095d6:	f803 1b01 	strb.w	r1, [r3], #1
 80095da:	e7f9      	b.n	80095d0 <memset+0x4>

080095dc <__cvt>:
 80095dc:	2b00      	cmp	r3, #0
 80095de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e2:	461f      	mov	r7, r3
 80095e4:	bfbb      	ittet	lt
 80095e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80095ea:	461f      	movlt	r7, r3
 80095ec:	2300      	movge	r3, #0
 80095ee:	232d      	movlt	r3, #45	; 0x2d
 80095f0:	b088      	sub	sp, #32
 80095f2:	4614      	mov	r4, r2
 80095f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80095f8:	7013      	strb	r3, [r2, #0]
 80095fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009600:	f023 0820 	bic.w	r8, r3, #32
 8009604:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009608:	d005      	beq.n	8009616 <__cvt+0x3a>
 800960a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800960e:	d100      	bne.n	8009612 <__cvt+0x36>
 8009610:	3501      	adds	r5, #1
 8009612:	2302      	movs	r3, #2
 8009614:	e000      	b.n	8009618 <__cvt+0x3c>
 8009616:	2303      	movs	r3, #3
 8009618:	aa07      	add	r2, sp, #28
 800961a:	9204      	str	r2, [sp, #16]
 800961c:	aa06      	add	r2, sp, #24
 800961e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009622:	e9cd 3500 	strd	r3, r5, [sp]
 8009626:	4622      	mov	r2, r4
 8009628:	463b      	mov	r3, r7
 800962a:	f000 fce5 	bl	8009ff8 <_dtoa_r>
 800962e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009632:	4606      	mov	r6, r0
 8009634:	d102      	bne.n	800963c <__cvt+0x60>
 8009636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009638:	07db      	lsls	r3, r3, #31
 800963a:	d522      	bpl.n	8009682 <__cvt+0xa6>
 800963c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009640:	eb06 0905 	add.w	r9, r6, r5
 8009644:	d110      	bne.n	8009668 <__cvt+0x8c>
 8009646:	7833      	ldrb	r3, [r6, #0]
 8009648:	2b30      	cmp	r3, #48	; 0x30
 800964a:	d10a      	bne.n	8009662 <__cvt+0x86>
 800964c:	2200      	movs	r2, #0
 800964e:	2300      	movs	r3, #0
 8009650:	4620      	mov	r0, r4
 8009652:	4639      	mov	r1, r7
 8009654:	f7f7 f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 8009658:	b918      	cbnz	r0, 8009662 <__cvt+0x86>
 800965a:	f1c5 0501 	rsb	r5, r5, #1
 800965e:	f8ca 5000 	str.w	r5, [sl]
 8009662:	f8da 3000 	ldr.w	r3, [sl]
 8009666:	4499      	add	r9, r3
 8009668:	2200      	movs	r2, #0
 800966a:	2300      	movs	r3, #0
 800966c:	4620      	mov	r0, r4
 800966e:	4639      	mov	r1, r7
 8009670:	f7f7 f99a 	bl	80009a8 <__aeabi_dcmpeq>
 8009674:	b108      	cbz	r0, 800967a <__cvt+0x9e>
 8009676:	f8cd 901c 	str.w	r9, [sp, #28]
 800967a:	2230      	movs	r2, #48	; 0x30
 800967c:	9b07      	ldr	r3, [sp, #28]
 800967e:	454b      	cmp	r3, r9
 8009680:	d307      	bcc.n	8009692 <__cvt+0xb6>
 8009682:	4630      	mov	r0, r6
 8009684:	9b07      	ldr	r3, [sp, #28]
 8009686:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009688:	1b9b      	subs	r3, r3, r6
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	b008      	add	sp, #32
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	1c59      	adds	r1, r3, #1
 8009694:	9107      	str	r1, [sp, #28]
 8009696:	701a      	strb	r2, [r3, #0]
 8009698:	e7f0      	b.n	800967c <__cvt+0xa0>

0800969a <__exponent>:
 800969a:	4603      	mov	r3, r0
 800969c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800969e:	2900      	cmp	r1, #0
 80096a0:	f803 2b02 	strb.w	r2, [r3], #2
 80096a4:	bfb6      	itet	lt
 80096a6:	222d      	movlt	r2, #45	; 0x2d
 80096a8:	222b      	movge	r2, #43	; 0x2b
 80096aa:	4249      	neglt	r1, r1
 80096ac:	2909      	cmp	r1, #9
 80096ae:	7042      	strb	r2, [r0, #1]
 80096b0:	dd2b      	ble.n	800970a <__exponent+0x70>
 80096b2:	f10d 0407 	add.w	r4, sp, #7
 80096b6:	46a4      	mov	ip, r4
 80096b8:	270a      	movs	r7, #10
 80096ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80096be:	460a      	mov	r2, r1
 80096c0:	46a6      	mov	lr, r4
 80096c2:	fb07 1516 	mls	r5, r7, r6, r1
 80096c6:	2a63      	cmp	r2, #99	; 0x63
 80096c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80096cc:	4631      	mov	r1, r6
 80096ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80096d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80096d6:	dcf0      	bgt.n	80096ba <__exponent+0x20>
 80096d8:	3130      	adds	r1, #48	; 0x30
 80096da:	f1ae 0502 	sub.w	r5, lr, #2
 80096de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80096e2:	4629      	mov	r1, r5
 80096e4:	1c44      	adds	r4, r0, #1
 80096e6:	4561      	cmp	r1, ip
 80096e8:	d30a      	bcc.n	8009700 <__exponent+0x66>
 80096ea:	f10d 0209 	add.w	r2, sp, #9
 80096ee:	eba2 020e 	sub.w	r2, r2, lr
 80096f2:	4565      	cmp	r5, ip
 80096f4:	bf88      	it	hi
 80096f6:	2200      	movhi	r2, #0
 80096f8:	4413      	add	r3, r2
 80096fa:	1a18      	subs	r0, r3, r0
 80096fc:	b003      	add	sp, #12
 80096fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009700:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009704:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009708:	e7ed      	b.n	80096e6 <__exponent+0x4c>
 800970a:	2330      	movs	r3, #48	; 0x30
 800970c:	3130      	adds	r1, #48	; 0x30
 800970e:	7083      	strb	r3, [r0, #2]
 8009710:	70c1      	strb	r1, [r0, #3]
 8009712:	1d03      	adds	r3, r0, #4
 8009714:	e7f1      	b.n	80096fa <__exponent+0x60>
	...

08009718 <_printf_float>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	b091      	sub	sp, #68	; 0x44
 800971e:	460c      	mov	r4, r1
 8009720:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009724:	4616      	mov	r6, r2
 8009726:	461f      	mov	r7, r3
 8009728:	4605      	mov	r5, r0
 800972a:	f001 fa53 	bl	800abd4 <_localeconv_r>
 800972e:	6803      	ldr	r3, [r0, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	9309      	str	r3, [sp, #36]	; 0x24
 8009734:	f7f6 fd0c 	bl	8000150 <strlen>
 8009738:	2300      	movs	r3, #0
 800973a:	930e      	str	r3, [sp, #56]	; 0x38
 800973c:	f8d8 3000 	ldr.w	r3, [r8]
 8009740:	900a      	str	r0, [sp, #40]	; 0x28
 8009742:	3307      	adds	r3, #7
 8009744:	f023 0307 	bic.w	r3, r3, #7
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009750:	f8d4 b000 	ldr.w	fp, [r4]
 8009754:	f8c8 2000 	str.w	r2, [r8]
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009760:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009764:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009768:	930b      	str	r3, [sp, #44]	; 0x2c
 800976a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800976e:	4640      	mov	r0, r8
 8009770:	4b9c      	ldr	r3, [pc, #624]	; (80099e4 <_printf_float+0x2cc>)
 8009772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009774:	f7f7 f94a 	bl	8000a0c <__aeabi_dcmpun>
 8009778:	bb70      	cbnz	r0, 80097d8 <_printf_float+0xc0>
 800977a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800977e:	4640      	mov	r0, r8
 8009780:	4b98      	ldr	r3, [pc, #608]	; (80099e4 <_printf_float+0x2cc>)
 8009782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009784:	f7f7 f924 	bl	80009d0 <__aeabi_dcmple>
 8009788:	bb30      	cbnz	r0, 80097d8 <_printf_float+0xc0>
 800978a:	2200      	movs	r2, #0
 800978c:	2300      	movs	r3, #0
 800978e:	4640      	mov	r0, r8
 8009790:	4651      	mov	r1, sl
 8009792:	f7f7 f913 	bl	80009bc <__aeabi_dcmplt>
 8009796:	b110      	cbz	r0, 800979e <_printf_float+0x86>
 8009798:	232d      	movs	r3, #45	; 0x2d
 800979a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800979e:	4b92      	ldr	r3, [pc, #584]	; (80099e8 <_printf_float+0x2d0>)
 80097a0:	4892      	ldr	r0, [pc, #584]	; (80099ec <_printf_float+0x2d4>)
 80097a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80097a6:	bf94      	ite	ls
 80097a8:	4698      	movls	r8, r3
 80097aa:	4680      	movhi	r8, r0
 80097ac:	2303      	movs	r3, #3
 80097ae:	f04f 0a00 	mov.w	sl, #0
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	f02b 0304 	bic.w	r3, fp, #4
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	4633      	mov	r3, r6
 80097bc:	4621      	mov	r1, r4
 80097be:	4628      	mov	r0, r5
 80097c0:	9700      	str	r7, [sp, #0]
 80097c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80097c4:	f000 f9d4 	bl	8009b70 <_printf_common>
 80097c8:	3001      	adds	r0, #1
 80097ca:	f040 8090 	bne.w	80098ee <_printf_float+0x1d6>
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097d2:	b011      	add	sp, #68	; 0x44
 80097d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	4642      	mov	r2, r8
 80097da:	4653      	mov	r3, sl
 80097dc:	4640      	mov	r0, r8
 80097de:	4651      	mov	r1, sl
 80097e0:	f7f7 f914 	bl	8000a0c <__aeabi_dcmpun>
 80097e4:	b148      	cbz	r0, 80097fa <_printf_float+0xe2>
 80097e6:	f1ba 0f00 	cmp.w	sl, #0
 80097ea:	bfb8      	it	lt
 80097ec:	232d      	movlt	r3, #45	; 0x2d
 80097ee:	4880      	ldr	r0, [pc, #512]	; (80099f0 <_printf_float+0x2d8>)
 80097f0:	bfb8      	it	lt
 80097f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097f6:	4b7f      	ldr	r3, [pc, #508]	; (80099f4 <_printf_float+0x2dc>)
 80097f8:	e7d3      	b.n	80097a2 <_printf_float+0x8a>
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	d142      	bne.n	800988a <_printf_float+0x172>
 8009804:	2306      	movs	r3, #6
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	9206      	str	r2, [sp, #24]
 800980c:	aa0e      	add	r2, sp, #56	; 0x38
 800980e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009812:	aa0d      	add	r2, sp, #52	; 0x34
 8009814:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009818:	9203      	str	r2, [sp, #12]
 800981a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800981e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	4642      	mov	r2, r8
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4628      	mov	r0, r5
 800982c:	4653      	mov	r3, sl
 800982e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009830:	f7ff fed4 	bl	80095dc <__cvt>
 8009834:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009836:	4680      	mov	r8, r0
 8009838:	2947      	cmp	r1, #71	; 0x47
 800983a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800983c:	d108      	bne.n	8009850 <_printf_float+0x138>
 800983e:	1cc8      	adds	r0, r1, #3
 8009840:	db02      	blt.n	8009848 <_printf_float+0x130>
 8009842:	6863      	ldr	r3, [r4, #4]
 8009844:	4299      	cmp	r1, r3
 8009846:	dd40      	ble.n	80098ca <_printf_float+0x1b2>
 8009848:	f1a9 0902 	sub.w	r9, r9, #2
 800984c:	fa5f f989 	uxtb.w	r9, r9
 8009850:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009854:	d81f      	bhi.n	8009896 <_printf_float+0x17e>
 8009856:	464a      	mov	r2, r9
 8009858:	3901      	subs	r1, #1
 800985a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800985e:	910d      	str	r1, [sp, #52]	; 0x34
 8009860:	f7ff ff1b 	bl	800969a <__exponent>
 8009864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009866:	4682      	mov	sl, r0
 8009868:	1813      	adds	r3, r2, r0
 800986a:	2a01      	cmp	r2, #1
 800986c:	6123      	str	r3, [r4, #16]
 800986e:	dc02      	bgt.n	8009876 <_printf_float+0x15e>
 8009870:	6822      	ldr	r2, [r4, #0]
 8009872:	07d2      	lsls	r2, r2, #31
 8009874:	d501      	bpl.n	800987a <_printf_float+0x162>
 8009876:	3301      	adds	r3, #1
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800987e:	2b00      	cmp	r3, #0
 8009880:	d09b      	beq.n	80097ba <_printf_float+0xa2>
 8009882:	232d      	movs	r3, #45	; 0x2d
 8009884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009888:	e797      	b.n	80097ba <_printf_float+0xa2>
 800988a:	2947      	cmp	r1, #71	; 0x47
 800988c:	d1bc      	bne.n	8009808 <_printf_float+0xf0>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1ba      	bne.n	8009808 <_printf_float+0xf0>
 8009892:	2301      	movs	r3, #1
 8009894:	e7b7      	b.n	8009806 <_printf_float+0xee>
 8009896:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800989a:	d118      	bne.n	80098ce <_printf_float+0x1b6>
 800989c:	2900      	cmp	r1, #0
 800989e:	6863      	ldr	r3, [r4, #4]
 80098a0:	dd0b      	ble.n	80098ba <_printf_float+0x1a2>
 80098a2:	6121      	str	r1, [r4, #16]
 80098a4:	b913      	cbnz	r3, 80098ac <_printf_float+0x194>
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	07d0      	lsls	r0, r2, #31
 80098aa:	d502      	bpl.n	80098b2 <_printf_float+0x19a>
 80098ac:	3301      	adds	r3, #1
 80098ae:	440b      	add	r3, r1
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	f04f 0a00 	mov.w	sl, #0
 80098b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80098b8:	e7df      	b.n	800987a <_printf_float+0x162>
 80098ba:	b913      	cbnz	r3, 80098c2 <_printf_float+0x1aa>
 80098bc:	6822      	ldr	r2, [r4, #0]
 80098be:	07d2      	lsls	r2, r2, #31
 80098c0:	d501      	bpl.n	80098c6 <_printf_float+0x1ae>
 80098c2:	3302      	adds	r3, #2
 80098c4:	e7f4      	b.n	80098b0 <_printf_float+0x198>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e7f2      	b.n	80098b0 <_printf_float+0x198>
 80098ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80098ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098d0:	4299      	cmp	r1, r3
 80098d2:	db05      	blt.n	80098e0 <_printf_float+0x1c8>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	6121      	str	r1, [r4, #16]
 80098d8:	07d8      	lsls	r0, r3, #31
 80098da:	d5ea      	bpl.n	80098b2 <_printf_float+0x19a>
 80098dc:	1c4b      	adds	r3, r1, #1
 80098de:	e7e7      	b.n	80098b0 <_printf_float+0x198>
 80098e0:	2900      	cmp	r1, #0
 80098e2:	bfcc      	ite	gt
 80098e4:	2201      	movgt	r2, #1
 80098e6:	f1c1 0202 	rsble	r2, r1, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	e7e0      	b.n	80098b0 <_printf_float+0x198>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	055a      	lsls	r2, r3, #21
 80098f2:	d407      	bmi.n	8009904 <_printf_float+0x1ec>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	4642      	mov	r2, r8
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	d12b      	bne.n	800995a <_printf_float+0x242>
 8009902:	e764      	b.n	80097ce <_printf_float+0xb6>
 8009904:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009908:	f240 80dd 	bls.w	8009ac6 <_printf_float+0x3ae>
 800990c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009910:	2200      	movs	r2, #0
 8009912:	2300      	movs	r3, #0
 8009914:	f7f7 f848 	bl	80009a8 <__aeabi_dcmpeq>
 8009918:	2800      	cmp	r0, #0
 800991a:	d033      	beq.n	8009984 <_printf_float+0x26c>
 800991c:	2301      	movs	r3, #1
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	4a35      	ldr	r2, [pc, #212]	; (80099f8 <_printf_float+0x2e0>)
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f af51 	beq.w	80097ce <_printf_float+0xb6>
 800992c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009930:	429a      	cmp	r2, r3
 8009932:	db02      	blt.n	800993a <_printf_float+0x222>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	07d8      	lsls	r0, r3, #31
 8009938:	d50f      	bpl.n	800995a <_printf_float+0x242>
 800993a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	f43f af42 	beq.w	80097ce <_printf_float+0xb6>
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	f104 091a 	add.w	r9, r4, #26
 8009952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009954:	3b01      	subs	r3, #1
 8009956:	4543      	cmp	r3, r8
 8009958:	dc09      	bgt.n	800996e <_printf_float+0x256>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	079b      	lsls	r3, r3, #30
 800995e:	f100 8102 	bmi.w	8009b66 <_printf_float+0x44e>
 8009962:	68e0      	ldr	r0, [r4, #12]
 8009964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009966:	4298      	cmp	r0, r3
 8009968:	bfb8      	it	lt
 800996a:	4618      	movlt	r0, r3
 800996c:	e731      	b.n	80097d2 <_printf_float+0xba>
 800996e:	2301      	movs	r3, #1
 8009970:	464a      	mov	r2, r9
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	f43f af28 	beq.w	80097ce <_printf_float+0xb6>
 800997e:	f108 0801 	add.w	r8, r8, #1
 8009982:	e7e6      	b.n	8009952 <_printf_float+0x23a>
 8009984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009986:	2b00      	cmp	r3, #0
 8009988:	dc38      	bgt.n	80099fc <_printf_float+0x2e4>
 800998a:	2301      	movs	r3, #1
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	4a19      	ldr	r2, [pc, #100]	; (80099f8 <_printf_float+0x2e0>)
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	f43f af1a 	beq.w	80097ce <_printf_float+0xb6>
 800999a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800999e:	4313      	orrs	r3, r2
 80099a0:	d102      	bne.n	80099a8 <_printf_float+0x290>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	07d9      	lsls	r1, r3, #31
 80099a6:	d5d8      	bpl.n	800995a <_printf_float+0x242>
 80099a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f af0b 	beq.w	80097ce <_printf_float+0xb6>
 80099b8:	f04f 0900 	mov.w	r9, #0
 80099bc:	f104 0a1a 	add.w	sl, r4, #26
 80099c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c2:	425b      	negs	r3, r3
 80099c4:	454b      	cmp	r3, r9
 80099c6:	dc01      	bgt.n	80099cc <_printf_float+0x2b4>
 80099c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099ca:	e794      	b.n	80098f6 <_printf_float+0x1de>
 80099cc:	2301      	movs	r3, #1
 80099ce:	4652      	mov	r2, sl
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	47b8      	blx	r7
 80099d6:	3001      	adds	r0, #1
 80099d8:	f43f aef9 	beq.w	80097ce <_printf_float+0xb6>
 80099dc:	f109 0901 	add.w	r9, r9, #1
 80099e0:	e7ee      	b.n	80099c0 <_printf_float+0x2a8>
 80099e2:	bf00      	nop
 80099e4:	7fefffff 	.word	0x7fefffff
 80099e8:	0800cabc 	.word	0x0800cabc
 80099ec:	0800cac0 	.word	0x0800cac0
 80099f0:	0800cac8 	.word	0x0800cac8
 80099f4:	0800cac4 	.word	0x0800cac4
 80099f8:	0800cacc 	.word	0x0800cacc
 80099fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a00:	429a      	cmp	r2, r3
 8009a02:	bfa8      	it	ge
 8009a04:	461a      	movge	r2, r3
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	4691      	mov	r9, r2
 8009a0a:	dc37      	bgt.n	8009a7c <_printf_float+0x364>
 8009a0c:	f04f 0b00 	mov.w	fp, #0
 8009a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a14:	f104 021a 	add.w	r2, r4, #26
 8009a18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a1c:	ebaa 0309 	sub.w	r3, sl, r9
 8009a20:	455b      	cmp	r3, fp
 8009a22:	dc33      	bgt.n	8009a8c <_printf_float+0x374>
 8009a24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	db3b      	blt.n	8009aa4 <_printf_float+0x38c>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	07da      	lsls	r2, r3, #31
 8009a30:	d438      	bmi.n	8009aa4 <_printf_float+0x38c>
 8009a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a36:	eba3 020a 	sub.w	r2, r3, sl
 8009a3a:	eba3 0901 	sub.w	r9, r3, r1
 8009a3e:	4591      	cmp	r9, r2
 8009a40:	bfa8      	it	ge
 8009a42:	4691      	movge	r9, r2
 8009a44:	f1b9 0f00 	cmp.w	r9, #0
 8009a48:	dc34      	bgt.n	8009ab4 <_printf_float+0x39c>
 8009a4a:	f04f 0800 	mov.w	r8, #0
 8009a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a52:	f104 0a1a 	add.w	sl, r4, #26
 8009a56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	eba3 0309 	sub.w	r3, r3, r9
 8009a60:	4543      	cmp	r3, r8
 8009a62:	f77f af7a 	ble.w	800995a <_printf_float+0x242>
 8009a66:	2301      	movs	r3, #1
 8009a68:	4652      	mov	r2, sl
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	f43f aeac 	beq.w	80097ce <_printf_float+0xb6>
 8009a76:	f108 0801 	add.w	r8, r8, #1
 8009a7a:	e7ec      	b.n	8009a56 <_printf_float+0x33e>
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4642      	mov	r2, r8
 8009a82:	4628      	mov	r0, r5
 8009a84:	47b8      	blx	r7
 8009a86:	3001      	adds	r0, #1
 8009a88:	d1c0      	bne.n	8009a0c <_printf_float+0x2f4>
 8009a8a:	e6a0      	b.n	80097ce <_printf_float+0xb6>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4628      	mov	r0, r5
 8009a92:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a94:	47b8      	blx	r7
 8009a96:	3001      	adds	r0, #1
 8009a98:	f43f ae99 	beq.w	80097ce <_printf_float+0xb6>
 8009a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a9e:	f10b 0b01 	add.w	fp, fp, #1
 8009aa2:	e7b9      	b.n	8009a18 <_printf_float+0x300>
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aaa:	4628      	mov	r0, r5
 8009aac:	47b8      	blx	r7
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d1bf      	bne.n	8009a32 <_printf_float+0x31a>
 8009ab2:	e68c      	b.n	80097ce <_printf_float+0xb6>
 8009ab4:	464b      	mov	r3, r9
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	eb08 020a 	add.w	r2, r8, sl
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d1c2      	bne.n	8009a4a <_printf_float+0x332>
 8009ac4:	e683      	b.n	80097ce <_printf_float+0xb6>
 8009ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ac8:	2a01      	cmp	r2, #1
 8009aca:	dc01      	bgt.n	8009ad0 <_printf_float+0x3b8>
 8009acc:	07db      	lsls	r3, r3, #31
 8009ace:	d537      	bpl.n	8009b40 <_printf_float+0x428>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	f43f ae77 	beq.w	80097ce <_printf_float+0xb6>
 8009ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	47b8      	blx	r7
 8009aea:	3001      	adds	r0, #1
 8009aec:	f43f ae6f 	beq.w	80097ce <_printf_float+0xb6>
 8009af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	f7f6 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8009afc:	b9d8      	cbnz	r0, 8009b36 <_printf_float+0x41e>
 8009afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b00:	f108 0201 	add.w	r2, r8, #1
 8009b04:	3b01      	subs	r3, #1
 8009b06:	4631      	mov	r1, r6
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b8      	blx	r7
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d10e      	bne.n	8009b2e <_printf_float+0x416>
 8009b10:	e65d      	b.n	80097ce <_printf_float+0xb6>
 8009b12:	2301      	movs	r3, #1
 8009b14:	464a      	mov	r2, r9
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b8      	blx	r7
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f43f ae56 	beq.w	80097ce <_printf_float+0xb6>
 8009b22:	f108 0801 	add.w	r8, r8, #1
 8009b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	4543      	cmp	r3, r8
 8009b2c:	dcf1      	bgt.n	8009b12 <_printf_float+0x3fa>
 8009b2e:	4653      	mov	r3, sl
 8009b30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b34:	e6e0      	b.n	80098f8 <_printf_float+0x1e0>
 8009b36:	f04f 0800 	mov.w	r8, #0
 8009b3a:	f104 091a 	add.w	r9, r4, #26
 8009b3e:	e7f2      	b.n	8009b26 <_printf_float+0x40e>
 8009b40:	2301      	movs	r3, #1
 8009b42:	4642      	mov	r2, r8
 8009b44:	e7df      	b.n	8009b06 <_printf_float+0x3ee>
 8009b46:	2301      	movs	r3, #1
 8009b48:	464a      	mov	r2, r9
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f ae3c 	beq.w	80097ce <_printf_float+0xb6>
 8009b56:	f108 0801 	add.w	r8, r8, #1
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b5e:	1a5b      	subs	r3, r3, r1
 8009b60:	4543      	cmp	r3, r8
 8009b62:	dcf0      	bgt.n	8009b46 <_printf_float+0x42e>
 8009b64:	e6fd      	b.n	8009962 <_printf_float+0x24a>
 8009b66:	f04f 0800 	mov.w	r8, #0
 8009b6a:	f104 0919 	add.w	r9, r4, #25
 8009b6e:	e7f4      	b.n	8009b5a <_printf_float+0x442>

08009b70 <_printf_common>:
 8009b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	4616      	mov	r6, r2
 8009b76:	4699      	mov	r9, r3
 8009b78:	688a      	ldr	r2, [r1, #8]
 8009b7a:	690b      	ldr	r3, [r1, #16]
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	bfb8      	it	lt
 8009b82:	4613      	movlt	r3, r2
 8009b84:	6033      	str	r3, [r6, #0]
 8009b86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b90:	b10a      	cbz	r2, 8009b96 <_printf_common+0x26>
 8009b92:	3301      	adds	r3, #1
 8009b94:	6033      	str	r3, [r6, #0]
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	0699      	lsls	r1, r3, #26
 8009b9a:	bf42      	ittt	mi
 8009b9c:	6833      	ldrmi	r3, [r6, #0]
 8009b9e:	3302      	addmi	r3, #2
 8009ba0:	6033      	strmi	r3, [r6, #0]
 8009ba2:	6825      	ldr	r5, [r4, #0]
 8009ba4:	f015 0506 	ands.w	r5, r5, #6
 8009ba8:	d106      	bne.n	8009bb8 <_printf_common+0x48>
 8009baa:	f104 0a19 	add.w	sl, r4, #25
 8009bae:	68e3      	ldr	r3, [r4, #12]
 8009bb0:	6832      	ldr	r2, [r6, #0]
 8009bb2:	1a9b      	subs	r3, r3, r2
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	dc28      	bgt.n	8009c0a <_printf_common+0x9a>
 8009bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bbc:	1e13      	subs	r3, r2, #0
 8009bbe:	6822      	ldr	r2, [r4, #0]
 8009bc0:	bf18      	it	ne
 8009bc2:	2301      	movne	r3, #1
 8009bc4:	0692      	lsls	r2, r2, #26
 8009bc6:	d42d      	bmi.n	8009c24 <_printf_common+0xb4>
 8009bc8:	4649      	mov	r1, r9
 8009bca:	4638      	mov	r0, r7
 8009bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bd0:	47c0      	blx	r8
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	d020      	beq.n	8009c18 <_printf_common+0xa8>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	68e5      	ldr	r5, [r4, #12]
 8009bda:	f003 0306 	and.w	r3, r3, #6
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	bf18      	it	ne
 8009be2:	2500      	movne	r5, #0
 8009be4:	6832      	ldr	r2, [r6, #0]
 8009be6:	f04f 0600 	mov.w	r6, #0
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	bf08      	it	eq
 8009bee:	1aad      	subeq	r5, r5, r2
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	bf08      	it	eq
 8009bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	bfc4      	itt	gt
 8009bfc:	1a9b      	subgt	r3, r3, r2
 8009bfe:	18ed      	addgt	r5, r5, r3
 8009c00:	341a      	adds	r4, #26
 8009c02:	42b5      	cmp	r5, r6
 8009c04:	d11a      	bne.n	8009c3c <_printf_common+0xcc>
 8009c06:	2000      	movs	r0, #0
 8009c08:	e008      	b.n	8009c1c <_printf_common+0xac>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4638      	mov	r0, r7
 8009c12:	47c0      	blx	r8
 8009c14:	3001      	adds	r0, #1
 8009c16:	d103      	bne.n	8009c20 <_printf_common+0xb0>
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c20:	3501      	adds	r5, #1
 8009c22:	e7c4      	b.n	8009bae <_printf_common+0x3e>
 8009c24:	2030      	movs	r0, #48	; 0x30
 8009c26:	18e1      	adds	r1, r4, r3
 8009c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c32:	4422      	add	r2, r4
 8009c34:	3302      	adds	r3, #2
 8009c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c3a:	e7c5      	b.n	8009bc8 <_printf_common+0x58>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4622      	mov	r2, r4
 8009c40:	4649      	mov	r1, r9
 8009c42:	4638      	mov	r0, r7
 8009c44:	47c0      	blx	r8
 8009c46:	3001      	adds	r0, #1
 8009c48:	d0e6      	beq.n	8009c18 <_printf_common+0xa8>
 8009c4a:	3601      	adds	r6, #1
 8009c4c:	e7d9      	b.n	8009c02 <_printf_common+0x92>
	...

08009c50 <_printf_i>:
 8009c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c54:	7e0f      	ldrb	r7, [r1, #24]
 8009c56:	4691      	mov	r9, r2
 8009c58:	2f78      	cmp	r7, #120	; 0x78
 8009c5a:	4680      	mov	r8, r0
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	469a      	mov	sl, r3
 8009c60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c66:	d807      	bhi.n	8009c78 <_printf_i+0x28>
 8009c68:	2f62      	cmp	r7, #98	; 0x62
 8009c6a:	d80a      	bhi.n	8009c82 <_printf_i+0x32>
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	f000 80d9 	beq.w	8009e24 <_printf_i+0x1d4>
 8009c72:	2f58      	cmp	r7, #88	; 0x58
 8009c74:	f000 80a4 	beq.w	8009dc0 <_printf_i+0x170>
 8009c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c80:	e03a      	b.n	8009cf8 <_printf_i+0xa8>
 8009c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c86:	2b15      	cmp	r3, #21
 8009c88:	d8f6      	bhi.n	8009c78 <_printf_i+0x28>
 8009c8a:	a101      	add	r1, pc, #4	; (adr r1, 8009c90 <_printf_i+0x40>)
 8009c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c90:	08009ce9 	.word	0x08009ce9
 8009c94:	08009cfd 	.word	0x08009cfd
 8009c98:	08009c79 	.word	0x08009c79
 8009c9c:	08009c79 	.word	0x08009c79
 8009ca0:	08009c79 	.word	0x08009c79
 8009ca4:	08009c79 	.word	0x08009c79
 8009ca8:	08009cfd 	.word	0x08009cfd
 8009cac:	08009c79 	.word	0x08009c79
 8009cb0:	08009c79 	.word	0x08009c79
 8009cb4:	08009c79 	.word	0x08009c79
 8009cb8:	08009c79 	.word	0x08009c79
 8009cbc:	08009e0b 	.word	0x08009e0b
 8009cc0:	08009d2d 	.word	0x08009d2d
 8009cc4:	08009ded 	.word	0x08009ded
 8009cc8:	08009c79 	.word	0x08009c79
 8009ccc:	08009c79 	.word	0x08009c79
 8009cd0:	08009e2d 	.word	0x08009e2d
 8009cd4:	08009c79 	.word	0x08009c79
 8009cd8:	08009d2d 	.word	0x08009d2d
 8009cdc:	08009c79 	.word	0x08009c79
 8009ce0:	08009c79 	.word	0x08009c79
 8009ce4:	08009df5 	.word	0x08009df5
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	1d1a      	adds	r2, r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e0a4      	b.n	8009e46 <_printf_i+0x1f6>
 8009cfc:	6820      	ldr	r0, [r4, #0]
 8009cfe:	6829      	ldr	r1, [r5, #0]
 8009d00:	0606      	lsls	r6, r0, #24
 8009d02:	f101 0304 	add.w	r3, r1, #4
 8009d06:	d50a      	bpl.n	8009d1e <_printf_i+0xce>
 8009d08:	680e      	ldr	r6, [r1, #0]
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	da03      	bge.n	8009d18 <_printf_i+0xc8>
 8009d10:	232d      	movs	r3, #45	; 0x2d
 8009d12:	4276      	negs	r6, r6
 8009d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d18:	230a      	movs	r3, #10
 8009d1a:	485e      	ldr	r0, [pc, #376]	; (8009e94 <_printf_i+0x244>)
 8009d1c:	e019      	b.n	8009d52 <_printf_i+0x102>
 8009d1e:	680e      	ldr	r6, [r1, #0]
 8009d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	bf18      	it	ne
 8009d28:	b236      	sxthne	r6, r6
 8009d2a:	e7ef      	b.n	8009d0c <_printf_i+0xbc>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	6820      	ldr	r0, [r4, #0]
 8009d30:	1d19      	adds	r1, r3, #4
 8009d32:	6029      	str	r1, [r5, #0]
 8009d34:	0601      	lsls	r1, r0, #24
 8009d36:	d501      	bpl.n	8009d3c <_printf_i+0xec>
 8009d38:	681e      	ldr	r6, [r3, #0]
 8009d3a:	e002      	b.n	8009d42 <_printf_i+0xf2>
 8009d3c:	0646      	lsls	r6, r0, #25
 8009d3e:	d5fb      	bpl.n	8009d38 <_printf_i+0xe8>
 8009d40:	881e      	ldrh	r6, [r3, #0]
 8009d42:	2f6f      	cmp	r7, #111	; 0x6f
 8009d44:	bf0c      	ite	eq
 8009d46:	2308      	moveq	r3, #8
 8009d48:	230a      	movne	r3, #10
 8009d4a:	4852      	ldr	r0, [pc, #328]	; (8009e94 <_printf_i+0x244>)
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d52:	6865      	ldr	r5, [r4, #4]
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	bfa8      	it	ge
 8009d58:	6821      	ldrge	r1, [r4, #0]
 8009d5a:	60a5      	str	r5, [r4, #8]
 8009d5c:	bfa4      	itt	ge
 8009d5e:	f021 0104 	bicge.w	r1, r1, #4
 8009d62:	6021      	strge	r1, [r4, #0]
 8009d64:	b90e      	cbnz	r6, 8009d6a <_printf_i+0x11a>
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	d04d      	beq.n	8009e06 <_printf_i+0x1b6>
 8009d6a:	4615      	mov	r5, r2
 8009d6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d70:	fb03 6711 	mls	r7, r3, r1, r6
 8009d74:	5dc7      	ldrb	r7, [r0, r7]
 8009d76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d7a:	4637      	mov	r7, r6
 8009d7c:	42bb      	cmp	r3, r7
 8009d7e:	460e      	mov	r6, r1
 8009d80:	d9f4      	bls.n	8009d6c <_printf_i+0x11c>
 8009d82:	2b08      	cmp	r3, #8
 8009d84:	d10b      	bne.n	8009d9e <_printf_i+0x14e>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	07de      	lsls	r6, r3, #31
 8009d8a:	d508      	bpl.n	8009d9e <_printf_i+0x14e>
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	6861      	ldr	r1, [r4, #4]
 8009d90:	4299      	cmp	r1, r3
 8009d92:	bfde      	ittt	le
 8009d94:	2330      	movle	r3, #48	; 0x30
 8009d96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d9a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d9e:	1b52      	subs	r2, r2, r5
 8009da0:	6122      	str	r2, [r4, #16]
 8009da2:	464b      	mov	r3, r9
 8009da4:	4621      	mov	r1, r4
 8009da6:	4640      	mov	r0, r8
 8009da8:	f8cd a000 	str.w	sl, [sp]
 8009dac:	aa03      	add	r2, sp, #12
 8009dae:	f7ff fedf 	bl	8009b70 <_printf_common>
 8009db2:	3001      	adds	r0, #1
 8009db4:	d14c      	bne.n	8009e50 <_printf_i+0x200>
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dba:	b004      	add	sp, #16
 8009dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc0:	4834      	ldr	r0, [pc, #208]	; (8009e94 <_printf_i+0x244>)
 8009dc2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dc6:	6829      	ldr	r1, [r5, #0]
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dce:	6029      	str	r1, [r5, #0]
 8009dd0:	061d      	lsls	r5, r3, #24
 8009dd2:	d514      	bpl.n	8009dfe <_printf_i+0x1ae>
 8009dd4:	07df      	lsls	r7, r3, #31
 8009dd6:	bf44      	itt	mi
 8009dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8009ddc:	6023      	strmi	r3, [r4, #0]
 8009dde:	b91e      	cbnz	r6, 8009de8 <_printf_i+0x198>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	f023 0320 	bic.w	r3, r3, #32
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	2310      	movs	r3, #16
 8009dea:	e7af      	b.n	8009d4c <_printf_i+0xfc>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	f043 0320 	orr.w	r3, r3, #32
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	2378      	movs	r3, #120	; 0x78
 8009df6:	4828      	ldr	r0, [pc, #160]	; (8009e98 <_printf_i+0x248>)
 8009df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dfc:	e7e3      	b.n	8009dc6 <_printf_i+0x176>
 8009dfe:	0659      	lsls	r1, r3, #25
 8009e00:	bf48      	it	mi
 8009e02:	b2b6      	uxthmi	r6, r6
 8009e04:	e7e6      	b.n	8009dd4 <_printf_i+0x184>
 8009e06:	4615      	mov	r5, r2
 8009e08:	e7bb      	b.n	8009d82 <_printf_i+0x132>
 8009e0a:	682b      	ldr	r3, [r5, #0]
 8009e0c:	6826      	ldr	r6, [r4, #0]
 8009e0e:	1d18      	adds	r0, r3, #4
 8009e10:	6961      	ldr	r1, [r4, #20]
 8009e12:	6028      	str	r0, [r5, #0]
 8009e14:	0635      	lsls	r5, r6, #24
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	d501      	bpl.n	8009e1e <_printf_i+0x1ce>
 8009e1a:	6019      	str	r1, [r3, #0]
 8009e1c:	e002      	b.n	8009e24 <_printf_i+0x1d4>
 8009e1e:	0670      	lsls	r0, r6, #25
 8009e20:	d5fb      	bpl.n	8009e1a <_printf_i+0x1ca>
 8009e22:	8019      	strh	r1, [r3, #0]
 8009e24:	2300      	movs	r3, #0
 8009e26:	4615      	mov	r5, r2
 8009e28:	6123      	str	r3, [r4, #16]
 8009e2a:	e7ba      	b.n	8009da2 <_printf_i+0x152>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	2100      	movs	r1, #0
 8009e30:	1d1a      	adds	r2, r3, #4
 8009e32:	602a      	str	r2, [r5, #0]
 8009e34:	681d      	ldr	r5, [r3, #0]
 8009e36:	6862      	ldr	r2, [r4, #4]
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f000 fed7 	bl	800abec <memchr>
 8009e3e:	b108      	cbz	r0, 8009e44 <_printf_i+0x1f4>
 8009e40:	1b40      	subs	r0, r0, r5
 8009e42:	6060      	str	r0, [r4, #4]
 8009e44:	6863      	ldr	r3, [r4, #4]
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e4e:	e7a8      	b.n	8009da2 <_printf_i+0x152>
 8009e50:	462a      	mov	r2, r5
 8009e52:	4649      	mov	r1, r9
 8009e54:	4640      	mov	r0, r8
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	47d0      	blx	sl
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d0ab      	beq.n	8009db6 <_printf_i+0x166>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	079b      	lsls	r3, r3, #30
 8009e62:	d413      	bmi.n	8009e8c <_printf_i+0x23c>
 8009e64:	68e0      	ldr	r0, [r4, #12]
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	4298      	cmp	r0, r3
 8009e6a:	bfb8      	it	lt
 8009e6c:	4618      	movlt	r0, r3
 8009e6e:	e7a4      	b.n	8009dba <_printf_i+0x16a>
 8009e70:	2301      	movs	r3, #1
 8009e72:	4632      	mov	r2, r6
 8009e74:	4649      	mov	r1, r9
 8009e76:	4640      	mov	r0, r8
 8009e78:	47d0      	blx	sl
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d09b      	beq.n	8009db6 <_printf_i+0x166>
 8009e7e:	3501      	adds	r5, #1
 8009e80:	68e3      	ldr	r3, [r4, #12]
 8009e82:	9903      	ldr	r1, [sp, #12]
 8009e84:	1a5b      	subs	r3, r3, r1
 8009e86:	42ab      	cmp	r3, r5
 8009e88:	dcf2      	bgt.n	8009e70 <_printf_i+0x220>
 8009e8a:	e7eb      	b.n	8009e64 <_printf_i+0x214>
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	f104 0619 	add.w	r6, r4, #25
 8009e92:	e7f5      	b.n	8009e80 <_printf_i+0x230>
 8009e94:	0800cace 	.word	0x0800cace
 8009e98:	0800cadf 	.word	0x0800cadf

08009e9c <siprintf>:
 8009e9c:	b40e      	push	{r1, r2, r3}
 8009e9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ea2:	b500      	push	{lr}
 8009ea4:	b09c      	sub	sp, #112	; 0x70
 8009ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ea8:	9002      	str	r0, [sp, #8]
 8009eaa:	9006      	str	r0, [sp, #24]
 8009eac:	9107      	str	r1, [sp, #28]
 8009eae:	9104      	str	r1, [sp, #16]
 8009eb0:	4808      	ldr	r0, [pc, #32]	; (8009ed4 <siprintf+0x38>)
 8009eb2:	4909      	ldr	r1, [pc, #36]	; (8009ed8 <siprintf+0x3c>)
 8009eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb8:	9105      	str	r1, [sp, #20]
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	a902      	add	r1, sp, #8
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	f001 fb7e 	bl	800b5c0 <_svfiprintf_r>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	9b02      	ldr	r3, [sp, #8]
 8009ec8:	701a      	strb	r2, [r3, #0]
 8009eca:	b01c      	add	sp, #112	; 0x70
 8009ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed0:	b003      	add	sp, #12
 8009ed2:	4770      	bx	lr
 8009ed4:	200000b8 	.word	0x200000b8
 8009ed8:	ffff0208 	.word	0xffff0208

08009edc <quorem>:
 8009edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	6903      	ldr	r3, [r0, #16]
 8009ee2:	690c      	ldr	r4, [r1, #16]
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	f2c0 8082 	blt.w	8009ff0 <quorem+0x114>
 8009eec:	3c01      	subs	r4, #1
 8009eee:	f100 0514 	add.w	r5, r0, #20
 8009ef2:	f101 0814 	add.w	r8, r1, #20
 8009ef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f04:	3301      	adds	r3, #1
 8009f06:	429a      	cmp	r2, r3
 8009f08:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f14:	d331      	bcc.n	8009f7a <quorem+0x9e>
 8009f16:	f04f 0e00 	mov.w	lr, #0
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	46ac      	mov	ip, r5
 8009f1e:	46f2      	mov	sl, lr
 8009f20:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f24:	b293      	uxth	r3, r2
 8009f26:	fb06 e303 	mla	r3, r6, r3, lr
 8009f2a:	0c12      	lsrs	r2, r2, #16
 8009f2c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	fb06 e202 	mla	r2, r6, r2, lr
 8009f36:	ebaa 0303 	sub.w	r3, sl, r3
 8009f3a:	f8dc a000 	ldr.w	sl, [ip]
 8009f3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f42:	fa1f fa8a 	uxth.w	sl, sl
 8009f46:	4453      	add	r3, sl
 8009f48:	f8dc a000 	ldr.w	sl, [ip]
 8009f4c:	b292      	uxth	r2, r2
 8009f4e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f5c:	4581      	cmp	r9, r0
 8009f5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f62:	f84c 3b04 	str.w	r3, [ip], #4
 8009f66:	d2db      	bcs.n	8009f20 <quorem+0x44>
 8009f68:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f6c:	b92b      	cbnz	r3, 8009f7a <quorem+0x9e>
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	3b04      	subs	r3, #4
 8009f72:	429d      	cmp	r5, r3
 8009f74:	461a      	mov	r2, r3
 8009f76:	d32f      	bcc.n	8009fd8 <quorem+0xfc>
 8009f78:	613c      	str	r4, [r7, #16]
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f001 f8d0 	bl	800b120 <__mcmp>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	db25      	blt.n	8009fd0 <quorem+0xf4>
 8009f84:	4628      	mov	r0, r5
 8009f86:	f04f 0c00 	mov.w	ip, #0
 8009f8a:	3601      	adds	r6, #1
 8009f8c:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f90:	f8d0 e000 	ldr.w	lr, [r0]
 8009f94:	b28b      	uxth	r3, r1
 8009f96:	ebac 0303 	sub.w	r3, ip, r3
 8009f9a:	fa1f f28e 	uxth.w	r2, lr
 8009f9e:	4413      	add	r3, r2
 8009fa0:	0c0a      	lsrs	r2, r1, #16
 8009fa2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fb0:	45c1      	cmp	r9, r8
 8009fb2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fb6:	f840 3b04 	str.w	r3, [r0], #4
 8009fba:	d2e7      	bcs.n	8009f8c <quorem+0xb0>
 8009fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fc4:	b922      	cbnz	r2, 8009fd0 <quorem+0xf4>
 8009fc6:	3b04      	subs	r3, #4
 8009fc8:	429d      	cmp	r5, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	d30a      	bcc.n	8009fe4 <quorem+0x108>
 8009fce:	613c      	str	r4, [r7, #16]
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	b003      	add	sp, #12
 8009fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd8:	6812      	ldr	r2, [r2, #0]
 8009fda:	3b04      	subs	r3, #4
 8009fdc:	2a00      	cmp	r2, #0
 8009fde:	d1cb      	bne.n	8009f78 <quorem+0x9c>
 8009fe0:	3c01      	subs	r4, #1
 8009fe2:	e7c6      	b.n	8009f72 <quorem+0x96>
 8009fe4:	6812      	ldr	r2, [r2, #0]
 8009fe6:	3b04      	subs	r3, #4
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	d1f0      	bne.n	8009fce <quorem+0xf2>
 8009fec:	3c01      	subs	r4, #1
 8009fee:	e7eb      	b.n	8009fc8 <quorem+0xec>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e7ee      	b.n	8009fd2 <quorem+0xf6>
 8009ff4:	0000      	movs	r0, r0
	...

08009ff8 <_dtoa_r>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	461f      	mov	r7, r3
 800a000:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a002:	b099      	sub	sp, #100	; 0x64
 800a004:	4605      	mov	r5, r0
 800a006:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a00a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a00e:	b974      	cbnz	r4, 800a02e <_dtoa_r+0x36>
 800a010:	2010      	movs	r0, #16
 800a012:	f000 fde3 	bl	800abdc <malloc>
 800a016:	4602      	mov	r2, r0
 800a018:	6268      	str	r0, [r5, #36]	; 0x24
 800a01a:	b920      	cbnz	r0, 800a026 <_dtoa_r+0x2e>
 800a01c:	21ea      	movs	r1, #234	; 0xea
 800a01e:	4ba8      	ldr	r3, [pc, #672]	; (800a2c0 <_dtoa_r+0x2c8>)
 800a020:	48a8      	ldr	r0, [pc, #672]	; (800a2c4 <_dtoa_r+0x2cc>)
 800a022:	f001 fbdd 	bl	800b7e0 <__assert_func>
 800a026:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a02a:	6004      	str	r4, [r0, #0]
 800a02c:	60c4      	str	r4, [r0, #12]
 800a02e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a030:	6819      	ldr	r1, [r3, #0]
 800a032:	b151      	cbz	r1, 800a04a <_dtoa_r+0x52>
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	2301      	movs	r3, #1
 800a038:	4093      	lsls	r3, r2
 800a03a:	604a      	str	r2, [r1, #4]
 800a03c:	608b      	str	r3, [r1, #8]
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 fe30 	bl	800aca4 <_Bfree>
 800a044:	2200      	movs	r2, #0
 800a046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	1e3b      	subs	r3, r7, #0
 800a04c:	bfaf      	iteee	ge
 800a04e:	2300      	movge	r3, #0
 800a050:	2201      	movlt	r2, #1
 800a052:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a056:	9305      	strlt	r3, [sp, #20]
 800a058:	bfa8      	it	ge
 800a05a:	f8c8 3000 	strge.w	r3, [r8]
 800a05e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a062:	4b99      	ldr	r3, [pc, #612]	; (800a2c8 <_dtoa_r+0x2d0>)
 800a064:	bfb8      	it	lt
 800a066:	f8c8 2000 	strlt.w	r2, [r8]
 800a06a:	ea33 0309 	bics.w	r3, r3, r9
 800a06e:	d119      	bne.n	800a0a4 <_dtoa_r+0xac>
 800a070:	f242 730f 	movw	r3, #9999	; 0x270f
 800a074:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a07c:	4333      	orrs	r3, r6
 800a07e:	f000 857f 	beq.w	800ab80 <_dtoa_r+0xb88>
 800a082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a084:	b953      	cbnz	r3, 800a09c <_dtoa_r+0xa4>
 800a086:	4b91      	ldr	r3, [pc, #580]	; (800a2cc <_dtoa_r+0x2d4>)
 800a088:	e022      	b.n	800a0d0 <_dtoa_r+0xd8>
 800a08a:	4b91      	ldr	r3, [pc, #580]	; (800a2d0 <_dtoa_r+0x2d8>)
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	3308      	adds	r3, #8
 800a090:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	9803      	ldr	r0, [sp, #12]
 800a096:	b019      	add	sp, #100	; 0x64
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	4b8b      	ldr	r3, [pc, #556]	; (800a2cc <_dtoa_r+0x2d4>)
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	3303      	adds	r3, #3
 800a0a2:	e7f5      	b.n	800a090 <_dtoa_r+0x98>
 800a0a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a0a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a0ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f7f6 fc78 	bl	80009a8 <__aeabi_dcmpeq>
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	b158      	cbz	r0, 800a0d4 <_dtoa_r+0xdc>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 8558 	beq.w	800ab7a <_dtoa_r+0xb82>
 800a0ca:	4882      	ldr	r0, [pc, #520]	; (800a2d4 <_dtoa_r+0x2dc>)
 800a0cc:	6018      	str	r0, [r3, #0]
 800a0ce:	1e43      	subs	r3, r0, #1
 800a0d0:	9303      	str	r3, [sp, #12]
 800a0d2:	e7df      	b.n	800a094 <_dtoa_r+0x9c>
 800a0d4:	ab16      	add	r3, sp, #88	; 0x58
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	ab17      	add	r3, sp, #92	; 0x5c
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	4628      	mov	r0, r5
 800a0de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0e2:	f001 f8c5 	bl	800b270 <__d2b>
 800a0e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0ea:	4683      	mov	fp, r0
 800a0ec:	2c00      	cmp	r4, #0
 800a0ee:	d07f      	beq.n	800a1f0 <_dtoa_r+0x1f8>
 800a0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a0fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a102:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a106:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a10a:	2200      	movs	r2, #0
 800a10c:	4b72      	ldr	r3, [pc, #456]	; (800a2d8 <_dtoa_r+0x2e0>)
 800a10e:	f7f6 f82b 	bl	8000168 <__aeabi_dsub>
 800a112:	a365      	add	r3, pc, #404	; (adr r3, 800a2a8 <_dtoa_r+0x2b0>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 f9de 	bl	80004d8 <__aeabi_dmul>
 800a11c:	a364      	add	r3, pc, #400	; (adr r3, 800a2b0 <_dtoa_r+0x2b8>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	f7f6 f823 	bl	800016c <__adddf3>
 800a126:	4606      	mov	r6, r0
 800a128:	4620      	mov	r0, r4
 800a12a:	460f      	mov	r7, r1
 800a12c:	f7f6 f96a 	bl	8000404 <__aeabi_i2d>
 800a130:	a361      	add	r3, pc, #388	; (adr r3, 800a2b8 <_dtoa_r+0x2c0>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f9cf 	bl	80004d8 <__aeabi_dmul>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4630      	mov	r0, r6
 800a140:	4639      	mov	r1, r7
 800a142:	f7f6 f813 	bl	800016c <__adddf3>
 800a146:	4606      	mov	r6, r0
 800a148:	460f      	mov	r7, r1
 800a14a:	f7f6 fc75 	bl	8000a38 <__aeabi_d2iz>
 800a14e:	2200      	movs	r2, #0
 800a150:	4682      	mov	sl, r0
 800a152:	2300      	movs	r3, #0
 800a154:	4630      	mov	r0, r6
 800a156:	4639      	mov	r1, r7
 800a158:	f7f6 fc30 	bl	80009bc <__aeabi_dcmplt>
 800a15c:	b148      	cbz	r0, 800a172 <_dtoa_r+0x17a>
 800a15e:	4650      	mov	r0, sl
 800a160:	f7f6 f950 	bl	8000404 <__aeabi_i2d>
 800a164:	4632      	mov	r2, r6
 800a166:	463b      	mov	r3, r7
 800a168:	f7f6 fc1e 	bl	80009a8 <__aeabi_dcmpeq>
 800a16c:	b908      	cbnz	r0, 800a172 <_dtoa_r+0x17a>
 800a16e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a172:	f1ba 0f16 	cmp.w	sl, #22
 800a176:	d858      	bhi.n	800a22a <_dtoa_r+0x232>
 800a178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a17c:	4b57      	ldr	r3, [pc, #348]	; (800a2dc <_dtoa_r+0x2e4>)
 800a17e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f6 fc19 	bl	80009bc <__aeabi_dcmplt>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d04f      	beq.n	800a22e <_dtoa_r+0x236>
 800a18e:	2300      	movs	r3, #0
 800a190:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a194:	930f      	str	r3, [sp, #60]	; 0x3c
 800a196:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a198:	1b1c      	subs	r4, r3, r4
 800a19a:	1e63      	subs	r3, r4, #1
 800a19c:	9309      	str	r3, [sp, #36]	; 0x24
 800a19e:	bf49      	itett	mi
 800a1a0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a1a4:	2300      	movpl	r3, #0
 800a1a6:	9306      	strmi	r3, [sp, #24]
 800a1a8:	2300      	movmi	r3, #0
 800a1aa:	bf54      	ite	pl
 800a1ac:	9306      	strpl	r3, [sp, #24]
 800a1ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a1b0:	f1ba 0f00 	cmp.w	sl, #0
 800a1b4:	db3d      	blt.n	800a232 <_dtoa_r+0x23a>
 800a1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a1bc:	4453      	add	r3, sl
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1c6:	2b09      	cmp	r3, #9
 800a1c8:	f200 808c 	bhi.w	800a2e4 <_dtoa_r+0x2ec>
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	bfc4      	itt	gt
 800a1d0:	3b04      	subgt	r3, #4
 800a1d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a1d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1d6:	bfc8      	it	gt
 800a1d8:	2400      	movgt	r4, #0
 800a1da:	f1a3 0302 	sub.w	r3, r3, #2
 800a1de:	bfd8      	it	le
 800a1e0:	2401      	movle	r4, #1
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	f200 808a 	bhi.w	800a2fc <_dtoa_r+0x304>
 800a1e8:	e8df f003 	tbb	[pc, r3]
 800a1ec:	5b4d4f2d 	.word	0x5b4d4f2d
 800a1f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a1f4:	441c      	add	r4, r3
 800a1f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	bfc3      	ittte	gt
 800a1fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a202:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a206:	fa09 f303 	lslgt.w	r3, r9, r3
 800a20a:	f1c3 0320 	rsble	r3, r3, #32
 800a20e:	bfc6      	itte	gt
 800a210:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a214:	4318      	orrgt	r0, r3
 800a216:	fa06 f003 	lslle.w	r0, r6, r3
 800a21a:	f7f6 f8e3 	bl	80003e4 <__aeabi_ui2d>
 800a21e:	2301      	movs	r3, #1
 800a220:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a224:	3c01      	subs	r4, #1
 800a226:	9313      	str	r3, [sp, #76]	; 0x4c
 800a228:	e76f      	b.n	800a10a <_dtoa_r+0x112>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e7b2      	b.n	800a194 <_dtoa_r+0x19c>
 800a22e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a230:	e7b1      	b.n	800a196 <_dtoa_r+0x19e>
 800a232:	9b06      	ldr	r3, [sp, #24]
 800a234:	eba3 030a 	sub.w	r3, r3, sl
 800a238:	9306      	str	r3, [sp, #24]
 800a23a:	f1ca 0300 	rsb	r3, sl, #0
 800a23e:	930a      	str	r3, [sp, #40]	; 0x28
 800a240:	2300      	movs	r3, #0
 800a242:	930e      	str	r3, [sp, #56]	; 0x38
 800a244:	e7be      	b.n	800a1c4 <_dtoa_r+0x1cc>
 800a246:	2300      	movs	r3, #0
 800a248:	930b      	str	r3, [sp, #44]	; 0x2c
 800a24a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dc58      	bgt.n	800a302 <_dtoa_r+0x30a>
 800a250:	f04f 0901 	mov.w	r9, #1
 800a254:	464b      	mov	r3, r9
 800a256:	f8cd 9020 	str.w	r9, [sp, #32]
 800a25a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a25e:	2200      	movs	r2, #0
 800a260:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a262:	6042      	str	r2, [r0, #4]
 800a264:	2204      	movs	r2, #4
 800a266:	f102 0614 	add.w	r6, r2, #20
 800a26a:	429e      	cmp	r6, r3
 800a26c:	6841      	ldr	r1, [r0, #4]
 800a26e:	d94e      	bls.n	800a30e <_dtoa_r+0x316>
 800a270:	4628      	mov	r0, r5
 800a272:	f000 fcd7 	bl	800ac24 <_Balloc>
 800a276:	9003      	str	r0, [sp, #12]
 800a278:	2800      	cmp	r0, #0
 800a27a:	d14c      	bne.n	800a316 <_dtoa_r+0x31e>
 800a27c:	4602      	mov	r2, r0
 800a27e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a282:	4b17      	ldr	r3, [pc, #92]	; (800a2e0 <_dtoa_r+0x2e8>)
 800a284:	e6cc      	b.n	800a020 <_dtoa_r+0x28>
 800a286:	2301      	movs	r3, #1
 800a288:	e7de      	b.n	800a248 <_dtoa_r+0x250>
 800a28a:	2300      	movs	r3, #0
 800a28c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a28e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a290:	eb0a 0903 	add.w	r9, sl, r3
 800a294:	f109 0301 	add.w	r3, r9, #1
 800a298:	2b01      	cmp	r3, #1
 800a29a:	9308      	str	r3, [sp, #32]
 800a29c:	bfb8      	it	lt
 800a29e:	2301      	movlt	r3, #1
 800a2a0:	e7dd      	b.n	800a25e <_dtoa_r+0x266>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7f2      	b.n	800a28c <_dtoa_r+0x294>
 800a2a6:	bf00      	nop
 800a2a8:	636f4361 	.word	0x636f4361
 800a2ac:	3fd287a7 	.word	0x3fd287a7
 800a2b0:	8b60c8b3 	.word	0x8b60c8b3
 800a2b4:	3fc68a28 	.word	0x3fc68a28
 800a2b8:	509f79fb 	.word	0x509f79fb
 800a2bc:	3fd34413 	.word	0x3fd34413
 800a2c0:	0800cafd 	.word	0x0800cafd
 800a2c4:	0800cb14 	.word	0x0800cb14
 800a2c8:	7ff00000 	.word	0x7ff00000
 800a2cc:	0800caf9 	.word	0x0800caf9
 800a2d0:	0800caf0 	.word	0x0800caf0
 800a2d4:	0800cacd 	.word	0x0800cacd
 800a2d8:	3ff80000 	.word	0x3ff80000
 800a2dc:	0800cc08 	.word	0x0800cc08
 800a2e0:	0800cb6f 	.word	0x0800cb6f
 800a2e4:	2401      	movs	r4, #1
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a2ea:	9322      	str	r3, [sp, #136]	; 0x88
 800a2ec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2312      	movs	r3, #18
 800a2f4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a2f8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a2fa:	e7b0      	b.n	800a25e <_dtoa_r+0x266>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a300:	e7f4      	b.n	800a2ec <_dtoa_r+0x2f4>
 800a302:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a306:	464b      	mov	r3, r9
 800a308:	f8cd 9020 	str.w	r9, [sp, #32]
 800a30c:	e7a7      	b.n	800a25e <_dtoa_r+0x266>
 800a30e:	3101      	adds	r1, #1
 800a310:	6041      	str	r1, [r0, #4]
 800a312:	0052      	lsls	r2, r2, #1
 800a314:	e7a7      	b.n	800a266 <_dtoa_r+0x26e>
 800a316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a318:	9a03      	ldr	r2, [sp, #12]
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	2b0e      	cmp	r3, #14
 800a320:	f200 80a8 	bhi.w	800a474 <_dtoa_r+0x47c>
 800a324:	2c00      	cmp	r4, #0
 800a326:	f000 80a5 	beq.w	800a474 <_dtoa_r+0x47c>
 800a32a:	f1ba 0f00 	cmp.w	sl, #0
 800a32e:	dd34      	ble.n	800a39a <_dtoa_r+0x3a2>
 800a330:	4a9a      	ldr	r2, [pc, #616]	; (800a59c <_dtoa_r+0x5a4>)
 800a332:	f00a 030f 	and.w	r3, sl, #15
 800a336:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a33a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a33e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a342:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a346:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a34a:	d016      	beq.n	800a37a <_dtoa_r+0x382>
 800a34c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a350:	4b93      	ldr	r3, [pc, #588]	; (800a5a0 <_dtoa_r+0x5a8>)
 800a352:	2703      	movs	r7, #3
 800a354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a358:	f7f6 f9e8 	bl	800072c <__aeabi_ddiv>
 800a35c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a360:	f004 040f 	and.w	r4, r4, #15
 800a364:	4e8e      	ldr	r6, [pc, #568]	; (800a5a0 <_dtoa_r+0x5a8>)
 800a366:	b954      	cbnz	r4, 800a37e <_dtoa_r+0x386>
 800a368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a370:	f7f6 f9dc 	bl	800072c <__aeabi_ddiv>
 800a374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a378:	e029      	b.n	800a3ce <_dtoa_r+0x3d6>
 800a37a:	2702      	movs	r7, #2
 800a37c:	e7f2      	b.n	800a364 <_dtoa_r+0x36c>
 800a37e:	07e1      	lsls	r1, r4, #31
 800a380:	d508      	bpl.n	800a394 <_dtoa_r+0x39c>
 800a382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a386:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a38a:	f7f6 f8a5 	bl	80004d8 <__aeabi_dmul>
 800a38e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a392:	3701      	adds	r7, #1
 800a394:	1064      	asrs	r4, r4, #1
 800a396:	3608      	adds	r6, #8
 800a398:	e7e5      	b.n	800a366 <_dtoa_r+0x36e>
 800a39a:	f000 80a5 	beq.w	800a4e8 <_dtoa_r+0x4f0>
 800a39e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3a2:	f1ca 0400 	rsb	r4, sl, #0
 800a3a6:	4b7d      	ldr	r3, [pc, #500]	; (800a59c <_dtoa_r+0x5a4>)
 800a3a8:	f004 020f 	and.w	r2, r4, #15
 800a3ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f6 f890 	bl	80004d8 <__aeabi_dmul>
 800a3b8:	2702      	movs	r7, #2
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3c0:	4e77      	ldr	r6, [pc, #476]	; (800a5a0 <_dtoa_r+0x5a8>)
 800a3c2:	1124      	asrs	r4, r4, #4
 800a3c4:	2c00      	cmp	r4, #0
 800a3c6:	f040 8084 	bne.w	800a4d2 <_dtoa_r+0x4da>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1d2      	bne.n	800a374 <_dtoa_r+0x37c>
 800a3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 808b 	beq.w	800a4ec <_dtoa_r+0x4f4>
 800a3d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a3da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a3de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4b6f      	ldr	r3, [pc, #444]	; (800a5a4 <_dtoa_r+0x5ac>)
 800a3e6:	f7f6 fae9 	bl	80009bc <__aeabi_dcmplt>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d07e      	beq.n	800a4ec <_dtoa_r+0x4f4>
 800a3ee:	9b08      	ldr	r3, [sp, #32]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d07b      	beq.n	800a4ec <_dtoa_r+0x4f4>
 800a3f4:	f1b9 0f00 	cmp.w	r9, #0
 800a3f8:	dd38      	ble.n	800a46c <_dtoa_r+0x474>
 800a3fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3fe:	2200      	movs	r2, #0
 800a400:	4b69      	ldr	r3, [pc, #420]	; (800a5a8 <_dtoa_r+0x5b0>)
 800a402:	f7f6 f869 	bl	80004d8 <__aeabi_dmul>
 800a406:	464c      	mov	r4, r9
 800a408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a40c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800a410:	3701      	adds	r7, #1
 800a412:	4638      	mov	r0, r7
 800a414:	f7f5 fff6 	bl	8000404 <__aeabi_i2d>
 800a418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a41c:	f7f6 f85c 	bl	80004d8 <__aeabi_dmul>
 800a420:	2200      	movs	r2, #0
 800a422:	4b62      	ldr	r3, [pc, #392]	; (800a5ac <_dtoa_r+0x5b4>)
 800a424:	f7f5 fea2 	bl	800016c <__adddf3>
 800a428:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a42c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a430:	9611      	str	r6, [sp, #68]	; 0x44
 800a432:	2c00      	cmp	r4, #0
 800a434:	d15d      	bne.n	800a4f2 <_dtoa_r+0x4fa>
 800a436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a43a:	2200      	movs	r2, #0
 800a43c:	4b5c      	ldr	r3, [pc, #368]	; (800a5b0 <_dtoa_r+0x5b8>)
 800a43e:	f7f5 fe93 	bl	8000168 <__aeabi_dsub>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a44a:	4633      	mov	r3, r6
 800a44c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a44e:	f7f6 fad3 	bl	80009f8 <__aeabi_dcmpgt>
 800a452:	2800      	cmp	r0, #0
 800a454:	f040 829c 	bne.w	800a990 <_dtoa_r+0x998>
 800a458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a45c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a45e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a462:	f7f6 faab 	bl	80009bc <__aeabi_dcmplt>
 800a466:	2800      	cmp	r0, #0
 800a468:	f040 8290 	bne.w	800a98c <_dtoa_r+0x994>
 800a46c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a470:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a476:	2b00      	cmp	r3, #0
 800a478:	f2c0 8152 	blt.w	800a720 <_dtoa_r+0x728>
 800a47c:	f1ba 0f0e 	cmp.w	sl, #14
 800a480:	f300 814e 	bgt.w	800a720 <_dtoa_r+0x728>
 800a484:	4b45      	ldr	r3, [pc, #276]	; (800a59c <_dtoa_r+0x5a4>)
 800a486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a48a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a48e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a494:	2b00      	cmp	r3, #0
 800a496:	f280 80db 	bge.w	800a650 <_dtoa_r+0x658>
 800a49a:	9b08      	ldr	r3, [sp, #32]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f300 80d7 	bgt.w	800a650 <_dtoa_r+0x658>
 800a4a2:	f040 8272 	bne.w	800a98a <_dtoa_r+0x992>
 800a4a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	4b40      	ldr	r3, [pc, #256]	; (800a5b0 <_dtoa_r+0x5b8>)
 800a4ae:	f7f6 f813 	bl	80004d8 <__aeabi_dmul>
 800a4b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4b6:	f7f6 fa95 	bl	80009e4 <__aeabi_dcmpge>
 800a4ba:	9c08      	ldr	r4, [sp, #32]
 800a4bc:	4626      	mov	r6, r4
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	f040 8248 	bne.w	800a954 <_dtoa_r+0x95c>
 800a4c4:	2331      	movs	r3, #49	; 0x31
 800a4c6:	9f03      	ldr	r7, [sp, #12]
 800a4c8:	f10a 0a01 	add.w	sl, sl, #1
 800a4cc:	f807 3b01 	strb.w	r3, [r7], #1
 800a4d0:	e244      	b.n	800a95c <_dtoa_r+0x964>
 800a4d2:	07e2      	lsls	r2, r4, #31
 800a4d4:	d505      	bpl.n	800a4e2 <_dtoa_r+0x4ea>
 800a4d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4da:	f7f5 fffd 	bl	80004d8 <__aeabi_dmul>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	3701      	adds	r7, #1
 800a4e2:	1064      	asrs	r4, r4, #1
 800a4e4:	3608      	adds	r6, #8
 800a4e6:	e76d      	b.n	800a3c4 <_dtoa_r+0x3cc>
 800a4e8:	2702      	movs	r7, #2
 800a4ea:	e770      	b.n	800a3ce <_dtoa_r+0x3d6>
 800a4ec:	46d0      	mov	r8, sl
 800a4ee:	9c08      	ldr	r4, [sp, #32]
 800a4f0:	e78f      	b.n	800a412 <_dtoa_r+0x41a>
 800a4f2:	9903      	ldr	r1, [sp, #12]
 800a4f4:	4b29      	ldr	r3, [pc, #164]	; (800a59c <_dtoa_r+0x5a4>)
 800a4f6:	4421      	add	r1, r4
 800a4f8:	9112      	str	r1, [sp, #72]	; 0x48
 800a4fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a500:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a504:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a508:	2900      	cmp	r1, #0
 800a50a:	d055      	beq.n	800a5b8 <_dtoa_r+0x5c0>
 800a50c:	2000      	movs	r0, #0
 800a50e:	4929      	ldr	r1, [pc, #164]	; (800a5b4 <_dtoa_r+0x5bc>)
 800a510:	f7f6 f90c 	bl	800072c <__aeabi_ddiv>
 800a514:	463b      	mov	r3, r7
 800a516:	4632      	mov	r2, r6
 800a518:	f7f5 fe26 	bl	8000168 <__aeabi_dsub>
 800a51c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a520:	9f03      	ldr	r7, [sp, #12]
 800a522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a526:	f7f6 fa87 	bl	8000a38 <__aeabi_d2iz>
 800a52a:	4604      	mov	r4, r0
 800a52c:	f7f5 ff6a 	bl	8000404 <__aeabi_i2d>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a538:	f7f5 fe16 	bl	8000168 <__aeabi_dsub>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	3430      	adds	r4, #48	; 0x30
 800a542:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a54a:	f807 4b01 	strb.w	r4, [r7], #1
 800a54e:	f7f6 fa35 	bl	80009bc <__aeabi_dcmplt>
 800a552:	2800      	cmp	r0, #0
 800a554:	d174      	bne.n	800a640 <_dtoa_r+0x648>
 800a556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a55a:	2000      	movs	r0, #0
 800a55c:	4911      	ldr	r1, [pc, #68]	; (800a5a4 <_dtoa_r+0x5ac>)
 800a55e:	f7f5 fe03 	bl	8000168 <__aeabi_dsub>
 800a562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a566:	f7f6 fa29 	bl	80009bc <__aeabi_dcmplt>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	f040 80b7 	bne.w	800a6de <_dtoa_r+0x6e6>
 800a570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a572:	429f      	cmp	r7, r3
 800a574:	f43f af7a 	beq.w	800a46c <_dtoa_r+0x474>
 800a578:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a57c:	2200      	movs	r2, #0
 800a57e:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <_dtoa_r+0x5b0>)
 800a580:	f7f5 ffaa 	bl	80004d8 <__aeabi_dmul>
 800a584:	2200      	movs	r2, #0
 800a586:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a58a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a58e:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <_dtoa_r+0x5b0>)
 800a590:	f7f5 ffa2 	bl	80004d8 <__aeabi_dmul>
 800a594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a598:	e7c3      	b.n	800a522 <_dtoa_r+0x52a>
 800a59a:	bf00      	nop
 800a59c:	0800cc08 	.word	0x0800cc08
 800a5a0:	0800cbe0 	.word	0x0800cbe0
 800a5a4:	3ff00000 	.word	0x3ff00000
 800a5a8:	40240000 	.word	0x40240000
 800a5ac:	401c0000 	.word	0x401c0000
 800a5b0:	40140000 	.word	0x40140000
 800a5b4:	3fe00000 	.word	0x3fe00000
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f5 ff8c 	bl	80004d8 <__aeabi_dmul>
 800a5c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5c6:	9c03      	ldr	r4, [sp, #12]
 800a5c8:	9314      	str	r3, [sp, #80]	; 0x50
 800a5ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ce:	f7f6 fa33 	bl	8000a38 <__aeabi_d2iz>
 800a5d2:	9015      	str	r0, [sp, #84]	; 0x54
 800a5d4:	f7f5 ff16 	bl	8000404 <__aeabi_i2d>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5e0:	f7f5 fdc2 	bl	8000168 <__aeabi_dsub>
 800a5e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	3330      	adds	r3, #48	; 0x30
 800a5ea:	f804 3b01 	strb.w	r3, [r4], #1
 800a5ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5f0:	460f      	mov	r7, r1
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	f04f 0200 	mov.w	r2, #0
 800a5f8:	d124      	bne.n	800a644 <_dtoa_r+0x64c>
 800a5fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5fe:	4bb0      	ldr	r3, [pc, #704]	; (800a8c0 <_dtoa_r+0x8c8>)
 800a600:	f7f5 fdb4 	bl	800016c <__adddf3>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4630      	mov	r0, r6
 800a60a:	4639      	mov	r1, r7
 800a60c:	f7f6 f9f4 	bl	80009f8 <__aeabi_dcmpgt>
 800a610:	2800      	cmp	r0, #0
 800a612:	d163      	bne.n	800a6dc <_dtoa_r+0x6e4>
 800a614:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a618:	2000      	movs	r0, #0
 800a61a:	49a9      	ldr	r1, [pc, #676]	; (800a8c0 <_dtoa_r+0x8c8>)
 800a61c:	f7f5 fda4 	bl	8000168 <__aeabi_dsub>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f6 f9c8 	bl	80009bc <__aeabi_dcmplt>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f43f af1d 	beq.w	800a46c <_dtoa_r+0x474>
 800a632:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a634:	1e7b      	subs	r3, r7, #1
 800a636:	9314      	str	r3, [sp, #80]	; 0x50
 800a638:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a63c:	2b30      	cmp	r3, #48	; 0x30
 800a63e:	d0f8      	beq.n	800a632 <_dtoa_r+0x63a>
 800a640:	46c2      	mov	sl, r8
 800a642:	e03b      	b.n	800a6bc <_dtoa_r+0x6c4>
 800a644:	4b9f      	ldr	r3, [pc, #636]	; (800a8c4 <_dtoa_r+0x8cc>)
 800a646:	f7f5 ff47 	bl	80004d8 <__aeabi_dmul>
 800a64a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a64e:	e7bc      	b.n	800a5ca <_dtoa_r+0x5d2>
 800a650:	9f03      	ldr	r7, [sp, #12]
 800a652:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f6 f865 	bl	800072c <__aeabi_ddiv>
 800a662:	f7f6 f9e9 	bl	8000a38 <__aeabi_d2iz>
 800a666:	4604      	mov	r4, r0
 800a668:	f7f5 fecc 	bl	8000404 <__aeabi_i2d>
 800a66c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a670:	f7f5 ff32 	bl	80004d8 <__aeabi_dmul>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4640      	mov	r0, r8
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f5 fd74 	bl	8000168 <__aeabi_dsub>
 800a680:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a684:	f807 6b01 	strb.w	r6, [r7], #1
 800a688:	9e03      	ldr	r6, [sp, #12]
 800a68a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a68e:	1bbe      	subs	r6, r7, r6
 800a690:	45b4      	cmp	ip, r6
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	d136      	bne.n	800a706 <_dtoa_r+0x70e>
 800a698:	f7f5 fd68 	bl	800016c <__adddf3>
 800a69c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6a0:	4680      	mov	r8, r0
 800a6a2:	4689      	mov	r9, r1
 800a6a4:	f7f6 f9a8 	bl	80009f8 <__aeabi_dcmpgt>
 800a6a8:	bb58      	cbnz	r0, 800a702 <_dtoa_r+0x70a>
 800a6aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	f7f6 f979 	bl	80009a8 <__aeabi_dcmpeq>
 800a6b6:	b108      	cbz	r0, 800a6bc <_dtoa_r+0x6c4>
 800a6b8:	07e1      	lsls	r1, r4, #31
 800a6ba:	d422      	bmi.n	800a702 <_dtoa_r+0x70a>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	4659      	mov	r1, fp
 800a6c0:	f000 faf0 	bl	800aca4 <_Bfree>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	703b      	strb	r3, [r7, #0]
 800a6c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a6ca:	f10a 0001 	add.w	r0, sl, #1
 800a6ce:	6018      	str	r0, [r3, #0]
 800a6d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f43f acde 	beq.w	800a094 <_dtoa_r+0x9c>
 800a6d8:	601f      	str	r7, [r3, #0]
 800a6da:	e4db      	b.n	800a094 <_dtoa_r+0x9c>
 800a6dc:	4627      	mov	r7, r4
 800a6de:	463b      	mov	r3, r7
 800a6e0:	461f      	mov	r7, r3
 800a6e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6e6:	2a39      	cmp	r2, #57	; 0x39
 800a6e8:	d107      	bne.n	800a6fa <_dtoa_r+0x702>
 800a6ea:	9a03      	ldr	r2, [sp, #12]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d1f7      	bne.n	800a6e0 <_dtoa_r+0x6e8>
 800a6f0:	2230      	movs	r2, #48	; 0x30
 800a6f2:	9903      	ldr	r1, [sp, #12]
 800a6f4:	f108 0801 	add.w	r8, r8, #1
 800a6f8:	700a      	strb	r2, [r1, #0]
 800a6fa:	781a      	ldrb	r2, [r3, #0]
 800a6fc:	3201      	adds	r2, #1
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	e79e      	b.n	800a640 <_dtoa_r+0x648>
 800a702:	46d0      	mov	r8, sl
 800a704:	e7eb      	b.n	800a6de <_dtoa_r+0x6e6>
 800a706:	2200      	movs	r2, #0
 800a708:	4b6e      	ldr	r3, [pc, #440]	; (800a8c4 <_dtoa_r+0x8cc>)
 800a70a:	f7f5 fee5 	bl	80004d8 <__aeabi_dmul>
 800a70e:	2200      	movs	r2, #0
 800a710:	2300      	movs	r3, #0
 800a712:	4680      	mov	r8, r0
 800a714:	4689      	mov	r9, r1
 800a716:	f7f6 f947 	bl	80009a8 <__aeabi_dcmpeq>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d09b      	beq.n	800a656 <_dtoa_r+0x65e>
 800a71e:	e7cd      	b.n	800a6bc <_dtoa_r+0x6c4>
 800a720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a722:	2a00      	cmp	r2, #0
 800a724:	f000 80d0 	beq.w	800a8c8 <_dtoa_r+0x8d0>
 800a728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a72a:	2a01      	cmp	r2, #1
 800a72c:	f300 80ae 	bgt.w	800a88c <_dtoa_r+0x894>
 800a730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a732:	2a00      	cmp	r2, #0
 800a734:	f000 80a6 	beq.w	800a884 <_dtoa_r+0x88c>
 800a738:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a73c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a73e:	9f06      	ldr	r7, [sp, #24]
 800a740:	9a06      	ldr	r2, [sp, #24]
 800a742:	2101      	movs	r1, #1
 800a744:	441a      	add	r2, r3
 800a746:	9206      	str	r2, [sp, #24]
 800a748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a74a:	4628      	mov	r0, r5
 800a74c:	441a      	add	r2, r3
 800a74e:	9209      	str	r2, [sp, #36]	; 0x24
 800a750:	f000 fb5e 	bl	800ae10 <__i2b>
 800a754:	4606      	mov	r6, r0
 800a756:	2f00      	cmp	r7, #0
 800a758:	dd0c      	ble.n	800a774 <_dtoa_r+0x77c>
 800a75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dd09      	ble.n	800a774 <_dtoa_r+0x77c>
 800a760:	42bb      	cmp	r3, r7
 800a762:	bfa8      	it	ge
 800a764:	463b      	movge	r3, r7
 800a766:	9a06      	ldr	r2, [sp, #24]
 800a768:	1aff      	subs	r7, r7, r3
 800a76a:	1ad2      	subs	r2, r2, r3
 800a76c:	9206      	str	r2, [sp, #24]
 800a76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	9309      	str	r3, [sp, #36]	; 0x24
 800a774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a776:	b1f3      	cbz	r3, 800a7b6 <_dtoa_r+0x7be>
 800a778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 80a8 	beq.w	800a8d0 <_dtoa_r+0x8d8>
 800a780:	2c00      	cmp	r4, #0
 800a782:	dd10      	ble.n	800a7a6 <_dtoa_r+0x7ae>
 800a784:	4631      	mov	r1, r6
 800a786:	4622      	mov	r2, r4
 800a788:	4628      	mov	r0, r5
 800a78a:	f000 fbff 	bl	800af8c <__pow5mult>
 800a78e:	465a      	mov	r2, fp
 800a790:	4601      	mov	r1, r0
 800a792:	4606      	mov	r6, r0
 800a794:	4628      	mov	r0, r5
 800a796:	f000 fb51 	bl	800ae3c <__multiply>
 800a79a:	4680      	mov	r8, r0
 800a79c:	4659      	mov	r1, fp
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 fa80 	bl	800aca4 <_Bfree>
 800a7a4:	46c3      	mov	fp, r8
 800a7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a8:	1b1a      	subs	r2, r3, r4
 800a7aa:	d004      	beq.n	800a7b6 <_dtoa_r+0x7be>
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 fbec 	bl	800af8c <__pow5mult>
 800a7b4:	4683      	mov	fp, r0
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f000 fb29 	bl	800ae10 <__i2b>
 800a7be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f340 8086 	ble.w	800a8d4 <_dtoa_r+0x8dc>
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 fbdd 	bl	800af8c <__pow5mult>
 800a7d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	dd7f      	ble.n	800a8da <_dtoa_r+0x8e2>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	6923      	ldr	r3, [r4, #16]
 800a7e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7e4:	6918      	ldr	r0, [r3, #16]
 800a7e6:	f000 fac5 	bl	800ad74 <__hi0bits>
 800a7ea:	f1c0 0020 	rsb	r0, r0, #32
 800a7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f0:	4418      	add	r0, r3
 800a7f2:	f010 001f 	ands.w	r0, r0, #31
 800a7f6:	f000 8092 	beq.w	800a91e <_dtoa_r+0x926>
 800a7fa:	f1c0 0320 	rsb	r3, r0, #32
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	f340 808a 	ble.w	800a918 <_dtoa_r+0x920>
 800a804:	f1c0 001c 	rsb	r0, r0, #28
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	4407      	add	r7, r0
 800a80c:	4403      	add	r3, r0
 800a80e:	9306      	str	r3, [sp, #24]
 800a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a812:	4403      	add	r3, r0
 800a814:	9309      	str	r3, [sp, #36]	; 0x24
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd05      	ble.n	800a828 <_dtoa_r+0x830>
 800a81c:	4659      	mov	r1, fp
 800a81e:	461a      	mov	r2, r3
 800a820:	4628      	mov	r0, r5
 800a822:	f000 fc0d 	bl	800b040 <__lshift>
 800a826:	4683      	mov	fp, r0
 800a828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dd05      	ble.n	800a83a <_dtoa_r+0x842>
 800a82e:	4621      	mov	r1, r4
 800a830:	461a      	mov	r2, r3
 800a832:	4628      	mov	r0, r5
 800a834:	f000 fc04 	bl	800b040 <__lshift>
 800a838:	4604      	mov	r4, r0
 800a83a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d070      	beq.n	800a922 <_dtoa_r+0x92a>
 800a840:	4621      	mov	r1, r4
 800a842:	4658      	mov	r0, fp
 800a844:	f000 fc6c 	bl	800b120 <__mcmp>
 800a848:	2800      	cmp	r0, #0
 800a84a:	da6a      	bge.n	800a922 <_dtoa_r+0x92a>
 800a84c:	2300      	movs	r3, #0
 800a84e:	4659      	mov	r1, fp
 800a850:	220a      	movs	r2, #10
 800a852:	4628      	mov	r0, r5
 800a854:	f000 fa48 	bl	800ace8 <__multadd>
 800a858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a85a:	4683      	mov	fp, r0
 800a85c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 8194 	beq.w	800ab8e <_dtoa_r+0xb96>
 800a866:	4631      	mov	r1, r6
 800a868:	2300      	movs	r3, #0
 800a86a:	220a      	movs	r2, #10
 800a86c:	4628      	mov	r0, r5
 800a86e:	f000 fa3b 	bl	800ace8 <__multadd>
 800a872:	f1b9 0f00 	cmp.w	r9, #0
 800a876:	4606      	mov	r6, r0
 800a878:	f300 8093 	bgt.w	800a9a2 <_dtoa_r+0x9aa>
 800a87c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a87e:	2b02      	cmp	r3, #2
 800a880:	dc57      	bgt.n	800a932 <_dtoa_r+0x93a>
 800a882:	e08e      	b.n	800a9a2 <_dtoa_r+0x9aa>
 800a884:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a88a:	e757      	b.n	800a73c <_dtoa_r+0x744>
 800a88c:	9b08      	ldr	r3, [sp, #32]
 800a88e:	1e5c      	subs	r4, r3, #1
 800a890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a892:	42a3      	cmp	r3, r4
 800a894:	bfb7      	itett	lt
 800a896:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a898:	1b1c      	subge	r4, r3, r4
 800a89a:	1ae2      	sublt	r2, r4, r3
 800a89c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a89e:	bfbe      	ittt	lt
 800a8a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a8a2:	189b      	addlt	r3, r3, r2
 800a8a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a8a6:	9b08      	ldr	r3, [sp, #32]
 800a8a8:	bfb8      	it	lt
 800a8aa:	2400      	movlt	r4, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	bfbb      	ittet	lt
 800a8b0:	9b06      	ldrlt	r3, [sp, #24]
 800a8b2:	9a08      	ldrlt	r2, [sp, #32]
 800a8b4:	9f06      	ldrge	r7, [sp, #24]
 800a8b6:	1a9f      	sublt	r7, r3, r2
 800a8b8:	bfac      	ite	ge
 800a8ba:	9b08      	ldrge	r3, [sp, #32]
 800a8bc:	2300      	movlt	r3, #0
 800a8be:	e73f      	b.n	800a740 <_dtoa_r+0x748>
 800a8c0:	3fe00000 	.word	0x3fe00000
 800a8c4:	40240000 	.word	0x40240000
 800a8c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8ca:	9f06      	ldr	r7, [sp, #24]
 800a8cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a8ce:	e742      	b.n	800a756 <_dtoa_r+0x75e>
 800a8d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8d2:	e76b      	b.n	800a7ac <_dtoa_r+0x7b4>
 800a8d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	dc19      	bgt.n	800a90e <_dtoa_r+0x916>
 800a8da:	9b04      	ldr	r3, [sp, #16]
 800a8dc:	b9bb      	cbnz	r3, 800a90e <_dtoa_r+0x916>
 800a8de:	9b05      	ldr	r3, [sp, #20]
 800a8e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8e4:	b99b      	cbnz	r3, 800a90e <_dtoa_r+0x916>
 800a8e6:	9b05      	ldr	r3, [sp, #20]
 800a8e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8ec:	0d1b      	lsrs	r3, r3, #20
 800a8ee:	051b      	lsls	r3, r3, #20
 800a8f0:	b183      	cbz	r3, 800a914 <_dtoa_r+0x91c>
 800a8f2:	f04f 0801 	mov.w	r8, #1
 800a8f6:	9b06      	ldr	r3, [sp, #24]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	9306      	str	r3, [sp, #24]
 800a8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8fe:	3301      	adds	r3, #1
 800a900:	9309      	str	r3, [sp, #36]	; 0x24
 800a902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	f47f af6a 	bne.w	800a7de <_dtoa_r+0x7e6>
 800a90a:	2001      	movs	r0, #1
 800a90c:	e76f      	b.n	800a7ee <_dtoa_r+0x7f6>
 800a90e:	f04f 0800 	mov.w	r8, #0
 800a912:	e7f6      	b.n	800a902 <_dtoa_r+0x90a>
 800a914:	4698      	mov	r8, r3
 800a916:	e7f4      	b.n	800a902 <_dtoa_r+0x90a>
 800a918:	f43f af7d 	beq.w	800a816 <_dtoa_r+0x81e>
 800a91c:	4618      	mov	r0, r3
 800a91e:	301c      	adds	r0, #28
 800a920:	e772      	b.n	800a808 <_dtoa_r+0x810>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	2b00      	cmp	r3, #0
 800a926:	dc36      	bgt.n	800a996 <_dtoa_r+0x99e>
 800a928:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	dd33      	ble.n	800a996 <_dtoa_r+0x99e>
 800a92e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a932:	f1b9 0f00 	cmp.w	r9, #0
 800a936:	d10d      	bne.n	800a954 <_dtoa_r+0x95c>
 800a938:	4621      	mov	r1, r4
 800a93a:	464b      	mov	r3, r9
 800a93c:	2205      	movs	r2, #5
 800a93e:	4628      	mov	r0, r5
 800a940:	f000 f9d2 	bl	800ace8 <__multadd>
 800a944:	4601      	mov	r1, r0
 800a946:	4604      	mov	r4, r0
 800a948:	4658      	mov	r0, fp
 800a94a:	f000 fbe9 	bl	800b120 <__mcmp>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f73f adb8 	bgt.w	800a4c4 <_dtoa_r+0x4cc>
 800a954:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a956:	9f03      	ldr	r7, [sp, #12]
 800a958:	ea6f 0a03 	mvn.w	sl, r3
 800a95c:	f04f 0800 	mov.w	r8, #0
 800a960:	4621      	mov	r1, r4
 800a962:	4628      	mov	r0, r5
 800a964:	f000 f99e 	bl	800aca4 <_Bfree>
 800a968:	2e00      	cmp	r6, #0
 800a96a:	f43f aea7 	beq.w	800a6bc <_dtoa_r+0x6c4>
 800a96e:	f1b8 0f00 	cmp.w	r8, #0
 800a972:	d005      	beq.n	800a980 <_dtoa_r+0x988>
 800a974:	45b0      	cmp	r8, r6
 800a976:	d003      	beq.n	800a980 <_dtoa_r+0x988>
 800a978:	4641      	mov	r1, r8
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 f992 	bl	800aca4 <_Bfree>
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	f000 f98e 	bl	800aca4 <_Bfree>
 800a988:	e698      	b.n	800a6bc <_dtoa_r+0x6c4>
 800a98a:	2400      	movs	r4, #0
 800a98c:	4626      	mov	r6, r4
 800a98e:	e7e1      	b.n	800a954 <_dtoa_r+0x95c>
 800a990:	46c2      	mov	sl, r8
 800a992:	4626      	mov	r6, r4
 800a994:	e596      	b.n	800a4c4 <_dtoa_r+0x4cc>
 800a996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 80fd 	beq.w	800ab9c <_dtoa_r+0xba4>
 800a9a2:	2f00      	cmp	r7, #0
 800a9a4:	dd05      	ble.n	800a9b2 <_dtoa_r+0x9ba>
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	463a      	mov	r2, r7
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 fb48 	bl	800b040 <__lshift>
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	f1b8 0f00 	cmp.w	r8, #0
 800a9b6:	d05c      	beq.n	800aa72 <_dtoa_r+0xa7a>
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	6871      	ldr	r1, [r6, #4]
 800a9bc:	f000 f932 	bl	800ac24 <_Balloc>
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	b928      	cbnz	r0, 800a9d0 <_dtoa_r+0x9d8>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9ca:	4b7f      	ldr	r3, [pc, #508]	; (800abc8 <_dtoa_r+0xbd0>)
 800a9cc:	f7ff bb28 	b.w	800a020 <_dtoa_r+0x28>
 800a9d0:	6932      	ldr	r2, [r6, #16]
 800a9d2:	f106 010c 	add.w	r1, r6, #12
 800a9d6:	3202      	adds	r2, #2
 800a9d8:	0092      	lsls	r2, r2, #2
 800a9da:	300c      	adds	r0, #12
 800a9dc:	f000 f914 	bl	800ac08 <memcpy>
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f000 fb2b 	bl	800b040 <__lshift>
 800a9ea:	46b0      	mov	r8, r6
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	9308      	str	r3, [sp, #32]
 800a9f4:	9b03      	ldr	r3, [sp, #12]
 800a9f6:	444b      	add	r3, r9
 800a9f8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9fa:	9b04      	ldr	r3, [sp, #16]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	9309      	str	r3, [sp, #36]	; 0x24
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	4621      	mov	r1, r4
 800aa06:	3b01      	subs	r3, #1
 800aa08:	4658      	mov	r0, fp
 800aa0a:	9304      	str	r3, [sp, #16]
 800aa0c:	f7ff fa66 	bl	8009edc <quorem>
 800aa10:	4603      	mov	r3, r0
 800aa12:	4641      	mov	r1, r8
 800aa14:	3330      	adds	r3, #48	; 0x30
 800aa16:	9006      	str	r0, [sp, #24]
 800aa18:	4658      	mov	r0, fp
 800aa1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa1c:	f000 fb80 	bl	800b120 <__mcmp>
 800aa20:	4632      	mov	r2, r6
 800aa22:	4681      	mov	r9, r0
 800aa24:	4621      	mov	r1, r4
 800aa26:	4628      	mov	r0, r5
 800aa28:	f000 fb96 	bl	800b158 <__mdiff>
 800aa2c:	68c2      	ldr	r2, [r0, #12]
 800aa2e:	4607      	mov	r7, r0
 800aa30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa32:	bb02      	cbnz	r2, 800aa76 <_dtoa_r+0xa7e>
 800aa34:	4601      	mov	r1, r0
 800aa36:	4658      	mov	r0, fp
 800aa38:	f000 fb72 	bl	800b120 <__mcmp>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa40:	4639      	mov	r1, r7
 800aa42:	4628      	mov	r0, r5
 800aa44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aa48:	f000 f92c 	bl	800aca4 <_Bfree>
 800aa4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa50:	9f08      	ldr	r7, [sp, #32]
 800aa52:	ea43 0102 	orr.w	r1, r3, r2
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5c:	d10d      	bne.n	800aa7a <_dtoa_r+0xa82>
 800aa5e:	2b39      	cmp	r3, #57	; 0x39
 800aa60:	d029      	beq.n	800aab6 <_dtoa_r+0xabe>
 800aa62:	f1b9 0f00 	cmp.w	r9, #0
 800aa66:	dd01      	ble.n	800aa6c <_dtoa_r+0xa74>
 800aa68:	9b06      	ldr	r3, [sp, #24]
 800aa6a:	3331      	adds	r3, #49	; 0x31
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	7013      	strb	r3, [r2, #0]
 800aa70:	e776      	b.n	800a960 <_dtoa_r+0x968>
 800aa72:	4630      	mov	r0, r6
 800aa74:	e7b9      	b.n	800a9ea <_dtoa_r+0x9f2>
 800aa76:	2201      	movs	r2, #1
 800aa78:	e7e2      	b.n	800aa40 <_dtoa_r+0xa48>
 800aa7a:	f1b9 0f00 	cmp.w	r9, #0
 800aa7e:	db06      	blt.n	800aa8e <_dtoa_r+0xa96>
 800aa80:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aa82:	ea41 0909 	orr.w	r9, r1, r9
 800aa86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa88:	ea59 0101 	orrs.w	r1, r9, r1
 800aa8c:	d120      	bne.n	800aad0 <_dtoa_r+0xad8>
 800aa8e:	2a00      	cmp	r2, #0
 800aa90:	ddec      	ble.n	800aa6c <_dtoa_r+0xa74>
 800aa92:	4659      	mov	r1, fp
 800aa94:	2201      	movs	r2, #1
 800aa96:	4628      	mov	r0, r5
 800aa98:	9308      	str	r3, [sp, #32]
 800aa9a:	f000 fad1 	bl	800b040 <__lshift>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4683      	mov	fp, r0
 800aaa2:	f000 fb3d 	bl	800b120 <__mcmp>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	dc02      	bgt.n	800aab2 <_dtoa_r+0xaba>
 800aaac:	d1de      	bne.n	800aa6c <_dtoa_r+0xa74>
 800aaae:	07da      	lsls	r2, r3, #31
 800aab0:	d5dc      	bpl.n	800aa6c <_dtoa_r+0xa74>
 800aab2:	2b39      	cmp	r3, #57	; 0x39
 800aab4:	d1d8      	bne.n	800aa68 <_dtoa_r+0xa70>
 800aab6:	2339      	movs	r3, #57	; 0x39
 800aab8:	9a04      	ldr	r2, [sp, #16]
 800aaba:	7013      	strb	r3, [r2, #0]
 800aabc:	463b      	mov	r3, r7
 800aabe:	461f      	mov	r7, r3
 800aac0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	2a39      	cmp	r2, #57	; 0x39
 800aac8:	d050      	beq.n	800ab6c <_dtoa_r+0xb74>
 800aaca:	3201      	adds	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	e747      	b.n	800a960 <_dtoa_r+0x968>
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	dd03      	ble.n	800aadc <_dtoa_r+0xae4>
 800aad4:	2b39      	cmp	r3, #57	; 0x39
 800aad6:	d0ee      	beq.n	800aab6 <_dtoa_r+0xabe>
 800aad8:	3301      	adds	r3, #1
 800aada:	e7c7      	b.n	800aa6c <_dtoa_r+0xa74>
 800aadc:	9a08      	ldr	r2, [sp, #32]
 800aade:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aae0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aae4:	428a      	cmp	r2, r1
 800aae6:	d02a      	beq.n	800ab3e <_dtoa_r+0xb46>
 800aae8:	4659      	mov	r1, fp
 800aaea:	2300      	movs	r3, #0
 800aaec:	220a      	movs	r2, #10
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 f8fa 	bl	800ace8 <__multadd>
 800aaf4:	45b0      	cmp	r8, r6
 800aaf6:	4683      	mov	fp, r0
 800aaf8:	f04f 0300 	mov.w	r3, #0
 800aafc:	f04f 020a 	mov.w	r2, #10
 800ab00:	4641      	mov	r1, r8
 800ab02:	4628      	mov	r0, r5
 800ab04:	d107      	bne.n	800ab16 <_dtoa_r+0xb1e>
 800ab06:	f000 f8ef 	bl	800ace8 <__multadd>
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	9b08      	ldr	r3, [sp, #32]
 800ab10:	3301      	adds	r3, #1
 800ab12:	9308      	str	r3, [sp, #32]
 800ab14:	e775      	b.n	800aa02 <_dtoa_r+0xa0a>
 800ab16:	f000 f8e7 	bl	800ace8 <__multadd>
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	2300      	movs	r3, #0
 800ab20:	220a      	movs	r2, #10
 800ab22:	4628      	mov	r0, r5
 800ab24:	f000 f8e0 	bl	800ace8 <__multadd>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	e7f0      	b.n	800ab0e <_dtoa_r+0xb16>
 800ab2c:	f1b9 0f00 	cmp.w	r9, #0
 800ab30:	bfcc      	ite	gt
 800ab32:	464f      	movgt	r7, r9
 800ab34:	2701      	movle	r7, #1
 800ab36:	f04f 0800 	mov.w	r8, #0
 800ab3a:	9a03      	ldr	r2, [sp, #12]
 800ab3c:	4417      	add	r7, r2
 800ab3e:	4659      	mov	r1, fp
 800ab40:	2201      	movs	r2, #1
 800ab42:	4628      	mov	r0, r5
 800ab44:	9308      	str	r3, [sp, #32]
 800ab46:	f000 fa7b 	bl	800b040 <__lshift>
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4683      	mov	fp, r0
 800ab4e:	f000 fae7 	bl	800b120 <__mcmp>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	dcb2      	bgt.n	800aabc <_dtoa_r+0xac4>
 800ab56:	d102      	bne.n	800ab5e <_dtoa_r+0xb66>
 800ab58:	9b08      	ldr	r3, [sp, #32]
 800ab5a:	07db      	lsls	r3, r3, #31
 800ab5c:	d4ae      	bmi.n	800aabc <_dtoa_r+0xac4>
 800ab5e:	463b      	mov	r3, r7
 800ab60:	461f      	mov	r7, r3
 800ab62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab66:	2a30      	cmp	r2, #48	; 0x30
 800ab68:	d0fa      	beq.n	800ab60 <_dtoa_r+0xb68>
 800ab6a:	e6f9      	b.n	800a960 <_dtoa_r+0x968>
 800ab6c:	9a03      	ldr	r2, [sp, #12]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d1a5      	bne.n	800aabe <_dtoa_r+0xac6>
 800ab72:	2331      	movs	r3, #49	; 0x31
 800ab74:	f10a 0a01 	add.w	sl, sl, #1
 800ab78:	e779      	b.n	800aa6e <_dtoa_r+0xa76>
 800ab7a:	4b14      	ldr	r3, [pc, #80]	; (800abcc <_dtoa_r+0xbd4>)
 800ab7c:	f7ff baa8 	b.w	800a0d0 <_dtoa_r+0xd8>
 800ab80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f47f aa81 	bne.w	800a08a <_dtoa_r+0x92>
 800ab88:	4b11      	ldr	r3, [pc, #68]	; (800abd0 <_dtoa_r+0xbd8>)
 800ab8a:	f7ff baa1 	b.w	800a0d0 <_dtoa_r+0xd8>
 800ab8e:	f1b9 0f00 	cmp.w	r9, #0
 800ab92:	dc03      	bgt.n	800ab9c <_dtoa_r+0xba4>
 800ab94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	f73f aecb 	bgt.w	800a932 <_dtoa_r+0x93a>
 800ab9c:	9f03      	ldr	r7, [sp, #12]
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4658      	mov	r0, fp
 800aba2:	f7ff f99b 	bl	8009edc <quorem>
 800aba6:	9a03      	ldr	r2, [sp, #12]
 800aba8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abac:	f807 3b01 	strb.w	r3, [r7], #1
 800abb0:	1aba      	subs	r2, r7, r2
 800abb2:	4591      	cmp	r9, r2
 800abb4:	ddba      	ble.n	800ab2c <_dtoa_r+0xb34>
 800abb6:	4659      	mov	r1, fp
 800abb8:	2300      	movs	r3, #0
 800abba:	220a      	movs	r2, #10
 800abbc:	4628      	mov	r0, r5
 800abbe:	f000 f893 	bl	800ace8 <__multadd>
 800abc2:	4683      	mov	fp, r0
 800abc4:	e7eb      	b.n	800ab9e <_dtoa_r+0xba6>
 800abc6:	bf00      	nop
 800abc8:	0800cb6f 	.word	0x0800cb6f
 800abcc:	0800cacc 	.word	0x0800cacc
 800abd0:	0800caf0 	.word	0x0800caf0

0800abd4 <_localeconv_r>:
 800abd4:	4800      	ldr	r0, [pc, #0]	; (800abd8 <_localeconv_r+0x4>)
 800abd6:	4770      	bx	lr
 800abd8:	2000020c 	.word	0x2000020c

0800abdc <malloc>:
 800abdc:	4b02      	ldr	r3, [pc, #8]	; (800abe8 <malloc+0xc>)
 800abde:	4601      	mov	r1, r0
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	f000 bc1d 	b.w	800b420 <_malloc_r>
 800abe6:	bf00      	nop
 800abe8:	200000b8 	.word	0x200000b8

0800abec <memchr>:
 800abec:	4603      	mov	r3, r0
 800abee:	b510      	push	{r4, lr}
 800abf0:	b2c9      	uxtb	r1, r1
 800abf2:	4402      	add	r2, r0
 800abf4:	4293      	cmp	r3, r2
 800abf6:	4618      	mov	r0, r3
 800abf8:	d101      	bne.n	800abfe <memchr+0x12>
 800abfa:	2000      	movs	r0, #0
 800abfc:	e003      	b.n	800ac06 <memchr+0x1a>
 800abfe:	7804      	ldrb	r4, [r0, #0]
 800ac00:	3301      	adds	r3, #1
 800ac02:	428c      	cmp	r4, r1
 800ac04:	d1f6      	bne.n	800abf4 <memchr+0x8>
 800ac06:	bd10      	pop	{r4, pc}

0800ac08 <memcpy>:
 800ac08:	440a      	add	r2, r1
 800ac0a:	4291      	cmp	r1, r2
 800ac0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac10:	d100      	bne.n	800ac14 <memcpy+0xc>
 800ac12:	4770      	bx	lr
 800ac14:	b510      	push	{r4, lr}
 800ac16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac20:	d1f9      	bne.n	800ac16 <memcpy+0xe>
 800ac22:	bd10      	pop	{r4, pc}

0800ac24 <_Balloc>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac28:	4604      	mov	r4, r0
 800ac2a:	460d      	mov	r5, r1
 800ac2c:	b976      	cbnz	r6, 800ac4c <_Balloc+0x28>
 800ac2e:	2010      	movs	r0, #16
 800ac30:	f7ff ffd4 	bl	800abdc <malloc>
 800ac34:	4602      	mov	r2, r0
 800ac36:	6260      	str	r0, [r4, #36]	; 0x24
 800ac38:	b920      	cbnz	r0, 800ac44 <_Balloc+0x20>
 800ac3a:	2166      	movs	r1, #102	; 0x66
 800ac3c:	4b17      	ldr	r3, [pc, #92]	; (800ac9c <_Balloc+0x78>)
 800ac3e:	4818      	ldr	r0, [pc, #96]	; (800aca0 <_Balloc+0x7c>)
 800ac40:	f000 fdce 	bl	800b7e0 <__assert_func>
 800ac44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac48:	6006      	str	r6, [r0, #0]
 800ac4a:	60c6      	str	r6, [r0, #12]
 800ac4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac4e:	68f3      	ldr	r3, [r6, #12]
 800ac50:	b183      	cbz	r3, 800ac74 <_Balloc+0x50>
 800ac52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac5a:	b9b8      	cbnz	r0, 800ac8c <_Balloc+0x68>
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac62:	1d72      	adds	r2, r6, #5
 800ac64:	4620      	mov	r0, r4
 800ac66:	0092      	lsls	r2, r2, #2
 800ac68:	f000 fb5e 	bl	800b328 <_calloc_r>
 800ac6c:	b160      	cbz	r0, 800ac88 <_Balloc+0x64>
 800ac6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac72:	e00e      	b.n	800ac92 <_Balloc+0x6e>
 800ac74:	2221      	movs	r2, #33	; 0x21
 800ac76:	2104      	movs	r1, #4
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 fb55 	bl	800b328 <_calloc_r>
 800ac7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac80:	60f0      	str	r0, [r6, #12]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e4      	bne.n	800ac52 <_Balloc+0x2e>
 800ac88:	2000      	movs	r0, #0
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	6802      	ldr	r2, [r0, #0]
 800ac8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac92:	2300      	movs	r3, #0
 800ac94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac98:	e7f7      	b.n	800ac8a <_Balloc+0x66>
 800ac9a:	bf00      	nop
 800ac9c:	0800cafd 	.word	0x0800cafd
 800aca0:	0800cb80 	.word	0x0800cb80

0800aca4 <_Bfree>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aca8:	4605      	mov	r5, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	b976      	cbnz	r6, 800accc <_Bfree+0x28>
 800acae:	2010      	movs	r0, #16
 800acb0:	f7ff ff94 	bl	800abdc <malloc>
 800acb4:	4602      	mov	r2, r0
 800acb6:	6268      	str	r0, [r5, #36]	; 0x24
 800acb8:	b920      	cbnz	r0, 800acc4 <_Bfree+0x20>
 800acba:	218a      	movs	r1, #138	; 0x8a
 800acbc:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <_Bfree+0x3c>)
 800acbe:	4809      	ldr	r0, [pc, #36]	; (800ace4 <_Bfree+0x40>)
 800acc0:	f000 fd8e 	bl	800b7e0 <__assert_func>
 800acc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acc8:	6006      	str	r6, [r0, #0]
 800acca:	60c6      	str	r6, [r0, #12]
 800accc:	b13c      	cbz	r4, 800acde <_Bfree+0x3a>
 800acce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acd0:	6862      	ldr	r2, [r4, #4]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acd8:	6021      	str	r1, [r4, #0]
 800acda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	0800cafd 	.word	0x0800cafd
 800ace4:	0800cb80 	.word	0x0800cb80

0800ace8 <__multadd>:
 800ace8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acec:	4607      	mov	r7, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	461e      	mov	r6, r3
 800acf2:	2000      	movs	r0, #0
 800acf4:	690d      	ldr	r5, [r1, #16]
 800acf6:	f101 0c14 	add.w	ip, r1, #20
 800acfa:	f8dc 3000 	ldr.w	r3, [ip]
 800acfe:	3001      	adds	r0, #1
 800ad00:	b299      	uxth	r1, r3
 800ad02:	fb02 6101 	mla	r1, r2, r1, r6
 800ad06:	0c1e      	lsrs	r6, r3, #16
 800ad08:	0c0b      	lsrs	r3, r1, #16
 800ad0a:	fb02 3306 	mla	r3, r2, r6, r3
 800ad0e:	b289      	uxth	r1, r1
 800ad10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad14:	4285      	cmp	r5, r0
 800ad16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad1e:	dcec      	bgt.n	800acfa <__multadd+0x12>
 800ad20:	b30e      	cbz	r6, 800ad66 <__multadd+0x7e>
 800ad22:	68a3      	ldr	r3, [r4, #8]
 800ad24:	42ab      	cmp	r3, r5
 800ad26:	dc19      	bgt.n	800ad5c <__multadd+0x74>
 800ad28:	6861      	ldr	r1, [r4, #4]
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	3101      	adds	r1, #1
 800ad2e:	f7ff ff79 	bl	800ac24 <_Balloc>
 800ad32:	4680      	mov	r8, r0
 800ad34:	b928      	cbnz	r0, 800ad42 <__multadd+0x5a>
 800ad36:	4602      	mov	r2, r0
 800ad38:	21b5      	movs	r1, #181	; 0xb5
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	; (800ad6c <__multadd+0x84>)
 800ad3c:	480c      	ldr	r0, [pc, #48]	; (800ad70 <__multadd+0x88>)
 800ad3e:	f000 fd4f 	bl	800b7e0 <__assert_func>
 800ad42:	6922      	ldr	r2, [r4, #16]
 800ad44:	f104 010c 	add.w	r1, r4, #12
 800ad48:	3202      	adds	r2, #2
 800ad4a:	0092      	lsls	r2, r2, #2
 800ad4c:	300c      	adds	r0, #12
 800ad4e:	f7ff ff5b 	bl	800ac08 <memcpy>
 800ad52:	4621      	mov	r1, r4
 800ad54:	4638      	mov	r0, r7
 800ad56:	f7ff ffa5 	bl	800aca4 <_Bfree>
 800ad5a:	4644      	mov	r4, r8
 800ad5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad60:	3501      	adds	r5, #1
 800ad62:	615e      	str	r6, [r3, #20]
 800ad64:	6125      	str	r5, [r4, #16]
 800ad66:	4620      	mov	r0, r4
 800ad68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6c:	0800cb6f 	.word	0x0800cb6f
 800ad70:	0800cb80 	.word	0x0800cb80

0800ad74 <__hi0bits>:
 800ad74:	0c02      	lsrs	r2, r0, #16
 800ad76:	0412      	lsls	r2, r2, #16
 800ad78:	4603      	mov	r3, r0
 800ad7a:	b9ca      	cbnz	r2, 800adb0 <__hi0bits+0x3c>
 800ad7c:	0403      	lsls	r3, r0, #16
 800ad7e:	2010      	movs	r0, #16
 800ad80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad84:	bf04      	itt	eq
 800ad86:	021b      	lsleq	r3, r3, #8
 800ad88:	3008      	addeq	r0, #8
 800ad8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad8e:	bf04      	itt	eq
 800ad90:	011b      	lsleq	r3, r3, #4
 800ad92:	3004      	addeq	r0, #4
 800ad94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad98:	bf04      	itt	eq
 800ad9a:	009b      	lsleq	r3, r3, #2
 800ad9c:	3002      	addeq	r0, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	db05      	blt.n	800adae <__hi0bits+0x3a>
 800ada2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ada6:	f100 0001 	add.w	r0, r0, #1
 800adaa:	bf08      	it	eq
 800adac:	2020      	moveq	r0, #32
 800adae:	4770      	bx	lr
 800adb0:	2000      	movs	r0, #0
 800adb2:	e7e5      	b.n	800ad80 <__hi0bits+0xc>

0800adb4 <__lo0bits>:
 800adb4:	6803      	ldr	r3, [r0, #0]
 800adb6:	4602      	mov	r2, r0
 800adb8:	f013 0007 	ands.w	r0, r3, #7
 800adbc:	d00b      	beq.n	800add6 <__lo0bits+0x22>
 800adbe:	07d9      	lsls	r1, r3, #31
 800adc0:	d421      	bmi.n	800ae06 <__lo0bits+0x52>
 800adc2:	0798      	lsls	r0, r3, #30
 800adc4:	bf49      	itett	mi
 800adc6:	085b      	lsrmi	r3, r3, #1
 800adc8:	089b      	lsrpl	r3, r3, #2
 800adca:	2001      	movmi	r0, #1
 800adcc:	6013      	strmi	r3, [r2, #0]
 800adce:	bf5c      	itt	pl
 800add0:	2002      	movpl	r0, #2
 800add2:	6013      	strpl	r3, [r2, #0]
 800add4:	4770      	bx	lr
 800add6:	b299      	uxth	r1, r3
 800add8:	b909      	cbnz	r1, 800adde <__lo0bits+0x2a>
 800adda:	2010      	movs	r0, #16
 800addc:	0c1b      	lsrs	r3, r3, #16
 800adde:	b2d9      	uxtb	r1, r3
 800ade0:	b909      	cbnz	r1, 800ade6 <__lo0bits+0x32>
 800ade2:	3008      	adds	r0, #8
 800ade4:	0a1b      	lsrs	r3, r3, #8
 800ade6:	0719      	lsls	r1, r3, #28
 800ade8:	bf04      	itt	eq
 800adea:	091b      	lsreq	r3, r3, #4
 800adec:	3004      	addeq	r0, #4
 800adee:	0799      	lsls	r1, r3, #30
 800adf0:	bf04      	itt	eq
 800adf2:	089b      	lsreq	r3, r3, #2
 800adf4:	3002      	addeq	r0, #2
 800adf6:	07d9      	lsls	r1, r3, #31
 800adf8:	d403      	bmi.n	800ae02 <__lo0bits+0x4e>
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	f100 0001 	add.w	r0, r0, #1
 800ae00:	d003      	beq.n	800ae0a <__lo0bits+0x56>
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	4770      	bx	lr
 800ae06:	2000      	movs	r0, #0
 800ae08:	4770      	bx	lr
 800ae0a:	2020      	movs	r0, #32
 800ae0c:	4770      	bx	lr
	...

0800ae10 <__i2b>:
 800ae10:	b510      	push	{r4, lr}
 800ae12:	460c      	mov	r4, r1
 800ae14:	2101      	movs	r1, #1
 800ae16:	f7ff ff05 	bl	800ac24 <_Balloc>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	b928      	cbnz	r0, 800ae2a <__i2b+0x1a>
 800ae1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae22:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <__i2b+0x24>)
 800ae24:	4804      	ldr	r0, [pc, #16]	; (800ae38 <__i2b+0x28>)
 800ae26:	f000 fcdb 	bl	800b7e0 <__assert_func>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	6144      	str	r4, [r0, #20]
 800ae2e:	6103      	str	r3, [r0, #16]
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	bf00      	nop
 800ae34:	0800cb6f 	.word	0x0800cb6f
 800ae38:	0800cb80 	.word	0x0800cb80

0800ae3c <__multiply>:
 800ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	4691      	mov	r9, r2
 800ae42:	690a      	ldr	r2, [r1, #16]
 800ae44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae48:	460c      	mov	r4, r1
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	bfbe      	ittt	lt
 800ae4e:	460b      	movlt	r3, r1
 800ae50:	464c      	movlt	r4, r9
 800ae52:	4699      	movlt	r9, r3
 800ae54:	6927      	ldr	r7, [r4, #16]
 800ae56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae5a:	68a3      	ldr	r3, [r4, #8]
 800ae5c:	6861      	ldr	r1, [r4, #4]
 800ae5e:	eb07 060a 	add.w	r6, r7, sl
 800ae62:	42b3      	cmp	r3, r6
 800ae64:	b085      	sub	sp, #20
 800ae66:	bfb8      	it	lt
 800ae68:	3101      	addlt	r1, #1
 800ae6a:	f7ff fedb 	bl	800ac24 <_Balloc>
 800ae6e:	b930      	cbnz	r0, 800ae7e <__multiply+0x42>
 800ae70:	4602      	mov	r2, r0
 800ae72:	f240 115d 	movw	r1, #349	; 0x15d
 800ae76:	4b43      	ldr	r3, [pc, #268]	; (800af84 <__multiply+0x148>)
 800ae78:	4843      	ldr	r0, [pc, #268]	; (800af88 <__multiply+0x14c>)
 800ae7a:	f000 fcb1 	bl	800b7e0 <__assert_func>
 800ae7e:	f100 0514 	add.w	r5, r0, #20
 800ae82:	462b      	mov	r3, r5
 800ae84:	2200      	movs	r2, #0
 800ae86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae8a:	4543      	cmp	r3, r8
 800ae8c:	d321      	bcc.n	800aed2 <__multiply+0x96>
 800ae8e:	f104 0314 	add.w	r3, r4, #20
 800ae92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae96:	f109 0314 	add.w	r3, r9, #20
 800ae9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae9e:	9202      	str	r2, [sp, #8]
 800aea0:	1b3a      	subs	r2, r7, r4
 800aea2:	3a15      	subs	r2, #21
 800aea4:	f022 0203 	bic.w	r2, r2, #3
 800aea8:	3204      	adds	r2, #4
 800aeaa:	f104 0115 	add.w	r1, r4, #21
 800aeae:	428f      	cmp	r7, r1
 800aeb0:	bf38      	it	cc
 800aeb2:	2204      	movcc	r2, #4
 800aeb4:	9201      	str	r2, [sp, #4]
 800aeb6:	9a02      	ldr	r2, [sp, #8]
 800aeb8:	9303      	str	r3, [sp, #12]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d80c      	bhi.n	800aed8 <__multiply+0x9c>
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	dd03      	ble.n	800aeca <__multiply+0x8e>
 800aec2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d059      	beq.n	800af7e <__multiply+0x142>
 800aeca:	6106      	str	r6, [r0, #16]
 800aecc:	b005      	add	sp, #20
 800aece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed2:	f843 2b04 	str.w	r2, [r3], #4
 800aed6:	e7d8      	b.n	800ae8a <__multiply+0x4e>
 800aed8:	f8b3 a000 	ldrh.w	sl, [r3]
 800aedc:	f1ba 0f00 	cmp.w	sl, #0
 800aee0:	d023      	beq.n	800af2a <__multiply+0xee>
 800aee2:	46a9      	mov	r9, r5
 800aee4:	f04f 0c00 	mov.w	ip, #0
 800aee8:	f104 0e14 	add.w	lr, r4, #20
 800aeec:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aef0:	f8d9 1000 	ldr.w	r1, [r9]
 800aef4:	fa1f fb82 	uxth.w	fp, r2
 800aef8:	b289      	uxth	r1, r1
 800aefa:	fb0a 110b 	mla	r1, sl, fp, r1
 800aefe:	4461      	add	r1, ip
 800af00:	f8d9 c000 	ldr.w	ip, [r9]
 800af04:	0c12      	lsrs	r2, r2, #16
 800af06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800af0a:	fb0a c202 	mla	r2, sl, r2, ip
 800af0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af12:	b289      	uxth	r1, r1
 800af14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af18:	4577      	cmp	r7, lr
 800af1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af1e:	f849 1b04 	str.w	r1, [r9], #4
 800af22:	d8e3      	bhi.n	800aeec <__multiply+0xb0>
 800af24:	9a01      	ldr	r2, [sp, #4]
 800af26:	f845 c002 	str.w	ip, [r5, r2]
 800af2a:	9a03      	ldr	r2, [sp, #12]
 800af2c:	3304      	adds	r3, #4
 800af2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af32:	f1b9 0f00 	cmp.w	r9, #0
 800af36:	d020      	beq.n	800af7a <__multiply+0x13e>
 800af38:	46ae      	mov	lr, r5
 800af3a:	f04f 0a00 	mov.w	sl, #0
 800af3e:	6829      	ldr	r1, [r5, #0]
 800af40:	f104 0c14 	add.w	ip, r4, #20
 800af44:	f8bc b000 	ldrh.w	fp, [ip]
 800af48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af4c:	b289      	uxth	r1, r1
 800af4e:	fb09 220b 	mla	r2, r9, fp, r2
 800af52:	4492      	add	sl, r2
 800af54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800af58:	f84e 1b04 	str.w	r1, [lr], #4
 800af5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af60:	f8be 1000 	ldrh.w	r1, [lr]
 800af64:	0c12      	lsrs	r2, r2, #16
 800af66:	fb09 1102 	mla	r1, r9, r2, r1
 800af6a:	4567      	cmp	r7, ip
 800af6c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af74:	d8e6      	bhi.n	800af44 <__multiply+0x108>
 800af76:	9a01      	ldr	r2, [sp, #4]
 800af78:	50a9      	str	r1, [r5, r2]
 800af7a:	3504      	adds	r5, #4
 800af7c:	e79b      	b.n	800aeb6 <__multiply+0x7a>
 800af7e:	3e01      	subs	r6, #1
 800af80:	e79d      	b.n	800aebe <__multiply+0x82>
 800af82:	bf00      	nop
 800af84:	0800cb6f 	.word	0x0800cb6f
 800af88:	0800cb80 	.word	0x0800cb80

0800af8c <__pow5mult>:
 800af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af90:	4615      	mov	r5, r2
 800af92:	f012 0203 	ands.w	r2, r2, #3
 800af96:	4606      	mov	r6, r0
 800af98:	460f      	mov	r7, r1
 800af9a:	d007      	beq.n	800afac <__pow5mult+0x20>
 800af9c:	4c25      	ldr	r4, [pc, #148]	; (800b034 <__pow5mult+0xa8>)
 800af9e:	3a01      	subs	r2, #1
 800afa0:	2300      	movs	r3, #0
 800afa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afa6:	f7ff fe9f 	bl	800ace8 <__multadd>
 800afaa:	4607      	mov	r7, r0
 800afac:	10ad      	asrs	r5, r5, #2
 800afae:	d03d      	beq.n	800b02c <__pow5mult+0xa0>
 800afb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800afb2:	b97c      	cbnz	r4, 800afd4 <__pow5mult+0x48>
 800afb4:	2010      	movs	r0, #16
 800afb6:	f7ff fe11 	bl	800abdc <malloc>
 800afba:	4602      	mov	r2, r0
 800afbc:	6270      	str	r0, [r6, #36]	; 0x24
 800afbe:	b928      	cbnz	r0, 800afcc <__pow5mult+0x40>
 800afc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <__pow5mult+0xac>)
 800afc6:	481d      	ldr	r0, [pc, #116]	; (800b03c <__pow5mult+0xb0>)
 800afc8:	f000 fc0a 	bl	800b7e0 <__assert_func>
 800afcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afd0:	6004      	str	r4, [r0, #0]
 800afd2:	60c4      	str	r4, [r0, #12]
 800afd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afdc:	b94c      	cbnz	r4, 800aff2 <__pow5mult+0x66>
 800afde:	f240 2171 	movw	r1, #625	; 0x271
 800afe2:	4630      	mov	r0, r6
 800afe4:	f7ff ff14 	bl	800ae10 <__i2b>
 800afe8:	2300      	movs	r3, #0
 800afea:	4604      	mov	r4, r0
 800afec:	f8c8 0008 	str.w	r0, [r8, #8]
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	f04f 0900 	mov.w	r9, #0
 800aff6:	07eb      	lsls	r3, r5, #31
 800aff8:	d50a      	bpl.n	800b010 <__pow5mult+0x84>
 800affa:	4639      	mov	r1, r7
 800affc:	4622      	mov	r2, r4
 800affe:	4630      	mov	r0, r6
 800b000:	f7ff ff1c 	bl	800ae3c <__multiply>
 800b004:	4680      	mov	r8, r0
 800b006:	4639      	mov	r1, r7
 800b008:	4630      	mov	r0, r6
 800b00a:	f7ff fe4b 	bl	800aca4 <_Bfree>
 800b00e:	4647      	mov	r7, r8
 800b010:	106d      	asrs	r5, r5, #1
 800b012:	d00b      	beq.n	800b02c <__pow5mult+0xa0>
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	b938      	cbnz	r0, 800b028 <__pow5mult+0x9c>
 800b018:	4622      	mov	r2, r4
 800b01a:	4621      	mov	r1, r4
 800b01c:	4630      	mov	r0, r6
 800b01e:	f7ff ff0d 	bl	800ae3c <__multiply>
 800b022:	6020      	str	r0, [r4, #0]
 800b024:	f8c0 9000 	str.w	r9, [r0]
 800b028:	4604      	mov	r4, r0
 800b02a:	e7e4      	b.n	800aff6 <__pow5mult+0x6a>
 800b02c:	4638      	mov	r0, r7
 800b02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b032:	bf00      	nop
 800b034:	0800ccd0 	.word	0x0800ccd0
 800b038:	0800cafd 	.word	0x0800cafd
 800b03c:	0800cb80 	.word	0x0800cb80

0800b040 <__lshift>:
 800b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b044:	460c      	mov	r4, r1
 800b046:	4607      	mov	r7, r0
 800b048:	4691      	mov	r9, r2
 800b04a:	6923      	ldr	r3, [r4, #16]
 800b04c:	6849      	ldr	r1, [r1, #4]
 800b04e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b052:	68a3      	ldr	r3, [r4, #8]
 800b054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b058:	f108 0601 	add.w	r6, r8, #1
 800b05c:	42b3      	cmp	r3, r6
 800b05e:	db0b      	blt.n	800b078 <__lshift+0x38>
 800b060:	4638      	mov	r0, r7
 800b062:	f7ff fddf 	bl	800ac24 <_Balloc>
 800b066:	4605      	mov	r5, r0
 800b068:	b948      	cbnz	r0, 800b07e <__lshift+0x3e>
 800b06a:	4602      	mov	r2, r0
 800b06c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b070:	4b29      	ldr	r3, [pc, #164]	; (800b118 <__lshift+0xd8>)
 800b072:	482a      	ldr	r0, [pc, #168]	; (800b11c <__lshift+0xdc>)
 800b074:	f000 fbb4 	bl	800b7e0 <__assert_func>
 800b078:	3101      	adds	r1, #1
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	e7ee      	b.n	800b05c <__lshift+0x1c>
 800b07e:	2300      	movs	r3, #0
 800b080:	f100 0114 	add.w	r1, r0, #20
 800b084:	f100 0210 	add.w	r2, r0, #16
 800b088:	4618      	mov	r0, r3
 800b08a:	4553      	cmp	r3, sl
 800b08c:	db37      	blt.n	800b0fe <__lshift+0xbe>
 800b08e:	6920      	ldr	r0, [r4, #16]
 800b090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b094:	f104 0314 	add.w	r3, r4, #20
 800b098:	f019 091f 	ands.w	r9, r9, #31
 800b09c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b0a4:	d02f      	beq.n	800b106 <__lshift+0xc6>
 800b0a6:	468a      	mov	sl, r1
 800b0a8:	f04f 0c00 	mov.w	ip, #0
 800b0ac:	f1c9 0e20 	rsb	lr, r9, #32
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	fa02 f209 	lsl.w	r2, r2, r9
 800b0b6:	ea42 020c 	orr.w	r2, r2, ip
 800b0ba:	f84a 2b04 	str.w	r2, [sl], #4
 800b0be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c2:	4298      	cmp	r0, r3
 800b0c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b0c8:	d8f2      	bhi.n	800b0b0 <__lshift+0x70>
 800b0ca:	1b03      	subs	r3, r0, r4
 800b0cc:	3b15      	subs	r3, #21
 800b0ce:	f023 0303 	bic.w	r3, r3, #3
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	f104 0215 	add.w	r2, r4, #21
 800b0d8:	4290      	cmp	r0, r2
 800b0da:	bf38      	it	cc
 800b0dc:	2304      	movcc	r3, #4
 800b0de:	f841 c003 	str.w	ip, [r1, r3]
 800b0e2:	f1bc 0f00 	cmp.w	ip, #0
 800b0e6:	d001      	beq.n	800b0ec <__lshift+0xac>
 800b0e8:	f108 0602 	add.w	r6, r8, #2
 800b0ec:	3e01      	subs	r6, #1
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	612e      	str	r6, [r5, #16]
 800b0f4:	f7ff fdd6 	bl	800aca4 <_Bfree>
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b102:	3301      	adds	r3, #1
 800b104:	e7c1      	b.n	800b08a <__lshift+0x4a>
 800b106:	3904      	subs	r1, #4
 800b108:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10c:	4298      	cmp	r0, r3
 800b10e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b112:	d8f9      	bhi.n	800b108 <__lshift+0xc8>
 800b114:	e7ea      	b.n	800b0ec <__lshift+0xac>
 800b116:	bf00      	nop
 800b118:	0800cb6f 	.word	0x0800cb6f
 800b11c:	0800cb80 	.word	0x0800cb80

0800b120 <__mcmp>:
 800b120:	4603      	mov	r3, r0
 800b122:	690a      	ldr	r2, [r1, #16]
 800b124:	6900      	ldr	r0, [r0, #16]
 800b126:	b530      	push	{r4, r5, lr}
 800b128:	1a80      	subs	r0, r0, r2
 800b12a:	d10d      	bne.n	800b148 <__mcmp+0x28>
 800b12c:	3314      	adds	r3, #20
 800b12e:	3114      	adds	r1, #20
 800b130:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b134:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b138:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b13c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b140:	4295      	cmp	r5, r2
 800b142:	d002      	beq.n	800b14a <__mcmp+0x2a>
 800b144:	d304      	bcc.n	800b150 <__mcmp+0x30>
 800b146:	2001      	movs	r0, #1
 800b148:	bd30      	pop	{r4, r5, pc}
 800b14a:	42a3      	cmp	r3, r4
 800b14c:	d3f4      	bcc.n	800b138 <__mcmp+0x18>
 800b14e:	e7fb      	b.n	800b148 <__mcmp+0x28>
 800b150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b154:	e7f8      	b.n	800b148 <__mcmp+0x28>
	...

0800b158 <__mdiff>:
 800b158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	460d      	mov	r5, r1
 800b15e:	4607      	mov	r7, r0
 800b160:	4611      	mov	r1, r2
 800b162:	4628      	mov	r0, r5
 800b164:	4614      	mov	r4, r2
 800b166:	f7ff ffdb 	bl	800b120 <__mcmp>
 800b16a:	1e06      	subs	r6, r0, #0
 800b16c:	d111      	bne.n	800b192 <__mdiff+0x3a>
 800b16e:	4631      	mov	r1, r6
 800b170:	4638      	mov	r0, r7
 800b172:	f7ff fd57 	bl	800ac24 <_Balloc>
 800b176:	4602      	mov	r2, r0
 800b178:	b928      	cbnz	r0, 800b186 <__mdiff+0x2e>
 800b17a:	f240 2132 	movw	r1, #562	; 0x232
 800b17e:	4b3a      	ldr	r3, [pc, #232]	; (800b268 <__mdiff+0x110>)
 800b180:	483a      	ldr	r0, [pc, #232]	; (800b26c <__mdiff+0x114>)
 800b182:	f000 fb2d 	bl	800b7e0 <__assert_func>
 800b186:	2301      	movs	r3, #1
 800b188:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b18c:	4610      	mov	r0, r2
 800b18e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	bfa4      	itt	ge
 800b194:	4623      	movge	r3, r4
 800b196:	462c      	movge	r4, r5
 800b198:	4638      	mov	r0, r7
 800b19a:	6861      	ldr	r1, [r4, #4]
 800b19c:	bfa6      	itte	ge
 800b19e:	461d      	movge	r5, r3
 800b1a0:	2600      	movge	r6, #0
 800b1a2:	2601      	movlt	r6, #1
 800b1a4:	f7ff fd3e 	bl	800ac24 <_Balloc>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	b918      	cbnz	r0, 800b1b4 <__mdiff+0x5c>
 800b1ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b1b0:	4b2d      	ldr	r3, [pc, #180]	; (800b268 <__mdiff+0x110>)
 800b1b2:	e7e5      	b.n	800b180 <__mdiff+0x28>
 800b1b4:	f102 0814 	add.w	r8, r2, #20
 800b1b8:	46c2      	mov	sl, r8
 800b1ba:	f04f 0c00 	mov.w	ip, #0
 800b1be:	6927      	ldr	r7, [r4, #16]
 800b1c0:	60c6      	str	r6, [r0, #12]
 800b1c2:	692e      	ldr	r6, [r5, #16]
 800b1c4:	f104 0014 	add.w	r0, r4, #20
 800b1c8:	f105 0914 	add.w	r9, r5, #20
 800b1cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b1d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b1d4:	3410      	adds	r4, #16
 800b1d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b1da:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1de:	fa1f f18b 	uxth.w	r1, fp
 800b1e2:	448c      	add	ip, r1
 800b1e4:	b299      	uxth	r1, r3
 800b1e6:	0c1b      	lsrs	r3, r3, #16
 800b1e8:	ebac 0101 	sub.w	r1, ip, r1
 800b1ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b1f4:	b289      	uxth	r1, r1
 800b1f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b1fa:	454e      	cmp	r6, r9
 800b1fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b200:	f84a 3b04 	str.w	r3, [sl], #4
 800b204:	d8e7      	bhi.n	800b1d6 <__mdiff+0x7e>
 800b206:	1b73      	subs	r3, r6, r5
 800b208:	3b15      	subs	r3, #21
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	3515      	adds	r5, #21
 800b210:	3304      	adds	r3, #4
 800b212:	42ae      	cmp	r6, r5
 800b214:	bf38      	it	cc
 800b216:	2304      	movcc	r3, #4
 800b218:	4418      	add	r0, r3
 800b21a:	4443      	add	r3, r8
 800b21c:	461e      	mov	r6, r3
 800b21e:	4605      	mov	r5, r0
 800b220:	4575      	cmp	r5, lr
 800b222:	d30e      	bcc.n	800b242 <__mdiff+0xea>
 800b224:	f10e 0103 	add.w	r1, lr, #3
 800b228:	1a09      	subs	r1, r1, r0
 800b22a:	f021 0103 	bic.w	r1, r1, #3
 800b22e:	3803      	subs	r0, #3
 800b230:	4586      	cmp	lr, r0
 800b232:	bf38      	it	cc
 800b234:	2100      	movcc	r1, #0
 800b236:	4419      	add	r1, r3
 800b238:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b23c:	b18b      	cbz	r3, 800b262 <__mdiff+0x10a>
 800b23e:	6117      	str	r7, [r2, #16]
 800b240:	e7a4      	b.n	800b18c <__mdiff+0x34>
 800b242:	f855 8b04 	ldr.w	r8, [r5], #4
 800b246:	fa1f f188 	uxth.w	r1, r8
 800b24a:	4461      	add	r1, ip
 800b24c:	140c      	asrs	r4, r1, #16
 800b24e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b252:	b289      	uxth	r1, r1
 800b254:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b258:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b25c:	f846 1b04 	str.w	r1, [r6], #4
 800b260:	e7de      	b.n	800b220 <__mdiff+0xc8>
 800b262:	3f01      	subs	r7, #1
 800b264:	e7e8      	b.n	800b238 <__mdiff+0xe0>
 800b266:	bf00      	nop
 800b268:	0800cb6f 	.word	0x0800cb6f
 800b26c:	0800cb80 	.word	0x0800cb80

0800b270 <__d2b>:
 800b270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b274:	2101      	movs	r1, #1
 800b276:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b27a:	4690      	mov	r8, r2
 800b27c:	461d      	mov	r5, r3
 800b27e:	f7ff fcd1 	bl	800ac24 <_Balloc>
 800b282:	4604      	mov	r4, r0
 800b284:	b930      	cbnz	r0, 800b294 <__d2b+0x24>
 800b286:	4602      	mov	r2, r0
 800b288:	f240 310a 	movw	r1, #778	; 0x30a
 800b28c:	4b24      	ldr	r3, [pc, #144]	; (800b320 <__d2b+0xb0>)
 800b28e:	4825      	ldr	r0, [pc, #148]	; (800b324 <__d2b+0xb4>)
 800b290:	f000 faa6 	bl	800b7e0 <__assert_func>
 800b294:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b298:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b29c:	bb2d      	cbnz	r5, 800b2ea <__d2b+0x7a>
 800b29e:	9301      	str	r3, [sp, #4]
 800b2a0:	f1b8 0300 	subs.w	r3, r8, #0
 800b2a4:	d026      	beq.n	800b2f4 <__d2b+0x84>
 800b2a6:	4668      	mov	r0, sp
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	f7ff fd83 	bl	800adb4 <__lo0bits>
 800b2ae:	9900      	ldr	r1, [sp, #0]
 800b2b0:	b1f0      	cbz	r0, 800b2f0 <__d2b+0x80>
 800b2b2:	9a01      	ldr	r2, [sp, #4]
 800b2b4:	f1c0 0320 	rsb	r3, r0, #32
 800b2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2bc:	430b      	orrs	r3, r1
 800b2be:	40c2      	lsrs	r2, r0
 800b2c0:	6163      	str	r3, [r4, #20]
 800b2c2:	9201      	str	r2, [sp, #4]
 800b2c4:	9b01      	ldr	r3, [sp, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bf14      	ite	ne
 800b2ca:	2102      	movne	r1, #2
 800b2cc:	2101      	moveq	r1, #1
 800b2ce:	61a3      	str	r3, [r4, #24]
 800b2d0:	6121      	str	r1, [r4, #16]
 800b2d2:	b1c5      	cbz	r5, 800b306 <__d2b+0x96>
 800b2d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2d8:	4405      	add	r5, r0
 800b2da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2de:	603d      	str	r5, [r7, #0]
 800b2e0:	6030      	str	r0, [r6, #0]
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	b002      	add	sp, #8
 800b2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2ee:	e7d6      	b.n	800b29e <__d2b+0x2e>
 800b2f0:	6161      	str	r1, [r4, #20]
 800b2f2:	e7e7      	b.n	800b2c4 <__d2b+0x54>
 800b2f4:	a801      	add	r0, sp, #4
 800b2f6:	f7ff fd5d 	bl	800adb4 <__lo0bits>
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	6121      	str	r1, [r4, #16]
 800b300:	6163      	str	r3, [r4, #20]
 800b302:	3020      	adds	r0, #32
 800b304:	e7e5      	b.n	800b2d2 <__d2b+0x62>
 800b306:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b30a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b30e:	6038      	str	r0, [r7, #0]
 800b310:	6918      	ldr	r0, [r3, #16]
 800b312:	f7ff fd2f 	bl	800ad74 <__hi0bits>
 800b316:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b31a:	6031      	str	r1, [r6, #0]
 800b31c:	e7e1      	b.n	800b2e2 <__d2b+0x72>
 800b31e:	bf00      	nop
 800b320:	0800cb6f 	.word	0x0800cb6f
 800b324:	0800cb80 	.word	0x0800cb80

0800b328 <_calloc_r>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	fba1 5402 	umull	r5, r4, r1, r2
 800b32e:	b934      	cbnz	r4, 800b33e <_calloc_r+0x16>
 800b330:	4629      	mov	r1, r5
 800b332:	f000 f875 	bl	800b420 <_malloc_r>
 800b336:	4606      	mov	r6, r0
 800b338:	b928      	cbnz	r0, 800b346 <_calloc_r+0x1e>
 800b33a:	4630      	mov	r0, r6
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
 800b33e:	220c      	movs	r2, #12
 800b340:	2600      	movs	r6, #0
 800b342:	6002      	str	r2, [r0, #0]
 800b344:	e7f9      	b.n	800b33a <_calloc_r+0x12>
 800b346:	462a      	mov	r2, r5
 800b348:	4621      	mov	r1, r4
 800b34a:	f7fe f93f 	bl	80095cc <memset>
 800b34e:	e7f4      	b.n	800b33a <_calloc_r+0x12>

0800b350 <_free_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4605      	mov	r5, r0
 800b354:	2900      	cmp	r1, #0
 800b356:	d040      	beq.n	800b3da <_free_r+0x8a>
 800b358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b35c:	1f0c      	subs	r4, r1, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bfb8      	it	lt
 800b362:	18e4      	addlt	r4, r4, r3
 800b364:	f000 fa98 	bl	800b898 <__malloc_lock>
 800b368:	4a1c      	ldr	r2, [pc, #112]	; (800b3dc <_free_r+0x8c>)
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	b933      	cbnz	r3, 800b37c <_free_r+0x2c>
 800b36e:	6063      	str	r3, [r4, #4]
 800b370:	6014      	str	r4, [r2, #0]
 800b372:	4628      	mov	r0, r5
 800b374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b378:	f000 ba94 	b.w	800b8a4 <__malloc_unlock>
 800b37c:	42a3      	cmp	r3, r4
 800b37e:	d908      	bls.n	800b392 <_free_r+0x42>
 800b380:	6820      	ldr	r0, [r4, #0]
 800b382:	1821      	adds	r1, r4, r0
 800b384:	428b      	cmp	r3, r1
 800b386:	bf01      	itttt	eq
 800b388:	6819      	ldreq	r1, [r3, #0]
 800b38a:	685b      	ldreq	r3, [r3, #4]
 800b38c:	1809      	addeq	r1, r1, r0
 800b38e:	6021      	streq	r1, [r4, #0]
 800b390:	e7ed      	b.n	800b36e <_free_r+0x1e>
 800b392:	461a      	mov	r2, r3
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	b10b      	cbz	r3, 800b39c <_free_r+0x4c>
 800b398:	42a3      	cmp	r3, r4
 800b39a:	d9fa      	bls.n	800b392 <_free_r+0x42>
 800b39c:	6811      	ldr	r1, [r2, #0]
 800b39e:	1850      	adds	r0, r2, r1
 800b3a0:	42a0      	cmp	r0, r4
 800b3a2:	d10b      	bne.n	800b3bc <_free_r+0x6c>
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	4401      	add	r1, r0
 800b3a8:	1850      	adds	r0, r2, r1
 800b3aa:	4283      	cmp	r3, r0
 800b3ac:	6011      	str	r1, [r2, #0]
 800b3ae:	d1e0      	bne.n	800b372 <_free_r+0x22>
 800b3b0:	6818      	ldr	r0, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	4401      	add	r1, r0
 800b3b6:	6011      	str	r1, [r2, #0]
 800b3b8:	6053      	str	r3, [r2, #4]
 800b3ba:	e7da      	b.n	800b372 <_free_r+0x22>
 800b3bc:	d902      	bls.n	800b3c4 <_free_r+0x74>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	602b      	str	r3, [r5, #0]
 800b3c2:	e7d6      	b.n	800b372 <_free_r+0x22>
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	1821      	adds	r1, r4, r0
 800b3c8:	428b      	cmp	r3, r1
 800b3ca:	bf01      	itttt	eq
 800b3cc:	6819      	ldreq	r1, [r3, #0]
 800b3ce:	685b      	ldreq	r3, [r3, #4]
 800b3d0:	1809      	addeq	r1, r1, r0
 800b3d2:	6021      	streq	r1, [r4, #0]
 800b3d4:	6063      	str	r3, [r4, #4]
 800b3d6:	6054      	str	r4, [r2, #4]
 800b3d8:	e7cb      	b.n	800b372 <_free_r+0x22>
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	20000578 	.word	0x20000578

0800b3e0 <sbrk_aligned>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4e0e      	ldr	r6, [pc, #56]	; (800b41c <sbrk_aligned+0x3c>)
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	6831      	ldr	r1, [r6, #0]
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	b911      	cbnz	r1, 800b3f2 <sbrk_aligned+0x12>
 800b3ec:	f000 f9e8 	bl	800b7c0 <_sbrk_r>
 800b3f0:	6030      	str	r0, [r6, #0]
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f000 f9e3 	bl	800b7c0 <_sbrk_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d00a      	beq.n	800b414 <sbrk_aligned+0x34>
 800b3fe:	1cc4      	adds	r4, r0, #3
 800b400:	f024 0403 	bic.w	r4, r4, #3
 800b404:	42a0      	cmp	r0, r4
 800b406:	d007      	beq.n	800b418 <sbrk_aligned+0x38>
 800b408:	1a21      	subs	r1, r4, r0
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 f9d8 	bl	800b7c0 <_sbrk_r>
 800b410:	3001      	adds	r0, #1
 800b412:	d101      	bne.n	800b418 <sbrk_aligned+0x38>
 800b414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b418:	4620      	mov	r0, r4
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	2000057c 	.word	0x2000057c

0800b420 <_malloc_r>:
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	1ccd      	adds	r5, r1, #3
 800b426:	f025 0503 	bic.w	r5, r5, #3
 800b42a:	3508      	adds	r5, #8
 800b42c:	2d0c      	cmp	r5, #12
 800b42e:	bf38      	it	cc
 800b430:	250c      	movcc	r5, #12
 800b432:	2d00      	cmp	r5, #0
 800b434:	4607      	mov	r7, r0
 800b436:	db01      	blt.n	800b43c <_malloc_r+0x1c>
 800b438:	42a9      	cmp	r1, r5
 800b43a:	d905      	bls.n	800b448 <_malloc_r+0x28>
 800b43c:	230c      	movs	r3, #12
 800b43e:	2600      	movs	r6, #0
 800b440:	603b      	str	r3, [r7, #0]
 800b442:	4630      	mov	r0, r6
 800b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b448:	4e2e      	ldr	r6, [pc, #184]	; (800b504 <_malloc_r+0xe4>)
 800b44a:	f000 fa25 	bl	800b898 <__malloc_lock>
 800b44e:	6833      	ldr	r3, [r6, #0]
 800b450:	461c      	mov	r4, r3
 800b452:	bb34      	cbnz	r4, 800b4a2 <_malloc_r+0x82>
 800b454:	4629      	mov	r1, r5
 800b456:	4638      	mov	r0, r7
 800b458:	f7ff ffc2 	bl	800b3e0 <sbrk_aligned>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	4604      	mov	r4, r0
 800b460:	d14d      	bne.n	800b4fe <_malloc_r+0xde>
 800b462:	6834      	ldr	r4, [r6, #0]
 800b464:	4626      	mov	r6, r4
 800b466:	2e00      	cmp	r6, #0
 800b468:	d140      	bne.n	800b4ec <_malloc_r+0xcc>
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	4631      	mov	r1, r6
 800b46e:	4638      	mov	r0, r7
 800b470:	eb04 0803 	add.w	r8, r4, r3
 800b474:	f000 f9a4 	bl	800b7c0 <_sbrk_r>
 800b478:	4580      	cmp	r8, r0
 800b47a:	d13a      	bne.n	800b4f2 <_malloc_r+0xd2>
 800b47c:	6821      	ldr	r1, [r4, #0]
 800b47e:	3503      	adds	r5, #3
 800b480:	1a6d      	subs	r5, r5, r1
 800b482:	f025 0503 	bic.w	r5, r5, #3
 800b486:	3508      	adds	r5, #8
 800b488:	2d0c      	cmp	r5, #12
 800b48a:	bf38      	it	cc
 800b48c:	250c      	movcc	r5, #12
 800b48e:	4638      	mov	r0, r7
 800b490:	4629      	mov	r1, r5
 800b492:	f7ff ffa5 	bl	800b3e0 <sbrk_aligned>
 800b496:	3001      	adds	r0, #1
 800b498:	d02b      	beq.n	800b4f2 <_malloc_r+0xd2>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	442b      	add	r3, r5
 800b49e:	6023      	str	r3, [r4, #0]
 800b4a0:	e00e      	b.n	800b4c0 <_malloc_r+0xa0>
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	1b52      	subs	r2, r2, r5
 800b4a6:	d41e      	bmi.n	800b4e6 <_malloc_r+0xc6>
 800b4a8:	2a0b      	cmp	r2, #11
 800b4aa:	d916      	bls.n	800b4da <_malloc_r+0xba>
 800b4ac:	1961      	adds	r1, r4, r5
 800b4ae:	42a3      	cmp	r3, r4
 800b4b0:	6025      	str	r5, [r4, #0]
 800b4b2:	bf18      	it	ne
 800b4b4:	6059      	strne	r1, [r3, #4]
 800b4b6:	6863      	ldr	r3, [r4, #4]
 800b4b8:	bf08      	it	eq
 800b4ba:	6031      	streq	r1, [r6, #0]
 800b4bc:	5162      	str	r2, [r4, r5]
 800b4be:	604b      	str	r3, [r1, #4]
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f104 060b 	add.w	r6, r4, #11
 800b4c6:	f000 f9ed 	bl	800b8a4 <__malloc_unlock>
 800b4ca:	f026 0607 	bic.w	r6, r6, #7
 800b4ce:	1d23      	adds	r3, r4, #4
 800b4d0:	1af2      	subs	r2, r6, r3
 800b4d2:	d0b6      	beq.n	800b442 <_malloc_r+0x22>
 800b4d4:	1b9b      	subs	r3, r3, r6
 800b4d6:	50a3      	str	r3, [r4, r2]
 800b4d8:	e7b3      	b.n	800b442 <_malloc_r+0x22>
 800b4da:	6862      	ldr	r2, [r4, #4]
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	bf0c      	ite	eq
 800b4e0:	6032      	streq	r2, [r6, #0]
 800b4e2:	605a      	strne	r2, [r3, #4]
 800b4e4:	e7ec      	b.n	800b4c0 <_malloc_r+0xa0>
 800b4e6:	4623      	mov	r3, r4
 800b4e8:	6864      	ldr	r4, [r4, #4]
 800b4ea:	e7b2      	b.n	800b452 <_malloc_r+0x32>
 800b4ec:	4634      	mov	r4, r6
 800b4ee:	6876      	ldr	r6, [r6, #4]
 800b4f0:	e7b9      	b.n	800b466 <_malloc_r+0x46>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	4638      	mov	r0, r7
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	f000 f9d4 	bl	800b8a4 <__malloc_unlock>
 800b4fc:	e7a1      	b.n	800b442 <_malloc_r+0x22>
 800b4fe:	6025      	str	r5, [r4, #0]
 800b500:	e7de      	b.n	800b4c0 <_malloc_r+0xa0>
 800b502:	bf00      	nop
 800b504:	20000578 	.word	0x20000578

0800b508 <__ssputs_r>:
 800b508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50c:	688e      	ldr	r6, [r1, #8]
 800b50e:	4682      	mov	sl, r0
 800b510:	429e      	cmp	r6, r3
 800b512:	460c      	mov	r4, r1
 800b514:	4690      	mov	r8, r2
 800b516:	461f      	mov	r7, r3
 800b518:	d838      	bhi.n	800b58c <__ssputs_r+0x84>
 800b51a:	898a      	ldrh	r2, [r1, #12]
 800b51c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b520:	d032      	beq.n	800b588 <__ssputs_r+0x80>
 800b522:	6825      	ldr	r5, [r4, #0]
 800b524:	6909      	ldr	r1, [r1, #16]
 800b526:	3301      	adds	r3, #1
 800b528:	eba5 0901 	sub.w	r9, r5, r1
 800b52c:	6965      	ldr	r5, [r4, #20]
 800b52e:	444b      	add	r3, r9
 800b530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b538:	106d      	asrs	r5, r5, #1
 800b53a:	429d      	cmp	r5, r3
 800b53c:	bf38      	it	cc
 800b53e:	461d      	movcc	r5, r3
 800b540:	0553      	lsls	r3, r2, #21
 800b542:	d531      	bpl.n	800b5a8 <__ssputs_r+0xa0>
 800b544:	4629      	mov	r1, r5
 800b546:	f7ff ff6b 	bl	800b420 <_malloc_r>
 800b54a:	4606      	mov	r6, r0
 800b54c:	b950      	cbnz	r0, 800b564 <__ssputs_r+0x5c>
 800b54e:	230c      	movs	r3, #12
 800b550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b554:	f8ca 3000 	str.w	r3, [sl]
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b564:	464a      	mov	r2, r9
 800b566:	6921      	ldr	r1, [r4, #16]
 800b568:	f7ff fb4e 	bl	800ac08 <memcpy>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	6126      	str	r6, [r4, #16]
 800b57a:	444e      	add	r6, r9
 800b57c:	6026      	str	r6, [r4, #0]
 800b57e:	463e      	mov	r6, r7
 800b580:	6165      	str	r5, [r4, #20]
 800b582:	eba5 0509 	sub.w	r5, r5, r9
 800b586:	60a5      	str	r5, [r4, #8]
 800b588:	42be      	cmp	r6, r7
 800b58a:	d900      	bls.n	800b58e <__ssputs_r+0x86>
 800b58c:	463e      	mov	r6, r7
 800b58e:	4632      	mov	r2, r6
 800b590:	4641      	mov	r1, r8
 800b592:	6820      	ldr	r0, [r4, #0]
 800b594:	f000 f966 	bl	800b864 <memmove>
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	2000      	movs	r0, #0
 800b59c:	1b9b      	subs	r3, r3, r6
 800b59e:	60a3      	str	r3, [r4, #8]
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	4433      	add	r3, r6
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	e7db      	b.n	800b560 <__ssputs_r+0x58>
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	f000 f981 	bl	800b8b0 <_realloc_r>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d1e1      	bne.n	800b578 <__ssputs_r+0x70>
 800b5b4:	4650      	mov	r0, sl
 800b5b6:	6921      	ldr	r1, [r4, #16]
 800b5b8:	f7ff feca 	bl	800b350 <_free_r>
 800b5bc:	e7c7      	b.n	800b54e <__ssputs_r+0x46>
	...

0800b5c0 <_svfiprintf_r>:
 800b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	4698      	mov	r8, r3
 800b5c6:	898b      	ldrh	r3, [r1, #12]
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	061b      	lsls	r3, r3, #24
 800b5cc:	460d      	mov	r5, r1
 800b5ce:	4614      	mov	r4, r2
 800b5d0:	b09d      	sub	sp, #116	; 0x74
 800b5d2:	d50e      	bpl.n	800b5f2 <_svfiprintf_r+0x32>
 800b5d4:	690b      	ldr	r3, [r1, #16]
 800b5d6:	b963      	cbnz	r3, 800b5f2 <_svfiprintf_r+0x32>
 800b5d8:	2140      	movs	r1, #64	; 0x40
 800b5da:	f7ff ff21 	bl	800b420 <_malloc_r>
 800b5de:	6028      	str	r0, [r5, #0]
 800b5e0:	6128      	str	r0, [r5, #16]
 800b5e2:	b920      	cbnz	r0, 800b5ee <_svfiprintf_r+0x2e>
 800b5e4:	230c      	movs	r3, #12
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ec:	e0d1      	b.n	800b792 <_svfiprintf_r+0x1d2>
 800b5ee:	2340      	movs	r3, #64	; 0x40
 800b5f0:	616b      	str	r3, [r5, #20]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f6:	2320      	movs	r3, #32
 800b5f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5fc:	2330      	movs	r3, #48	; 0x30
 800b5fe:	f04f 0901 	mov.w	r9, #1
 800b602:	f8cd 800c 	str.w	r8, [sp, #12]
 800b606:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b7ac <_svfiprintf_r+0x1ec>
 800b60a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b60e:	4623      	mov	r3, r4
 800b610:	469a      	mov	sl, r3
 800b612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b616:	b10a      	cbz	r2, 800b61c <_svfiprintf_r+0x5c>
 800b618:	2a25      	cmp	r2, #37	; 0x25
 800b61a:	d1f9      	bne.n	800b610 <_svfiprintf_r+0x50>
 800b61c:	ebba 0b04 	subs.w	fp, sl, r4
 800b620:	d00b      	beq.n	800b63a <_svfiprintf_r+0x7a>
 800b622:	465b      	mov	r3, fp
 800b624:	4622      	mov	r2, r4
 800b626:	4629      	mov	r1, r5
 800b628:	4638      	mov	r0, r7
 800b62a:	f7ff ff6d 	bl	800b508 <__ssputs_r>
 800b62e:	3001      	adds	r0, #1
 800b630:	f000 80aa 	beq.w	800b788 <_svfiprintf_r+0x1c8>
 800b634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b636:	445a      	add	r2, fp
 800b638:	9209      	str	r2, [sp, #36]	; 0x24
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 80a2 	beq.w	800b788 <_svfiprintf_r+0x1c8>
 800b644:	2300      	movs	r3, #0
 800b646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b64e:	f10a 0a01 	add.w	sl, sl, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	9307      	str	r3, [sp, #28]
 800b656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b65a:	931a      	str	r3, [sp, #104]	; 0x68
 800b65c:	4654      	mov	r4, sl
 800b65e:	2205      	movs	r2, #5
 800b660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b664:	4851      	ldr	r0, [pc, #324]	; (800b7ac <_svfiprintf_r+0x1ec>)
 800b666:	f7ff fac1 	bl	800abec <memchr>
 800b66a:	9a04      	ldr	r2, [sp, #16]
 800b66c:	b9d8      	cbnz	r0, 800b6a6 <_svfiprintf_r+0xe6>
 800b66e:	06d0      	lsls	r0, r2, #27
 800b670:	bf44      	itt	mi
 800b672:	2320      	movmi	r3, #32
 800b674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b678:	0711      	lsls	r1, r2, #28
 800b67a:	bf44      	itt	mi
 800b67c:	232b      	movmi	r3, #43	; 0x2b
 800b67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b682:	f89a 3000 	ldrb.w	r3, [sl]
 800b686:	2b2a      	cmp	r3, #42	; 0x2a
 800b688:	d015      	beq.n	800b6b6 <_svfiprintf_r+0xf6>
 800b68a:	4654      	mov	r4, sl
 800b68c:	2000      	movs	r0, #0
 800b68e:	f04f 0c0a 	mov.w	ip, #10
 800b692:	9a07      	ldr	r2, [sp, #28]
 800b694:	4621      	mov	r1, r4
 800b696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b69a:	3b30      	subs	r3, #48	; 0x30
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	d94e      	bls.n	800b73e <_svfiprintf_r+0x17e>
 800b6a0:	b1b0      	cbz	r0, 800b6d0 <_svfiprintf_r+0x110>
 800b6a2:	9207      	str	r2, [sp, #28]
 800b6a4:	e014      	b.n	800b6d0 <_svfiprintf_r+0x110>
 800b6a6:	eba0 0308 	sub.w	r3, r0, r8
 800b6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	46a2      	mov	sl, r4
 800b6b2:	9304      	str	r3, [sp, #16]
 800b6b4:	e7d2      	b.n	800b65c <_svfiprintf_r+0x9c>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	1d19      	adds	r1, r3, #4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	9103      	str	r1, [sp, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bfbb      	ittet	lt
 800b6c2:	425b      	neglt	r3, r3
 800b6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c8:	9307      	strge	r3, [sp, #28]
 800b6ca:	9307      	strlt	r3, [sp, #28]
 800b6cc:	bfb8      	it	lt
 800b6ce:	9204      	strlt	r2, [sp, #16]
 800b6d0:	7823      	ldrb	r3, [r4, #0]
 800b6d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b6d4:	d10c      	bne.n	800b6f0 <_svfiprintf_r+0x130>
 800b6d6:	7863      	ldrb	r3, [r4, #1]
 800b6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6da:	d135      	bne.n	800b748 <_svfiprintf_r+0x188>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	3402      	adds	r4, #2
 800b6e0:	1d1a      	adds	r2, r3, #4
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	9203      	str	r2, [sp, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	bfb8      	it	lt
 800b6ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6ee:	9305      	str	r3, [sp, #20]
 800b6f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b7b0 <_svfiprintf_r+0x1f0>
 800b6f4:	2203      	movs	r2, #3
 800b6f6:	4650      	mov	r0, sl
 800b6f8:	7821      	ldrb	r1, [r4, #0]
 800b6fa:	f7ff fa77 	bl	800abec <memchr>
 800b6fe:	b140      	cbz	r0, 800b712 <_svfiprintf_r+0x152>
 800b700:	2340      	movs	r3, #64	; 0x40
 800b702:	eba0 000a 	sub.w	r0, r0, sl
 800b706:	fa03 f000 	lsl.w	r0, r3, r0
 800b70a:	9b04      	ldr	r3, [sp, #16]
 800b70c:	3401      	adds	r4, #1
 800b70e:	4303      	orrs	r3, r0
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b716:	2206      	movs	r2, #6
 800b718:	4826      	ldr	r0, [pc, #152]	; (800b7b4 <_svfiprintf_r+0x1f4>)
 800b71a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b71e:	f7ff fa65 	bl	800abec <memchr>
 800b722:	2800      	cmp	r0, #0
 800b724:	d038      	beq.n	800b798 <_svfiprintf_r+0x1d8>
 800b726:	4b24      	ldr	r3, [pc, #144]	; (800b7b8 <_svfiprintf_r+0x1f8>)
 800b728:	bb1b      	cbnz	r3, 800b772 <_svfiprintf_r+0x1b2>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	3307      	adds	r3, #7
 800b72e:	f023 0307 	bic.w	r3, r3, #7
 800b732:	3308      	adds	r3, #8
 800b734:	9303      	str	r3, [sp, #12]
 800b736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b738:	4433      	add	r3, r6
 800b73a:	9309      	str	r3, [sp, #36]	; 0x24
 800b73c:	e767      	b.n	800b60e <_svfiprintf_r+0x4e>
 800b73e:	460c      	mov	r4, r1
 800b740:	2001      	movs	r0, #1
 800b742:	fb0c 3202 	mla	r2, ip, r2, r3
 800b746:	e7a5      	b.n	800b694 <_svfiprintf_r+0xd4>
 800b748:	2300      	movs	r3, #0
 800b74a:	f04f 0c0a 	mov.w	ip, #10
 800b74e:	4619      	mov	r1, r3
 800b750:	3401      	adds	r4, #1
 800b752:	9305      	str	r3, [sp, #20]
 800b754:	4620      	mov	r0, r4
 800b756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b75a:	3a30      	subs	r2, #48	; 0x30
 800b75c:	2a09      	cmp	r2, #9
 800b75e:	d903      	bls.n	800b768 <_svfiprintf_r+0x1a8>
 800b760:	2b00      	cmp	r3, #0
 800b762:	d0c5      	beq.n	800b6f0 <_svfiprintf_r+0x130>
 800b764:	9105      	str	r1, [sp, #20]
 800b766:	e7c3      	b.n	800b6f0 <_svfiprintf_r+0x130>
 800b768:	4604      	mov	r4, r0
 800b76a:	2301      	movs	r3, #1
 800b76c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b770:	e7f0      	b.n	800b754 <_svfiprintf_r+0x194>
 800b772:	ab03      	add	r3, sp, #12
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	462a      	mov	r2, r5
 800b778:	4638      	mov	r0, r7
 800b77a:	4b10      	ldr	r3, [pc, #64]	; (800b7bc <_svfiprintf_r+0x1fc>)
 800b77c:	a904      	add	r1, sp, #16
 800b77e:	f7fd ffcb 	bl	8009718 <_printf_float>
 800b782:	1c42      	adds	r2, r0, #1
 800b784:	4606      	mov	r6, r0
 800b786:	d1d6      	bne.n	800b736 <_svfiprintf_r+0x176>
 800b788:	89ab      	ldrh	r3, [r5, #12]
 800b78a:	065b      	lsls	r3, r3, #25
 800b78c:	f53f af2c 	bmi.w	800b5e8 <_svfiprintf_r+0x28>
 800b790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b792:	b01d      	add	sp, #116	; 0x74
 800b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b798:	ab03      	add	r3, sp, #12
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	462a      	mov	r2, r5
 800b79e:	4638      	mov	r0, r7
 800b7a0:	4b06      	ldr	r3, [pc, #24]	; (800b7bc <_svfiprintf_r+0x1fc>)
 800b7a2:	a904      	add	r1, sp, #16
 800b7a4:	f7fe fa54 	bl	8009c50 <_printf_i>
 800b7a8:	e7eb      	b.n	800b782 <_svfiprintf_r+0x1c2>
 800b7aa:	bf00      	nop
 800b7ac:	0800ccdc 	.word	0x0800ccdc
 800b7b0:	0800cce2 	.word	0x0800cce2
 800b7b4:	0800cce6 	.word	0x0800cce6
 800b7b8:	08009719 	.word	0x08009719
 800b7bc:	0800b509 	.word	0x0800b509

0800b7c0 <_sbrk_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	4d05      	ldr	r5, [pc, #20]	; (800b7dc <_sbrk_r+0x1c>)
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	602b      	str	r3, [r5, #0]
 800b7cc:	f7f9 f88a 	bl	80048e4 <_sbrk>
 800b7d0:	1c43      	adds	r3, r0, #1
 800b7d2:	d102      	bne.n	800b7da <_sbrk_r+0x1a>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	b103      	cbz	r3, 800b7da <_sbrk_r+0x1a>
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	bd38      	pop	{r3, r4, r5, pc}
 800b7dc:	20000580 	.word	0x20000580

0800b7e0 <__assert_func>:
 800b7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7e2:	4614      	mov	r4, r2
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <__assert_func+0x2c>)
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68d8      	ldr	r0, [r3, #12]
 800b7ee:	b14c      	cbz	r4, 800b804 <__assert_func+0x24>
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <__assert_func+0x30>)
 800b7f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7f6:	9100      	str	r1, [sp, #0]
 800b7f8:	462b      	mov	r3, r5
 800b7fa:	4906      	ldr	r1, [pc, #24]	; (800b814 <__assert_func+0x34>)
 800b7fc:	f000 f80e 	bl	800b81c <fiprintf>
 800b800:	f000 faaa 	bl	800bd58 <abort>
 800b804:	4b04      	ldr	r3, [pc, #16]	; (800b818 <__assert_func+0x38>)
 800b806:	461c      	mov	r4, r3
 800b808:	e7f3      	b.n	800b7f2 <__assert_func+0x12>
 800b80a:	bf00      	nop
 800b80c:	200000b8 	.word	0x200000b8
 800b810:	0800cced 	.word	0x0800cced
 800b814:	0800ccfa 	.word	0x0800ccfa
 800b818:	0800cd28 	.word	0x0800cd28

0800b81c <fiprintf>:
 800b81c:	b40e      	push	{r1, r2, r3}
 800b81e:	b503      	push	{r0, r1, lr}
 800b820:	4601      	mov	r1, r0
 800b822:	ab03      	add	r3, sp, #12
 800b824:	4805      	ldr	r0, [pc, #20]	; (800b83c <fiprintf+0x20>)
 800b826:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82a:	6800      	ldr	r0, [r0, #0]
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	f000 f895 	bl	800b95c <_vfiprintf_r>
 800b832:	b002      	add	sp, #8
 800b834:	f85d eb04 	ldr.w	lr, [sp], #4
 800b838:	b003      	add	sp, #12
 800b83a:	4770      	bx	lr
 800b83c:	200000b8 	.word	0x200000b8

0800b840 <__ascii_mbtowc>:
 800b840:	b082      	sub	sp, #8
 800b842:	b901      	cbnz	r1, 800b846 <__ascii_mbtowc+0x6>
 800b844:	a901      	add	r1, sp, #4
 800b846:	b142      	cbz	r2, 800b85a <__ascii_mbtowc+0x1a>
 800b848:	b14b      	cbz	r3, 800b85e <__ascii_mbtowc+0x1e>
 800b84a:	7813      	ldrb	r3, [r2, #0]
 800b84c:	600b      	str	r3, [r1, #0]
 800b84e:	7812      	ldrb	r2, [r2, #0]
 800b850:	1e10      	subs	r0, r2, #0
 800b852:	bf18      	it	ne
 800b854:	2001      	movne	r0, #1
 800b856:	b002      	add	sp, #8
 800b858:	4770      	bx	lr
 800b85a:	4610      	mov	r0, r2
 800b85c:	e7fb      	b.n	800b856 <__ascii_mbtowc+0x16>
 800b85e:	f06f 0001 	mvn.w	r0, #1
 800b862:	e7f8      	b.n	800b856 <__ascii_mbtowc+0x16>

0800b864 <memmove>:
 800b864:	4288      	cmp	r0, r1
 800b866:	b510      	push	{r4, lr}
 800b868:	eb01 0402 	add.w	r4, r1, r2
 800b86c:	d902      	bls.n	800b874 <memmove+0x10>
 800b86e:	4284      	cmp	r4, r0
 800b870:	4623      	mov	r3, r4
 800b872:	d807      	bhi.n	800b884 <memmove+0x20>
 800b874:	1e43      	subs	r3, r0, #1
 800b876:	42a1      	cmp	r1, r4
 800b878:	d008      	beq.n	800b88c <memmove+0x28>
 800b87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b882:	e7f8      	b.n	800b876 <memmove+0x12>
 800b884:	4601      	mov	r1, r0
 800b886:	4402      	add	r2, r0
 800b888:	428a      	cmp	r2, r1
 800b88a:	d100      	bne.n	800b88e <memmove+0x2a>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b896:	e7f7      	b.n	800b888 <memmove+0x24>

0800b898 <__malloc_lock>:
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__malloc_lock+0x8>)
 800b89a:	f000 bc19 	b.w	800c0d0 <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	20000584 	.word	0x20000584

0800b8a4 <__malloc_unlock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__malloc_unlock+0x8>)
 800b8a6:	f000 bc14 	b.w	800c0d2 <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	20000584 	.word	0x20000584

0800b8b0 <_realloc_r>:
 800b8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	4614      	mov	r4, r2
 800b8b8:	460e      	mov	r6, r1
 800b8ba:	b921      	cbnz	r1, 800b8c6 <_realloc_r+0x16>
 800b8bc:	4611      	mov	r1, r2
 800b8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c2:	f7ff bdad 	b.w	800b420 <_malloc_r>
 800b8c6:	b92a      	cbnz	r2, 800b8d4 <_realloc_r+0x24>
 800b8c8:	f7ff fd42 	bl	800b350 <_free_r>
 800b8cc:	4625      	mov	r5, r4
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d4:	f000 fc64 	bl	800c1a0 <_malloc_usable_size_r>
 800b8d8:	4284      	cmp	r4, r0
 800b8da:	4607      	mov	r7, r0
 800b8dc:	d802      	bhi.n	800b8e4 <_realloc_r+0x34>
 800b8de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8e2:	d812      	bhi.n	800b90a <_realloc_r+0x5a>
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	f7ff fd9a 	bl	800b420 <_malloc_r>
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d0ed      	beq.n	800b8ce <_realloc_r+0x1e>
 800b8f2:	42bc      	cmp	r4, r7
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	bf28      	it	cs
 800b8fa:	463a      	movcs	r2, r7
 800b8fc:	f7ff f984 	bl	800ac08 <memcpy>
 800b900:	4631      	mov	r1, r6
 800b902:	4640      	mov	r0, r8
 800b904:	f7ff fd24 	bl	800b350 <_free_r>
 800b908:	e7e1      	b.n	800b8ce <_realloc_r+0x1e>
 800b90a:	4635      	mov	r5, r6
 800b90c:	e7df      	b.n	800b8ce <_realloc_r+0x1e>

0800b90e <__sfputc_r>:
 800b90e:	6893      	ldr	r3, [r2, #8]
 800b910:	b410      	push	{r4}
 800b912:	3b01      	subs	r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	6093      	str	r3, [r2, #8]
 800b918:	da07      	bge.n	800b92a <__sfputc_r+0x1c>
 800b91a:	6994      	ldr	r4, [r2, #24]
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	db01      	blt.n	800b924 <__sfputc_r+0x16>
 800b920:	290a      	cmp	r1, #10
 800b922:	d102      	bne.n	800b92a <__sfputc_r+0x1c>
 800b924:	bc10      	pop	{r4}
 800b926:	f000 b949 	b.w	800bbbc <__swbuf_r>
 800b92a:	6813      	ldr	r3, [r2, #0]
 800b92c:	1c58      	adds	r0, r3, #1
 800b92e:	6010      	str	r0, [r2, #0]
 800b930:	7019      	strb	r1, [r3, #0]
 800b932:	4608      	mov	r0, r1
 800b934:	bc10      	pop	{r4}
 800b936:	4770      	bx	lr

0800b938 <__sfputs_r>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	4606      	mov	r6, r0
 800b93c:	460f      	mov	r7, r1
 800b93e:	4614      	mov	r4, r2
 800b940:	18d5      	adds	r5, r2, r3
 800b942:	42ac      	cmp	r4, r5
 800b944:	d101      	bne.n	800b94a <__sfputs_r+0x12>
 800b946:	2000      	movs	r0, #0
 800b948:	e007      	b.n	800b95a <__sfputs_r+0x22>
 800b94a:	463a      	mov	r2, r7
 800b94c:	4630      	mov	r0, r6
 800b94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b952:	f7ff ffdc 	bl	800b90e <__sfputc_r>
 800b956:	1c43      	adds	r3, r0, #1
 800b958:	d1f3      	bne.n	800b942 <__sfputs_r+0xa>
 800b95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b95c <_vfiprintf_r>:
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	460d      	mov	r5, r1
 800b962:	4614      	mov	r4, r2
 800b964:	4698      	mov	r8, r3
 800b966:	4606      	mov	r6, r0
 800b968:	b09d      	sub	sp, #116	; 0x74
 800b96a:	b118      	cbz	r0, 800b974 <_vfiprintf_r+0x18>
 800b96c:	6983      	ldr	r3, [r0, #24]
 800b96e:	b90b      	cbnz	r3, 800b974 <_vfiprintf_r+0x18>
 800b970:	f000 fb10 	bl	800bf94 <__sinit>
 800b974:	4b89      	ldr	r3, [pc, #548]	; (800bb9c <_vfiprintf_r+0x240>)
 800b976:	429d      	cmp	r5, r3
 800b978:	d11b      	bne.n	800b9b2 <_vfiprintf_r+0x56>
 800b97a:	6875      	ldr	r5, [r6, #4]
 800b97c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b97e:	07d9      	lsls	r1, r3, #31
 800b980:	d405      	bmi.n	800b98e <_vfiprintf_r+0x32>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	059a      	lsls	r2, r3, #22
 800b986:	d402      	bmi.n	800b98e <_vfiprintf_r+0x32>
 800b988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b98a:	f000 fba1 	bl	800c0d0 <__retarget_lock_acquire_recursive>
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	071b      	lsls	r3, r3, #28
 800b992:	d501      	bpl.n	800b998 <_vfiprintf_r+0x3c>
 800b994:	692b      	ldr	r3, [r5, #16]
 800b996:	b9eb      	cbnz	r3, 800b9d4 <_vfiprintf_r+0x78>
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f000 f96e 	bl	800bc7c <__swsetup_r>
 800b9a0:	b1c0      	cbz	r0, 800b9d4 <_vfiprintf_r+0x78>
 800b9a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a4:	07dc      	lsls	r4, r3, #31
 800b9a6:	d50e      	bpl.n	800b9c6 <_vfiprintf_r+0x6a>
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ac:	b01d      	add	sp, #116	; 0x74
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	4b7b      	ldr	r3, [pc, #492]	; (800bba0 <_vfiprintf_r+0x244>)
 800b9b4:	429d      	cmp	r5, r3
 800b9b6:	d101      	bne.n	800b9bc <_vfiprintf_r+0x60>
 800b9b8:	68b5      	ldr	r5, [r6, #8]
 800b9ba:	e7df      	b.n	800b97c <_vfiprintf_r+0x20>
 800b9bc:	4b79      	ldr	r3, [pc, #484]	; (800bba4 <_vfiprintf_r+0x248>)
 800b9be:	429d      	cmp	r5, r3
 800b9c0:	bf08      	it	eq
 800b9c2:	68f5      	ldreq	r5, [r6, #12]
 800b9c4:	e7da      	b.n	800b97c <_vfiprintf_r+0x20>
 800b9c6:	89ab      	ldrh	r3, [r5, #12]
 800b9c8:	0598      	lsls	r0, r3, #22
 800b9ca:	d4ed      	bmi.n	800b9a8 <_vfiprintf_r+0x4c>
 800b9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ce:	f000 fb80 	bl	800c0d2 <__retarget_lock_release_recursive>
 800b9d2:	e7e9      	b.n	800b9a8 <_vfiprintf_r+0x4c>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d8:	2320      	movs	r3, #32
 800b9da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9de:	2330      	movs	r3, #48	; 0x30
 800b9e0:	f04f 0901 	mov.w	r9, #1
 800b9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bba8 <_vfiprintf_r+0x24c>
 800b9ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9f0:	4623      	mov	r3, r4
 800b9f2:	469a      	mov	sl, r3
 800b9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9f8:	b10a      	cbz	r2, 800b9fe <_vfiprintf_r+0xa2>
 800b9fa:	2a25      	cmp	r2, #37	; 0x25
 800b9fc:	d1f9      	bne.n	800b9f2 <_vfiprintf_r+0x96>
 800b9fe:	ebba 0b04 	subs.w	fp, sl, r4
 800ba02:	d00b      	beq.n	800ba1c <_vfiprintf_r+0xc0>
 800ba04:	465b      	mov	r3, fp
 800ba06:	4622      	mov	r2, r4
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7ff ff94 	bl	800b938 <__sfputs_r>
 800ba10:	3001      	adds	r0, #1
 800ba12:	f000 80aa 	beq.w	800bb6a <_vfiprintf_r+0x20e>
 800ba16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba18:	445a      	add	r2, fp
 800ba1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 80a2 	beq.w	800bb6a <_vfiprintf_r+0x20e>
 800ba26:	2300      	movs	r3, #0
 800ba28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba30:	f10a 0a01 	add.w	sl, sl, #1
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	9307      	str	r3, [sp, #28]
 800ba38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba3e:	4654      	mov	r4, sl
 800ba40:	2205      	movs	r2, #5
 800ba42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba46:	4858      	ldr	r0, [pc, #352]	; (800bba8 <_vfiprintf_r+0x24c>)
 800ba48:	f7ff f8d0 	bl	800abec <memchr>
 800ba4c:	9a04      	ldr	r2, [sp, #16]
 800ba4e:	b9d8      	cbnz	r0, 800ba88 <_vfiprintf_r+0x12c>
 800ba50:	06d1      	lsls	r1, r2, #27
 800ba52:	bf44      	itt	mi
 800ba54:	2320      	movmi	r3, #32
 800ba56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba5a:	0713      	lsls	r3, r2, #28
 800ba5c:	bf44      	itt	mi
 800ba5e:	232b      	movmi	r3, #43	; 0x2b
 800ba60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba64:	f89a 3000 	ldrb.w	r3, [sl]
 800ba68:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6a:	d015      	beq.n	800ba98 <_vfiprintf_r+0x13c>
 800ba6c:	4654      	mov	r4, sl
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f04f 0c0a 	mov.w	ip, #10
 800ba74:	9a07      	ldr	r2, [sp, #28]
 800ba76:	4621      	mov	r1, r4
 800ba78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba7c:	3b30      	subs	r3, #48	; 0x30
 800ba7e:	2b09      	cmp	r3, #9
 800ba80:	d94e      	bls.n	800bb20 <_vfiprintf_r+0x1c4>
 800ba82:	b1b0      	cbz	r0, 800bab2 <_vfiprintf_r+0x156>
 800ba84:	9207      	str	r2, [sp, #28]
 800ba86:	e014      	b.n	800bab2 <_vfiprintf_r+0x156>
 800ba88:	eba0 0308 	sub.w	r3, r0, r8
 800ba8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba90:	4313      	orrs	r3, r2
 800ba92:	46a2      	mov	sl, r4
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	e7d2      	b.n	800ba3e <_vfiprintf_r+0xe2>
 800ba98:	9b03      	ldr	r3, [sp, #12]
 800ba9a:	1d19      	adds	r1, r3, #4
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	9103      	str	r1, [sp, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	bfbb      	ittet	lt
 800baa4:	425b      	neglt	r3, r3
 800baa6:	f042 0202 	orrlt.w	r2, r2, #2
 800baaa:	9307      	strge	r3, [sp, #28]
 800baac:	9307      	strlt	r3, [sp, #28]
 800baae:	bfb8      	it	lt
 800bab0:	9204      	strlt	r2, [sp, #16]
 800bab2:	7823      	ldrb	r3, [r4, #0]
 800bab4:	2b2e      	cmp	r3, #46	; 0x2e
 800bab6:	d10c      	bne.n	800bad2 <_vfiprintf_r+0x176>
 800bab8:	7863      	ldrb	r3, [r4, #1]
 800baba:	2b2a      	cmp	r3, #42	; 0x2a
 800babc:	d135      	bne.n	800bb2a <_vfiprintf_r+0x1ce>
 800babe:	9b03      	ldr	r3, [sp, #12]
 800bac0:	3402      	adds	r4, #2
 800bac2:	1d1a      	adds	r2, r3, #4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	9203      	str	r2, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfb8      	it	lt
 800bacc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bad0:	9305      	str	r3, [sp, #20]
 800bad2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bbac <_vfiprintf_r+0x250>
 800bad6:	2203      	movs	r2, #3
 800bad8:	4650      	mov	r0, sl
 800bada:	7821      	ldrb	r1, [r4, #0]
 800badc:	f7ff f886 	bl	800abec <memchr>
 800bae0:	b140      	cbz	r0, 800baf4 <_vfiprintf_r+0x198>
 800bae2:	2340      	movs	r3, #64	; 0x40
 800bae4:	eba0 000a 	sub.w	r0, r0, sl
 800bae8:	fa03 f000 	lsl.w	r0, r3, r0
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	3401      	adds	r4, #1
 800baf0:	4303      	orrs	r3, r0
 800baf2:	9304      	str	r3, [sp, #16]
 800baf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf8:	2206      	movs	r2, #6
 800bafa:	482d      	ldr	r0, [pc, #180]	; (800bbb0 <_vfiprintf_r+0x254>)
 800bafc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb00:	f7ff f874 	bl	800abec <memchr>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d03f      	beq.n	800bb88 <_vfiprintf_r+0x22c>
 800bb08:	4b2a      	ldr	r3, [pc, #168]	; (800bbb4 <_vfiprintf_r+0x258>)
 800bb0a:	bb1b      	cbnz	r3, 800bb54 <_vfiprintf_r+0x1f8>
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	3307      	adds	r3, #7
 800bb10:	f023 0307 	bic.w	r3, r3, #7
 800bb14:	3308      	adds	r3, #8
 800bb16:	9303      	str	r3, [sp, #12]
 800bb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1a:	443b      	add	r3, r7
 800bb1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1e:	e767      	b.n	800b9f0 <_vfiprintf_r+0x94>
 800bb20:	460c      	mov	r4, r1
 800bb22:	2001      	movs	r0, #1
 800bb24:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb28:	e7a5      	b.n	800ba76 <_vfiprintf_r+0x11a>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f04f 0c0a 	mov.w	ip, #10
 800bb30:	4619      	mov	r1, r3
 800bb32:	3401      	adds	r4, #1
 800bb34:	9305      	str	r3, [sp, #20]
 800bb36:	4620      	mov	r0, r4
 800bb38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb3c:	3a30      	subs	r2, #48	; 0x30
 800bb3e:	2a09      	cmp	r2, #9
 800bb40:	d903      	bls.n	800bb4a <_vfiprintf_r+0x1ee>
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d0c5      	beq.n	800bad2 <_vfiprintf_r+0x176>
 800bb46:	9105      	str	r1, [sp, #20]
 800bb48:	e7c3      	b.n	800bad2 <_vfiprintf_r+0x176>
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb52:	e7f0      	b.n	800bb36 <_vfiprintf_r+0x1da>
 800bb54:	ab03      	add	r3, sp, #12
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	462a      	mov	r2, r5
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	4b16      	ldr	r3, [pc, #88]	; (800bbb8 <_vfiprintf_r+0x25c>)
 800bb5e:	a904      	add	r1, sp, #16
 800bb60:	f7fd fdda 	bl	8009718 <_printf_float>
 800bb64:	4607      	mov	r7, r0
 800bb66:	1c78      	adds	r0, r7, #1
 800bb68:	d1d6      	bne.n	800bb18 <_vfiprintf_r+0x1bc>
 800bb6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb6c:	07d9      	lsls	r1, r3, #31
 800bb6e:	d405      	bmi.n	800bb7c <_vfiprintf_r+0x220>
 800bb70:	89ab      	ldrh	r3, [r5, #12]
 800bb72:	059a      	lsls	r2, r3, #22
 800bb74:	d402      	bmi.n	800bb7c <_vfiprintf_r+0x220>
 800bb76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb78:	f000 faab 	bl	800c0d2 <__retarget_lock_release_recursive>
 800bb7c:	89ab      	ldrh	r3, [r5, #12]
 800bb7e:	065b      	lsls	r3, r3, #25
 800bb80:	f53f af12 	bmi.w	800b9a8 <_vfiprintf_r+0x4c>
 800bb84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb86:	e711      	b.n	800b9ac <_vfiprintf_r+0x50>
 800bb88:	ab03      	add	r3, sp, #12
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	462a      	mov	r2, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	4b09      	ldr	r3, [pc, #36]	; (800bbb8 <_vfiprintf_r+0x25c>)
 800bb92:	a904      	add	r1, sp, #16
 800bb94:	f7fe f85c 	bl	8009c50 <_printf_i>
 800bb98:	e7e4      	b.n	800bb64 <_vfiprintf_r+0x208>
 800bb9a:	bf00      	nop
 800bb9c:	0800ce54 	.word	0x0800ce54
 800bba0:	0800ce74 	.word	0x0800ce74
 800bba4:	0800ce34 	.word	0x0800ce34
 800bba8:	0800ccdc 	.word	0x0800ccdc
 800bbac:	0800cce2 	.word	0x0800cce2
 800bbb0:	0800cce6 	.word	0x0800cce6
 800bbb4:	08009719 	.word	0x08009719
 800bbb8:	0800b939 	.word	0x0800b939

0800bbbc <__swbuf_r>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	460e      	mov	r6, r1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	b118      	cbz	r0, 800bbce <__swbuf_r+0x12>
 800bbc6:	6983      	ldr	r3, [r0, #24]
 800bbc8:	b90b      	cbnz	r3, 800bbce <__swbuf_r+0x12>
 800bbca:	f000 f9e3 	bl	800bf94 <__sinit>
 800bbce:	4b21      	ldr	r3, [pc, #132]	; (800bc54 <__swbuf_r+0x98>)
 800bbd0:	429c      	cmp	r4, r3
 800bbd2:	d12b      	bne.n	800bc2c <__swbuf_r+0x70>
 800bbd4:	686c      	ldr	r4, [r5, #4]
 800bbd6:	69a3      	ldr	r3, [r4, #24]
 800bbd8:	60a3      	str	r3, [r4, #8]
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	071a      	lsls	r2, r3, #28
 800bbde:	d52f      	bpl.n	800bc40 <__swbuf_r+0x84>
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	b36b      	cbz	r3, 800bc40 <__swbuf_r+0x84>
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	6820      	ldr	r0, [r4, #0]
 800bbe8:	b2f6      	uxtb	r6, r6
 800bbea:	1ac0      	subs	r0, r0, r3
 800bbec:	6963      	ldr	r3, [r4, #20]
 800bbee:	4637      	mov	r7, r6
 800bbf0:	4283      	cmp	r3, r0
 800bbf2:	dc04      	bgt.n	800bbfe <__swbuf_r+0x42>
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f000 f938 	bl	800be6c <_fflush_r>
 800bbfc:	bb30      	cbnz	r0, 800bc4c <__swbuf_r+0x90>
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	3001      	adds	r0, #1
 800bc02:	3b01      	subs	r3, #1
 800bc04:	60a3      	str	r3, [r4, #8]
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	6022      	str	r2, [r4, #0]
 800bc0c:	701e      	strb	r6, [r3, #0]
 800bc0e:	6963      	ldr	r3, [r4, #20]
 800bc10:	4283      	cmp	r3, r0
 800bc12:	d004      	beq.n	800bc1e <__swbuf_r+0x62>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	07db      	lsls	r3, r3, #31
 800bc18:	d506      	bpl.n	800bc28 <__swbuf_r+0x6c>
 800bc1a:	2e0a      	cmp	r6, #10
 800bc1c:	d104      	bne.n	800bc28 <__swbuf_r+0x6c>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4628      	mov	r0, r5
 800bc22:	f000 f923 	bl	800be6c <_fflush_r>
 800bc26:	b988      	cbnz	r0, 800bc4c <__swbuf_r+0x90>
 800bc28:	4638      	mov	r0, r7
 800bc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc2c:	4b0a      	ldr	r3, [pc, #40]	; (800bc58 <__swbuf_r+0x9c>)
 800bc2e:	429c      	cmp	r4, r3
 800bc30:	d101      	bne.n	800bc36 <__swbuf_r+0x7a>
 800bc32:	68ac      	ldr	r4, [r5, #8]
 800bc34:	e7cf      	b.n	800bbd6 <__swbuf_r+0x1a>
 800bc36:	4b09      	ldr	r3, [pc, #36]	; (800bc5c <__swbuf_r+0xa0>)
 800bc38:	429c      	cmp	r4, r3
 800bc3a:	bf08      	it	eq
 800bc3c:	68ec      	ldreq	r4, [r5, #12]
 800bc3e:	e7ca      	b.n	800bbd6 <__swbuf_r+0x1a>
 800bc40:	4621      	mov	r1, r4
 800bc42:	4628      	mov	r0, r5
 800bc44:	f000 f81a 	bl	800bc7c <__swsetup_r>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d0cb      	beq.n	800bbe4 <__swbuf_r+0x28>
 800bc4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc50:	e7ea      	b.n	800bc28 <__swbuf_r+0x6c>
 800bc52:	bf00      	nop
 800bc54:	0800ce54 	.word	0x0800ce54
 800bc58:	0800ce74 	.word	0x0800ce74
 800bc5c:	0800ce34 	.word	0x0800ce34

0800bc60 <__ascii_wctomb>:
 800bc60:	4603      	mov	r3, r0
 800bc62:	4608      	mov	r0, r1
 800bc64:	b141      	cbz	r1, 800bc78 <__ascii_wctomb+0x18>
 800bc66:	2aff      	cmp	r2, #255	; 0xff
 800bc68:	d904      	bls.n	800bc74 <__ascii_wctomb+0x14>
 800bc6a:	228a      	movs	r2, #138	; 0x8a
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	4770      	bx	lr
 800bc74:	2001      	movs	r0, #1
 800bc76:	700a      	strb	r2, [r1, #0]
 800bc78:	4770      	bx	lr
	...

0800bc7c <__swsetup_r>:
 800bc7c:	4b32      	ldr	r3, [pc, #200]	; (800bd48 <__swsetup_r+0xcc>)
 800bc7e:	b570      	push	{r4, r5, r6, lr}
 800bc80:	681d      	ldr	r5, [r3, #0]
 800bc82:	4606      	mov	r6, r0
 800bc84:	460c      	mov	r4, r1
 800bc86:	b125      	cbz	r5, 800bc92 <__swsetup_r+0x16>
 800bc88:	69ab      	ldr	r3, [r5, #24]
 800bc8a:	b913      	cbnz	r3, 800bc92 <__swsetup_r+0x16>
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	f000 f981 	bl	800bf94 <__sinit>
 800bc92:	4b2e      	ldr	r3, [pc, #184]	; (800bd4c <__swsetup_r+0xd0>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	d10f      	bne.n	800bcb8 <__swsetup_r+0x3c>
 800bc98:	686c      	ldr	r4, [r5, #4]
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bca0:	0719      	lsls	r1, r3, #28
 800bca2:	d42c      	bmi.n	800bcfe <__swsetup_r+0x82>
 800bca4:	06dd      	lsls	r5, r3, #27
 800bca6:	d411      	bmi.n	800bccc <__swsetup_r+0x50>
 800bca8:	2309      	movs	r3, #9
 800bcaa:	6033      	str	r3, [r6, #0]
 800bcac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	e03e      	b.n	800bd36 <__swsetup_r+0xba>
 800bcb8:	4b25      	ldr	r3, [pc, #148]	; (800bd50 <__swsetup_r+0xd4>)
 800bcba:	429c      	cmp	r4, r3
 800bcbc:	d101      	bne.n	800bcc2 <__swsetup_r+0x46>
 800bcbe:	68ac      	ldr	r4, [r5, #8]
 800bcc0:	e7eb      	b.n	800bc9a <__swsetup_r+0x1e>
 800bcc2:	4b24      	ldr	r3, [pc, #144]	; (800bd54 <__swsetup_r+0xd8>)
 800bcc4:	429c      	cmp	r4, r3
 800bcc6:	bf08      	it	eq
 800bcc8:	68ec      	ldreq	r4, [r5, #12]
 800bcca:	e7e6      	b.n	800bc9a <__swsetup_r+0x1e>
 800bccc:	0758      	lsls	r0, r3, #29
 800bcce:	d512      	bpl.n	800bcf6 <__swsetup_r+0x7a>
 800bcd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcd2:	b141      	cbz	r1, 800bce6 <__swsetup_r+0x6a>
 800bcd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcd8:	4299      	cmp	r1, r3
 800bcda:	d002      	beq.n	800bce2 <__swsetup_r+0x66>
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7ff fb37 	bl	800b350 <_free_r>
 800bce2:	2300      	movs	r3, #0
 800bce4:	6363      	str	r3, [r4, #52]	; 0x34
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	6063      	str	r3, [r4, #4]
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	f043 0308 	orr.w	r3, r3, #8
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	6923      	ldr	r3, [r4, #16]
 800bd00:	b94b      	cbnz	r3, 800bd16 <__swsetup_r+0x9a>
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd0c:	d003      	beq.n	800bd16 <__swsetup_r+0x9a>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4630      	mov	r0, r6
 800bd12:	f000 fa05 	bl	800c120 <__smakebuf_r>
 800bd16:	89a0      	ldrh	r0, [r4, #12]
 800bd18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd1c:	f010 0301 	ands.w	r3, r0, #1
 800bd20:	d00a      	beq.n	800bd38 <__swsetup_r+0xbc>
 800bd22:	2300      	movs	r3, #0
 800bd24:	60a3      	str	r3, [r4, #8]
 800bd26:	6963      	ldr	r3, [r4, #20]
 800bd28:	425b      	negs	r3, r3
 800bd2a:	61a3      	str	r3, [r4, #24]
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	b943      	cbnz	r3, 800bd42 <__swsetup_r+0xc6>
 800bd30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd34:	d1ba      	bne.n	800bcac <__swsetup_r+0x30>
 800bd36:	bd70      	pop	{r4, r5, r6, pc}
 800bd38:	0781      	lsls	r1, r0, #30
 800bd3a:	bf58      	it	pl
 800bd3c:	6963      	ldrpl	r3, [r4, #20]
 800bd3e:	60a3      	str	r3, [r4, #8]
 800bd40:	e7f4      	b.n	800bd2c <__swsetup_r+0xb0>
 800bd42:	2000      	movs	r0, #0
 800bd44:	e7f7      	b.n	800bd36 <__swsetup_r+0xba>
 800bd46:	bf00      	nop
 800bd48:	200000b8 	.word	0x200000b8
 800bd4c:	0800ce54 	.word	0x0800ce54
 800bd50:	0800ce74 	.word	0x0800ce74
 800bd54:	0800ce34 	.word	0x0800ce34

0800bd58 <abort>:
 800bd58:	2006      	movs	r0, #6
 800bd5a:	b508      	push	{r3, lr}
 800bd5c:	f000 fa50 	bl	800c200 <raise>
 800bd60:	2001      	movs	r0, #1
 800bd62:	f7f8 fd68 	bl	8004836 <_exit>
	...

0800bd68 <__sflush_r>:
 800bd68:	898a      	ldrh	r2, [r1, #12]
 800bd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	0710      	lsls	r0, r2, #28
 800bd70:	460c      	mov	r4, r1
 800bd72:	d457      	bmi.n	800be24 <__sflush_r+0xbc>
 800bd74:	684b      	ldr	r3, [r1, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	dc04      	bgt.n	800bd84 <__sflush_r+0x1c>
 800bd7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	dc01      	bgt.n	800bd84 <__sflush_r+0x1c>
 800bd80:	2000      	movs	r0, #0
 800bd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd86:	2e00      	cmp	r6, #0
 800bd88:	d0fa      	beq.n	800bd80 <__sflush_r+0x18>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd90:	682f      	ldr	r7, [r5, #0]
 800bd92:	602b      	str	r3, [r5, #0]
 800bd94:	d032      	beq.n	800bdfc <__sflush_r+0x94>
 800bd96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	075a      	lsls	r2, r3, #29
 800bd9c:	d505      	bpl.n	800bdaa <__sflush_r+0x42>
 800bd9e:	6863      	ldr	r3, [r4, #4]
 800bda0:	1ac0      	subs	r0, r0, r3
 800bda2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bda4:	b10b      	cbz	r3, 800bdaa <__sflush_r+0x42>
 800bda6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bda8:	1ac0      	subs	r0, r0, r3
 800bdaa:	2300      	movs	r3, #0
 800bdac:	4602      	mov	r2, r0
 800bdae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	6a21      	ldr	r1, [r4, #32]
 800bdb4:	47b0      	blx	r6
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	d106      	bne.n	800bdca <__sflush_r+0x62>
 800bdbc:	6829      	ldr	r1, [r5, #0]
 800bdbe:	291d      	cmp	r1, #29
 800bdc0:	d82c      	bhi.n	800be1c <__sflush_r+0xb4>
 800bdc2:	4a29      	ldr	r2, [pc, #164]	; (800be68 <__sflush_r+0x100>)
 800bdc4:	40ca      	lsrs	r2, r1
 800bdc6:	07d6      	lsls	r6, r2, #31
 800bdc8:	d528      	bpl.n	800be1c <__sflush_r+0xb4>
 800bdca:	2200      	movs	r2, #0
 800bdcc:	6062      	str	r2, [r4, #4]
 800bdce:	6922      	ldr	r2, [r4, #16]
 800bdd0:	04d9      	lsls	r1, r3, #19
 800bdd2:	6022      	str	r2, [r4, #0]
 800bdd4:	d504      	bpl.n	800bde0 <__sflush_r+0x78>
 800bdd6:	1c42      	adds	r2, r0, #1
 800bdd8:	d101      	bne.n	800bdde <__sflush_r+0x76>
 800bdda:	682b      	ldr	r3, [r5, #0]
 800bddc:	b903      	cbnz	r3, 800bde0 <__sflush_r+0x78>
 800bdde:	6560      	str	r0, [r4, #84]	; 0x54
 800bde0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bde2:	602f      	str	r7, [r5, #0]
 800bde4:	2900      	cmp	r1, #0
 800bde6:	d0cb      	beq.n	800bd80 <__sflush_r+0x18>
 800bde8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdec:	4299      	cmp	r1, r3
 800bdee:	d002      	beq.n	800bdf6 <__sflush_r+0x8e>
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f7ff faad 	bl	800b350 <_free_r>
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	6360      	str	r0, [r4, #52]	; 0x34
 800bdfa:	e7c2      	b.n	800bd82 <__sflush_r+0x1a>
 800bdfc:	6a21      	ldr	r1, [r4, #32]
 800bdfe:	2301      	movs	r3, #1
 800be00:	4628      	mov	r0, r5
 800be02:	47b0      	blx	r6
 800be04:	1c41      	adds	r1, r0, #1
 800be06:	d1c7      	bne.n	800bd98 <__sflush_r+0x30>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0c4      	beq.n	800bd98 <__sflush_r+0x30>
 800be0e:	2b1d      	cmp	r3, #29
 800be10:	d001      	beq.n	800be16 <__sflush_r+0xae>
 800be12:	2b16      	cmp	r3, #22
 800be14:	d101      	bne.n	800be1a <__sflush_r+0xb2>
 800be16:	602f      	str	r7, [r5, #0]
 800be18:	e7b2      	b.n	800bd80 <__sflush_r+0x18>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	e7ae      	b.n	800bd82 <__sflush_r+0x1a>
 800be24:	690f      	ldr	r7, [r1, #16]
 800be26:	2f00      	cmp	r7, #0
 800be28:	d0aa      	beq.n	800bd80 <__sflush_r+0x18>
 800be2a:	0793      	lsls	r3, r2, #30
 800be2c:	bf18      	it	ne
 800be2e:	2300      	movne	r3, #0
 800be30:	680e      	ldr	r6, [r1, #0]
 800be32:	bf08      	it	eq
 800be34:	694b      	ldreq	r3, [r1, #20]
 800be36:	1bf6      	subs	r6, r6, r7
 800be38:	600f      	str	r7, [r1, #0]
 800be3a:	608b      	str	r3, [r1, #8]
 800be3c:	2e00      	cmp	r6, #0
 800be3e:	dd9f      	ble.n	800bd80 <__sflush_r+0x18>
 800be40:	4633      	mov	r3, r6
 800be42:	463a      	mov	r2, r7
 800be44:	4628      	mov	r0, r5
 800be46:	6a21      	ldr	r1, [r4, #32]
 800be48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800be4c:	47e0      	blx	ip
 800be4e:	2800      	cmp	r0, #0
 800be50:	dc06      	bgt.n	800be60 <__sflush_r+0xf8>
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be5c:	81a3      	strh	r3, [r4, #12]
 800be5e:	e790      	b.n	800bd82 <__sflush_r+0x1a>
 800be60:	4407      	add	r7, r0
 800be62:	1a36      	subs	r6, r6, r0
 800be64:	e7ea      	b.n	800be3c <__sflush_r+0xd4>
 800be66:	bf00      	nop
 800be68:	20400001 	.word	0x20400001

0800be6c <_fflush_r>:
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	690b      	ldr	r3, [r1, #16]
 800be70:	4605      	mov	r5, r0
 800be72:	460c      	mov	r4, r1
 800be74:	b913      	cbnz	r3, 800be7c <_fflush_r+0x10>
 800be76:	2500      	movs	r5, #0
 800be78:	4628      	mov	r0, r5
 800be7a:	bd38      	pop	{r3, r4, r5, pc}
 800be7c:	b118      	cbz	r0, 800be86 <_fflush_r+0x1a>
 800be7e:	6983      	ldr	r3, [r0, #24]
 800be80:	b90b      	cbnz	r3, 800be86 <_fflush_r+0x1a>
 800be82:	f000 f887 	bl	800bf94 <__sinit>
 800be86:	4b14      	ldr	r3, [pc, #80]	; (800bed8 <_fflush_r+0x6c>)
 800be88:	429c      	cmp	r4, r3
 800be8a:	d11b      	bne.n	800bec4 <_fflush_r+0x58>
 800be8c:	686c      	ldr	r4, [r5, #4]
 800be8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0ef      	beq.n	800be76 <_fflush_r+0xa>
 800be96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be98:	07d0      	lsls	r0, r2, #31
 800be9a:	d404      	bmi.n	800bea6 <_fflush_r+0x3a>
 800be9c:	0599      	lsls	r1, r3, #22
 800be9e:	d402      	bmi.n	800bea6 <_fflush_r+0x3a>
 800bea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bea2:	f000 f915 	bl	800c0d0 <__retarget_lock_acquire_recursive>
 800bea6:	4628      	mov	r0, r5
 800bea8:	4621      	mov	r1, r4
 800beaa:	f7ff ff5d 	bl	800bd68 <__sflush_r>
 800beae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800beb0:	4605      	mov	r5, r0
 800beb2:	07da      	lsls	r2, r3, #31
 800beb4:	d4e0      	bmi.n	800be78 <_fflush_r+0xc>
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	059b      	lsls	r3, r3, #22
 800beba:	d4dd      	bmi.n	800be78 <_fflush_r+0xc>
 800bebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bebe:	f000 f908 	bl	800c0d2 <__retarget_lock_release_recursive>
 800bec2:	e7d9      	b.n	800be78 <_fflush_r+0xc>
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <_fflush_r+0x70>)
 800bec6:	429c      	cmp	r4, r3
 800bec8:	d101      	bne.n	800bece <_fflush_r+0x62>
 800beca:	68ac      	ldr	r4, [r5, #8]
 800becc:	e7df      	b.n	800be8e <_fflush_r+0x22>
 800bece:	4b04      	ldr	r3, [pc, #16]	; (800bee0 <_fflush_r+0x74>)
 800bed0:	429c      	cmp	r4, r3
 800bed2:	bf08      	it	eq
 800bed4:	68ec      	ldreq	r4, [r5, #12]
 800bed6:	e7da      	b.n	800be8e <_fflush_r+0x22>
 800bed8:	0800ce54 	.word	0x0800ce54
 800bedc:	0800ce74 	.word	0x0800ce74
 800bee0:	0800ce34 	.word	0x0800ce34

0800bee4 <std>:
 800bee4:	2300      	movs	r3, #0
 800bee6:	b510      	push	{r4, lr}
 800bee8:	4604      	mov	r4, r0
 800beea:	e9c0 3300 	strd	r3, r3, [r0]
 800beee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bef2:	6083      	str	r3, [r0, #8]
 800bef4:	8181      	strh	r1, [r0, #12]
 800bef6:	6643      	str	r3, [r0, #100]	; 0x64
 800bef8:	81c2      	strh	r2, [r0, #14]
 800befa:	6183      	str	r3, [r0, #24]
 800befc:	4619      	mov	r1, r3
 800befe:	2208      	movs	r2, #8
 800bf00:	305c      	adds	r0, #92	; 0x5c
 800bf02:	f7fd fb63 	bl	80095cc <memset>
 800bf06:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <std+0x38>)
 800bf08:	6224      	str	r4, [r4, #32]
 800bf0a:	6263      	str	r3, [r4, #36]	; 0x24
 800bf0c:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <std+0x3c>)
 800bf0e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf10:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <std+0x40>)
 800bf12:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf14:	4b04      	ldr	r3, [pc, #16]	; (800bf28 <std+0x44>)
 800bf16:	6323      	str	r3, [r4, #48]	; 0x30
 800bf18:	bd10      	pop	{r4, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0800c239 	.word	0x0800c239
 800bf20:	0800c25b 	.word	0x0800c25b
 800bf24:	0800c293 	.word	0x0800c293
 800bf28:	0800c2b7 	.word	0x0800c2b7

0800bf2c <_cleanup_r>:
 800bf2c:	4901      	ldr	r1, [pc, #4]	; (800bf34 <_cleanup_r+0x8>)
 800bf2e:	f000 b8af 	b.w	800c090 <_fwalk_reent>
 800bf32:	bf00      	nop
 800bf34:	0800be6d 	.word	0x0800be6d

0800bf38 <__sfmoreglue>:
 800bf38:	2268      	movs	r2, #104	; 0x68
 800bf3a:	b570      	push	{r4, r5, r6, lr}
 800bf3c:	1e4d      	subs	r5, r1, #1
 800bf3e:	4355      	muls	r5, r2
 800bf40:	460e      	mov	r6, r1
 800bf42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf46:	f7ff fa6b 	bl	800b420 <_malloc_r>
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	b140      	cbz	r0, 800bf60 <__sfmoreglue+0x28>
 800bf4e:	2100      	movs	r1, #0
 800bf50:	e9c0 1600 	strd	r1, r6, [r0]
 800bf54:	300c      	adds	r0, #12
 800bf56:	60a0      	str	r0, [r4, #8]
 800bf58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf5c:	f7fd fb36 	bl	80095cc <memset>
 800bf60:	4620      	mov	r0, r4
 800bf62:	bd70      	pop	{r4, r5, r6, pc}

0800bf64 <__sfp_lock_acquire>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sfp_lock_acquire+0x8>)
 800bf66:	f000 b8b3 	b.w	800c0d0 <__retarget_lock_acquire_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20000585 	.word	0x20000585

0800bf70 <__sfp_lock_release>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__sfp_lock_release+0x8>)
 800bf72:	f000 b8ae 	b.w	800c0d2 <__retarget_lock_release_recursive>
 800bf76:	bf00      	nop
 800bf78:	20000585 	.word	0x20000585

0800bf7c <__sinit_lock_acquire>:
 800bf7c:	4801      	ldr	r0, [pc, #4]	; (800bf84 <__sinit_lock_acquire+0x8>)
 800bf7e:	f000 b8a7 	b.w	800c0d0 <__retarget_lock_acquire_recursive>
 800bf82:	bf00      	nop
 800bf84:	20000586 	.word	0x20000586

0800bf88 <__sinit_lock_release>:
 800bf88:	4801      	ldr	r0, [pc, #4]	; (800bf90 <__sinit_lock_release+0x8>)
 800bf8a:	f000 b8a2 	b.w	800c0d2 <__retarget_lock_release_recursive>
 800bf8e:	bf00      	nop
 800bf90:	20000586 	.word	0x20000586

0800bf94 <__sinit>:
 800bf94:	b510      	push	{r4, lr}
 800bf96:	4604      	mov	r4, r0
 800bf98:	f7ff fff0 	bl	800bf7c <__sinit_lock_acquire>
 800bf9c:	69a3      	ldr	r3, [r4, #24]
 800bf9e:	b11b      	cbz	r3, 800bfa8 <__sinit+0x14>
 800bfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa4:	f7ff bff0 	b.w	800bf88 <__sinit_lock_release>
 800bfa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfac:	6523      	str	r3, [r4, #80]	; 0x50
 800bfae:	4b13      	ldr	r3, [pc, #76]	; (800bffc <__sinit+0x68>)
 800bfb0:	4a13      	ldr	r2, [pc, #76]	; (800c000 <__sinit+0x6c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfb6:	42a3      	cmp	r3, r4
 800bfb8:	bf08      	it	eq
 800bfba:	2301      	moveq	r3, #1
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	bf08      	it	eq
 800bfc0:	61a3      	streq	r3, [r4, #24]
 800bfc2:	f000 f81f 	bl	800c004 <__sfp>
 800bfc6:	6060      	str	r0, [r4, #4]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f000 f81b 	bl	800c004 <__sfp>
 800bfce:	60a0      	str	r0, [r4, #8]
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f000 f817 	bl	800c004 <__sfp>
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	2104      	movs	r1, #4
 800bfda:	60e0      	str	r0, [r4, #12]
 800bfdc:	6860      	ldr	r0, [r4, #4]
 800bfde:	f7ff ff81 	bl	800bee4 <std>
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	2109      	movs	r1, #9
 800bfe6:	68a0      	ldr	r0, [r4, #8]
 800bfe8:	f7ff ff7c 	bl	800bee4 <std>
 800bfec:	2202      	movs	r2, #2
 800bfee:	2112      	movs	r1, #18
 800bff0:	68e0      	ldr	r0, [r4, #12]
 800bff2:	f7ff ff77 	bl	800bee4 <std>
 800bff6:	2301      	movs	r3, #1
 800bff8:	61a3      	str	r3, [r4, #24]
 800bffa:	e7d1      	b.n	800bfa0 <__sinit+0xc>
 800bffc:	0800cab8 	.word	0x0800cab8
 800c000:	0800bf2d 	.word	0x0800bf2d

0800c004 <__sfp>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	4607      	mov	r7, r0
 800c008:	f7ff ffac 	bl	800bf64 <__sfp_lock_acquire>
 800c00c:	4b1e      	ldr	r3, [pc, #120]	; (800c088 <__sfp+0x84>)
 800c00e:	681e      	ldr	r6, [r3, #0]
 800c010:	69b3      	ldr	r3, [r6, #24]
 800c012:	b913      	cbnz	r3, 800c01a <__sfp+0x16>
 800c014:	4630      	mov	r0, r6
 800c016:	f7ff ffbd 	bl	800bf94 <__sinit>
 800c01a:	3648      	adds	r6, #72	; 0x48
 800c01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c020:	3b01      	subs	r3, #1
 800c022:	d503      	bpl.n	800c02c <__sfp+0x28>
 800c024:	6833      	ldr	r3, [r6, #0]
 800c026:	b30b      	cbz	r3, 800c06c <__sfp+0x68>
 800c028:	6836      	ldr	r6, [r6, #0]
 800c02a:	e7f7      	b.n	800c01c <__sfp+0x18>
 800c02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c030:	b9d5      	cbnz	r5, 800c068 <__sfp+0x64>
 800c032:	4b16      	ldr	r3, [pc, #88]	; (800c08c <__sfp+0x88>)
 800c034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c038:	60e3      	str	r3, [r4, #12]
 800c03a:	6665      	str	r5, [r4, #100]	; 0x64
 800c03c:	f000 f847 	bl	800c0ce <__retarget_lock_init_recursive>
 800c040:	f7ff ff96 	bl	800bf70 <__sfp_lock_release>
 800c044:	2208      	movs	r2, #8
 800c046:	4629      	mov	r1, r5
 800c048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c050:	6025      	str	r5, [r4, #0]
 800c052:	61a5      	str	r5, [r4, #24]
 800c054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c058:	f7fd fab8 	bl	80095cc <memset>
 800c05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c064:	4620      	mov	r0, r4
 800c066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c068:	3468      	adds	r4, #104	; 0x68
 800c06a:	e7d9      	b.n	800c020 <__sfp+0x1c>
 800c06c:	2104      	movs	r1, #4
 800c06e:	4638      	mov	r0, r7
 800c070:	f7ff ff62 	bl	800bf38 <__sfmoreglue>
 800c074:	4604      	mov	r4, r0
 800c076:	6030      	str	r0, [r6, #0]
 800c078:	2800      	cmp	r0, #0
 800c07a:	d1d5      	bne.n	800c028 <__sfp+0x24>
 800c07c:	f7ff ff78 	bl	800bf70 <__sfp_lock_release>
 800c080:	230c      	movs	r3, #12
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	e7ee      	b.n	800c064 <__sfp+0x60>
 800c086:	bf00      	nop
 800c088:	0800cab8 	.word	0x0800cab8
 800c08c:	ffff0001 	.word	0xffff0001

0800c090 <_fwalk_reent>:
 800c090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c094:	4606      	mov	r6, r0
 800c096:	4688      	mov	r8, r1
 800c098:	2700      	movs	r7, #0
 800c09a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c09e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c0a6:	d505      	bpl.n	800c0b4 <_fwalk_reent+0x24>
 800c0a8:	6824      	ldr	r4, [r4, #0]
 800c0aa:	2c00      	cmp	r4, #0
 800c0ac:	d1f7      	bne.n	800c09e <_fwalk_reent+0xe>
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b4:	89ab      	ldrh	r3, [r5, #12]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d907      	bls.n	800c0ca <_fwalk_reent+0x3a>
 800c0ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	d003      	beq.n	800c0ca <_fwalk_reent+0x3a>
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	47c0      	blx	r8
 800c0c8:	4307      	orrs	r7, r0
 800c0ca:	3568      	adds	r5, #104	; 0x68
 800c0cc:	e7e9      	b.n	800c0a2 <_fwalk_reent+0x12>

0800c0ce <__retarget_lock_init_recursive>:
 800c0ce:	4770      	bx	lr

0800c0d0 <__retarget_lock_acquire_recursive>:
 800c0d0:	4770      	bx	lr

0800c0d2 <__retarget_lock_release_recursive>:
 800c0d2:	4770      	bx	lr

0800c0d4 <__swhatbuf_r>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	460e      	mov	r6, r1
 800c0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0dc:	4614      	mov	r4, r2
 800c0de:	2900      	cmp	r1, #0
 800c0e0:	461d      	mov	r5, r3
 800c0e2:	b096      	sub	sp, #88	; 0x58
 800c0e4:	da08      	bge.n	800c0f8 <__swhatbuf_r+0x24>
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	061a      	lsls	r2, r3, #24
 800c0f0:	d410      	bmi.n	800c114 <__swhatbuf_r+0x40>
 800c0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0f6:	e00e      	b.n	800c116 <__swhatbuf_r+0x42>
 800c0f8:	466a      	mov	r2, sp
 800c0fa:	f000 f903 	bl	800c304 <_fstat_r>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	dbf1      	blt.n	800c0e6 <__swhatbuf_r+0x12>
 800c102:	9a01      	ldr	r2, [sp, #4]
 800c104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c10c:	425a      	negs	r2, r3
 800c10e:	415a      	adcs	r2, r3
 800c110:	602a      	str	r2, [r5, #0]
 800c112:	e7ee      	b.n	800c0f2 <__swhatbuf_r+0x1e>
 800c114:	2340      	movs	r3, #64	; 0x40
 800c116:	2000      	movs	r0, #0
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	b016      	add	sp, #88	; 0x58
 800c11c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c120 <__smakebuf_r>:
 800c120:	898b      	ldrh	r3, [r1, #12]
 800c122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c124:	079d      	lsls	r5, r3, #30
 800c126:	4606      	mov	r6, r0
 800c128:	460c      	mov	r4, r1
 800c12a:	d507      	bpl.n	800c13c <__smakebuf_r+0x1c>
 800c12c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	6123      	str	r3, [r4, #16]
 800c134:	2301      	movs	r3, #1
 800c136:	6163      	str	r3, [r4, #20]
 800c138:	b002      	add	sp, #8
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
 800c13c:	466a      	mov	r2, sp
 800c13e:	ab01      	add	r3, sp, #4
 800c140:	f7ff ffc8 	bl	800c0d4 <__swhatbuf_r>
 800c144:	9900      	ldr	r1, [sp, #0]
 800c146:	4605      	mov	r5, r0
 800c148:	4630      	mov	r0, r6
 800c14a:	f7ff f969 	bl	800b420 <_malloc_r>
 800c14e:	b948      	cbnz	r0, 800c164 <__smakebuf_r+0x44>
 800c150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c154:	059a      	lsls	r2, r3, #22
 800c156:	d4ef      	bmi.n	800c138 <__smakebuf_r+0x18>
 800c158:	f023 0303 	bic.w	r3, r3, #3
 800c15c:	f043 0302 	orr.w	r3, r3, #2
 800c160:	81a3      	strh	r3, [r4, #12]
 800c162:	e7e3      	b.n	800c12c <__smakebuf_r+0xc>
 800c164:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <__smakebuf_r+0x7c>)
 800c166:	62b3      	str	r3, [r6, #40]	; 0x28
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	6020      	str	r0, [r4, #0]
 800c16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	6120      	str	r0, [r4, #16]
 800c176:	6163      	str	r3, [r4, #20]
 800c178:	9b01      	ldr	r3, [sp, #4]
 800c17a:	b15b      	cbz	r3, 800c194 <__smakebuf_r+0x74>
 800c17c:	4630      	mov	r0, r6
 800c17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c182:	f000 f8d1 	bl	800c328 <_isatty_r>
 800c186:	b128      	cbz	r0, 800c194 <__smakebuf_r+0x74>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	f023 0303 	bic.w	r3, r3, #3
 800c18e:	f043 0301 	orr.w	r3, r3, #1
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	89a0      	ldrh	r0, [r4, #12]
 800c196:	4305      	orrs	r5, r0
 800c198:	81a5      	strh	r5, [r4, #12]
 800c19a:	e7cd      	b.n	800c138 <__smakebuf_r+0x18>
 800c19c:	0800bf2d 	.word	0x0800bf2d

0800c1a0 <_malloc_usable_size_r>:
 800c1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1a4:	1f18      	subs	r0, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bfbc      	itt	lt
 800c1aa:	580b      	ldrlt	r3, [r1, r0]
 800c1ac:	18c0      	addlt	r0, r0, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_raise_r>:
 800c1b0:	291f      	cmp	r1, #31
 800c1b2:	b538      	push	{r3, r4, r5, lr}
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	d904      	bls.n	800c1c4 <_raise_r+0x14>
 800c1ba:	2316      	movs	r3, #22
 800c1bc:	6003      	str	r3, [r0, #0]
 800c1be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1c6:	b112      	cbz	r2, 800c1ce <_raise_r+0x1e>
 800c1c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1cc:	b94b      	cbnz	r3, 800c1e2 <_raise_r+0x32>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 f830 	bl	800c234 <_getpid_r>
 800c1d4:	462a      	mov	r2, r5
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	4620      	mov	r0, r4
 800c1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1de:	f000 b817 	b.w	800c210 <_kill_r>
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d00a      	beq.n	800c1fc <_raise_r+0x4c>
 800c1e6:	1c59      	adds	r1, r3, #1
 800c1e8:	d103      	bne.n	800c1f2 <_raise_r+0x42>
 800c1ea:	2316      	movs	r3, #22
 800c1ec:	6003      	str	r3, [r0, #0]
 800c1ee:	2001      	movs	r0, #1
 800c1f0:	e7e7      	b.n	800c1c2 <_raise_r+0x12>
 800c1f2:	2400      	movs	r4, #0
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1fa:	4798      	blx	r3
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	e7e0      	b.n	800c1c2 <_raise_r+0x12>

0800c200 <raise>:
 800c200:	4b02      	ldr	r3, [pc, #8]	; (800c20c <raise+0xc>)
 800c202:	4601      	mov	r1, r0
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	f7ff bfd3 	b.w	800c1b0 <_raise_r>
 800c20a:	bf00      	nop
 800c20c:	200000b8 	.word	0x200000b8

0800c210 <_kill_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	2300      	movs	r3, #0
 800c214:	4d06      	ldr	r5, [pc, #24]	; (800c230 <_kill_r+0x20>)
 800c216:	4604      	mov	r4, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	4611      	mov	r1, r2
 800c21c:	602b      	str	r3, [r5, #0]
 800c21e:	f7f8 fafa 	bl	8004816 <_kill>
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	d102      	bne.n	800c22c <_kill_r+0x1c>
 800c226:	682b      	ldr	r3, [r5, #0]
 800c228:	b103      	cbz	r3, 800c22c <_kill_r+0x1c>
 800c22a:	6023      	str	r3, [r4, #0]
 800c22c:	bd38      	pop	{r3, r4, r5, pc}
 800c22e:	bf00      	nop
 800c230:	20000580 	.word	0x20000580

0800c234 <_getpid_r>:
 800c234:	f7f8 bae8 	b.w	8004808 <_getpid>

0800c238 <__sread>:
 800c238:	b510      	push	{r4, lr}
 800c23a:	460c      	mov	r4, r1
 800c23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c240:	f000 f894 	bl	800c36c <_read_r>
 800c244:	2800      	cmp	r0, #0
 800c246:	bfab      	itete	ge
 800c248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c24a:	89a3      	ldrhlt	r3, [r4, #12]
 800c24c:	181b      	addge	r3, r3, r0
 800c24e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c252:	bfac      	ite	ge
 800c254:	6563      	strge	r3, [r4, #84]	; 0x54
 800c256:	81a3      	strhlt	r3, [r4, #12]
 800c258:	bd10      	pop	{r4, pc}

0800c25a <__swrite>:
 800c25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25e:	461f      	mov	r7, r3
 800c260:	898b      	ldrh	r3, [r1, #12]
 800c262:	4605      	mov	r5, r0
 800c264:	05db      	lsls	r3, r3, #23
 800c266:	460c      	mov	r4, r1
 800c268:	4616      	mov	r6, r2
 800c26a:	d505      	bpl.n	800c278 <__swrite+0x1e>
 800c26c:	2302      	movs	r3, #2
 800c26e:	2200      	movs	r2, #0
 800c270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c274:	f000 f868 	bl	800c348 <_lseek_r>
 800c278:	89a3      	ldrh	r3, [r4, #12]
 800c27a:	4632      	mov	r2, r6
 800c27c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c280:	81a3      	strh	r3, [r4, #12]
 800c282:	4628      	mov	r0, r5
 800c284:	463b      	mov	r3, r7
 800c286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c28e:	f000 b817 	b.w	800c2c0 <_write_r>

0800c292 <__sseek>:
 800c292:	b510      	push	{r4, lr}
 800c294:	460c      	mov	r4, r1
 800c296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c29a:	f000 f855 	bl	800c348 <_lseek_r>
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	89a3      	ldrh	r3, [r4, #12]
 800c2a2:	bf15      	itete	ne
 800c2a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2ae:	81a3      	strheq	r3, [r4, #12]
 800c2b0:	bf18      	it	ne
 800c2b2:	81a3      	strhne	r3, [r4, #12]
 800c2b4:	bd10      	pop	{r4, pc}

0800c2b6 <__sclose>:
 800c2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ba:	f000 b813 	b.w	800c2e4 <_close_r>
	...

0800c2c0 <_write_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	4d05      	ldr	r5, [pc, #20]	; (800c2e0 <_write_r+0x20>)
 800c2cc:	602a      	str	r2, [r5, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f7f7 fa74 	bl	80037bc <_write>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_write_r+0x1e>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_write_r+0x1e>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	20000580 	.word	0x20000580

0800c2e4 <_close_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	4d05      	ldr	r5, [pc, #20]	; (800c300 <_close_r+0x1c>)
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	602b      	str	r3, [r5, #0]
 800c2f0:	f7f8 fac8 	bl	8004884 <_close>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_close_r+0x1a>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_close_r+0x1a>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	20000580 	.word	0x20000580

0800c304 <_fstat_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	2300      	movs	r3, #0
 800c308:	4d06      	ldr	r5, [pc, #24]	; (800c324 <_fstat_r+0x20>)
 800c30a:	4604      	mov	r4, r0
 800c30c:	4608      	mov	r0, r1
 800c30e:	4611      	mov	r1, r2
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	f7f8 fac2 	bl	800489a <_fstat>
 800c316:	1c43      	adds	r3, r0, #1
 800c318:	d102      	bne.n	800c320 <_fstat_r+0x1c>
 800c31a:	682b      	ldr	r3, [r5, #0]
 800c31c:	b103      	cbz	r3, 800c320 <_fstat_r+0x1c>
 800c31e:	6023      	str	r3, [r4, #0]
 800c320:	bd38      	pop	{r3, r4, r5, pc}
 800c322:	bf00      	nop
 800c324:	20000580 	.word	0x20000580

0800c328 <_isatty_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	2300      	movs	r3, #0
 800c32c:	4d05      	ldr	r5, [pc, #20]	; (800c344 <_isatty_r+0x1c>)
 800c32e:	4604      	mov	r4, r0
 800c330:	4608      	mov	r0, r1
 800c332:	602b      	str	r3, [r5, #0]
 800c334:	f7f8 fac0 	bl	80048b8 <_isatty>
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	d102      	bne.n	800c342 <_isatty_r+0x1a>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	b103      	cbz	r3, 800c342 <_isatty_r+0x1a>
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	20000580 	.word	0x20000580

0800c348 <_lseek_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	4611      	mov	r1, r2
 800c350:	2200      	movs	r2, #0
 800c352:	4d05      	ldr	r5, [pc, #20]	; (800c368 <_lseek_r+0x20>)
 800c354:	602a      	str	r2, [r5, #0]
 800c356:	461a      	mov	r2, r3
 800c358:	f7f8 fab8 	bl	80048cc <_lseek>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_lseek_r+0x1e>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_lseek_r+0x1e>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	20000580 	.word	0x20000580

0800c36c <_read_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4604      	mov	r4, r0
 800c370:	4608      	mov	r0, r1
 800c372:	4611      	mov	r1, r2
 800c374:	2200      	movs	r2, #0
 800c376:	4d05      	ldr	r5, [pc, #20]	; (800c38c <_read_r+0x20>)
 800c378:	602a      	str	r2, [r5, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	f7f8 fa65 	bl	800484a <_read>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_read_r+0x1e>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_read_r+0x1e>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	20000580 	.word	0x20000580

0800c390 <asinf>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4604      	mov	r4, r0
 800c394:	f000 f838 	bl	800c408 <__ieee754_asinf>
 800c398:	4621      	mov	r1, r4
 800c39a:	4605      	mov	r5, r0
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7f4 fe67 	bl	8001070 <__aeabi_fcmpun>
 800c3a2:	b980      	cbnz	r0, 800c3c6 <asinf+0x36>
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 fb57 	bl	800ca58 <fabsf>
 800c3aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c3ae:	f7f4 fe55 	bl	800105c <__aeabi_fcmpgt>
 800c3b2:	b140      	cbz	r0, 800c3c6 <asinf+0x36>
 800c3b4:	f7fd f8e0 	bl	8009578 <__errno>
 800c3b8:	2321      	movs	r3, #33	; 0x21
 800c3ba:	6003      	str	r3, [r0, #0]
 800c3bc:	4803      	ldr	r0, [pc, #12]	; (800c3cc <asinf+0x3c>)
 800c3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3c2:	f000 bb4d 	b.w	800ca60 <nanf>
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ca:	bf00      	nop
 800c3cc:	0800cd28 	.word	0x0800cd28

0800c3d0 <atan2f>:
 800c3d0:	f000 b95e 	b.w	800c690 <__ieee754_atan2f>

0800c3d4 <sqrtf>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	f000 f9e0 	bl	800c79c <__ieee754_sqrtf>
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4604      	mov	r4, r0
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	f7f4 fe45 	bl	8001070 <__aeabi_fcmpun>
 800c3e6:	b968      	cbnz	r0, 800c404 <sqrtf+0x30>
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	f7f4 fe18 	bl	8001020 <__aeabi_fcmplt>
 800c3f0:	b140      	cbz	r0, 800c404 <sqrtf+0x30>
 800c3f2:	f7fd f8c1 	bl	8009578 <__errno>
 800c3f6:	2321      	movs	r3, #33	; 0x21
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	6003      	str	r3, [r0, #0]
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	f7f4 fd25 	bl	8000e4c <__aeabi_fdiv>
 800c402:	4604      	mov	r4, r0
 800c404:	4620      	mov	r0, r4
 800c406:	bd38      	pop	{r3, r4, r5, pc}

0800c408 <__ieee754_asinf>:
 800c408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c40c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c410:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c414:	4604      	mov	r4, r0
 800c416:	4605      	mov	r5, r0
 800c418:	d10c      	bne.n	800c434 <__ieee754_asinf+0x2c>
 800c41a:	498d      	ldr	r1, [pc, #564]	; (800c650 <__ieee754_asinf+0x248>)
 800c41c:	f7f4 fc62 	bl	8000ce4 <__aeabi_fmul>
 800c420:	498c      	ldr	r1, [pc, #560]	; (800c654 <__ieee754_asinf+0x24c>)
 800c422:	4605      	mov	r5, r0
 800c424:	4620      	mov	r0, r4
 800c426:	f7f4 fc5d 	bl	8000ce4 <__aeabi_fmul>
 800c42a:	4601      	mov	r1, r0
 800c42c:	4628      	mov	r0, r5
 800c42e:	f7f4 fb51 	bl	8000ad4 <__addsf3>
 800c432:	e006      	b.n	800c442 <__ieee754_asinf+0x3a>
 800c434:	dd07      	ble.n	800c446 <__ieee754_asinf+0x3e>
 800c436:	4601      	mov	r1, r0
 800c438:	f7f4 fb4a 	bl	8000ad0 <__aeabi_fsub>
 800c43c:	4601      	mov	r1, r0
 800c43e:	f7f4 fd05 	bl	8000e4c <__aeabi_fdiv>
 800c442:	4604      	mov	r4, r0
 800c444:	e00e      	b.n	800c464 <__ieee754_asinf+0x5c>
 800c446:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800c44a:	da58      	bge.n	800c4fe <__ieee754_asinf+0xf6>
 800c44c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800c450:	da0b      	bge.n	800c46a <__ieee754_asinf+0x62>
 800c452:	4981      	ldr	r1, [pc, #516]	; (800c658 <__ieee754_asinf+0x250>)
 800c454:	f7f4 fb3e 	bl	8000ad4 <__addsf3>
 800c458:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c45c:	f7f4 fdfe 	bl	800105c <__aeabi_fcmpgt>
 800c460:	2800      	cmp	r0, #0
 800c462:	d04c      	beq.n	800c4fe <__ieee754_asinf+0xf6>
 800c464:	4620      	mov	r0, r4
 800c466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46a:	4601      	mov	r1, r0
 800c46c:	f7f4 fc3a 	bl	8000ce4 <__aeabi_fmul>
 800c470:	4605      	mov	r5, r0
 800c472:	497a      	ldr	r1, [pc, #488]	; (800c65c <__ieee754_asinf+0x254>)
 800c474:	f7f4 fc36 	bl	8000ce4 <__aeabi_fmul>
 800c478:	4979      	ldr	r1, [pc, #484]	; (800c660 <__ieee754_asinf+0x258>)
 800c47a:	f7f4 fb2b 	bl	8000ad4 <__addsf3>
 800c47e:	4629      	mov	r1, r5
 800c480:	f7f4 fc30 	bl	8000ce4 <__aeabi_fmul>
 800c484:	4977      	ldr	r1, [pc, #476]	; (800c664 <__ieee754_asinf+0x25c>)
 800c486:	f7f4 fb23 	bl	8000ad0 <__aeabi_fsub>
 800c48a:	4629      	mov	r1, r5
 800c48c:	f7f4 fc2a 	bl	8000ce4 <__aeabi_fmul>
 800c490:	4975      	ldr	r1, [pc, #468]	; (800c668 <__ieee754_asinf+0x260>)
 800c492:	f7f4 fb1f 	bl	8000ad4 <__addsf3>
 800c496:	4629      	mov	r1, r5
 800c498:	f7f4 fc24 	bl	8000ce4 <__aeabi_fmul>
 800c49c:	4973      	ldr	r1, [pc, #460]	; (800c66c <__ieee754_asinf+0x264>)
 800c49e:	f7f4 fb17 	bl	8000ad0 <__aeabi_fsub>
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	f7f4 fc1e 	bl	8000ce4 <__aeabi_fmul>
 800c4a8:	4971      	ldr	r1, [pc, #452]	; (800c670 <__ieee754_asinf+0x268>)
 800c4aa:	f7f4 fb13 	bl	8000ad4 <__addsf3>
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	f7f4 fc18 	bl	8000ce4 <__aeabi_fmul>
 800c4b4:	496f      	ldr	r1, [pc, #444]	; (800c674 <__ieee754_asinf+0x26c>)
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f7f4 fc13 	bl	8000ce4 <__aeabi_fmul>
 800c4be:	496e      	ldr	r1, [pc, #440]	; (800c678 <__ieee754_asinf+0x270>)
 800c4c0:	f7f4 fb06 	bl	8000ad0 <__aeabi_fsub>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	f7f4 fc0d 	bl	8000ce4 <__aeabi_fmul>
 800c4ca:	496c      	ldr	r1, [pc, #432]	; (800c67c <__ieee754_asinf+0x274>)
 800c4cc:	f7f4 fb02 	bl	8000ad4 <__addsf3>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7f4 fc07 	bl	8000ce4 <__aeabi_fmul>
 800c4d6:	496a      	ldr	r1, [pc, #424]	; (800c680 <__ieee754_asinf+0x278>)
 800c4d8:	f7f4 fafa 	bl	8000ad0 <__aeabi_fsub>
 800c4dc:	4629      	mov	r1, r5
 800c4de:	f7f4 fc01 	bl	8000ce4 <__aeabi_fmul>
 800c4e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4e6:	f7f4 faf5 	bl	8000ad4 <__addsf3>
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f7f4 fcad 	bl	8000e4c <__aeabi_fdiv>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	f7f4 fbf6 	bl	8000ce4 <__aeabi_fmul>
 800c4f8:	4601      	mov	r1, r0
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	e797      	b.n	800c42e <__ieee754_asinf+0x26>
 800c4fe:	4620      	mov	r0, r4
 800c500:	f000 faaa 	bl	800ca58 <fabsf>
 800c504:	4601      	mov	r1, r0
 800c506:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c50a:	f7f4 fae1 	bl	8000ad0 <__aeabi_fsub>
 800c50e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c512:	f7f4 fbe7 	bl	8000ce4 <__aeabi_fmul>
 800c516:	4606      	mov	r6, r0
 800c518:	4950      	ldr	r1, [pc, #320]	; (800c65c <__ieee754_asinf+0x254>)
 800c51a:	f7f4 fbe3 	bl	8000ce4 <__aeabi_fmul>
 800c51e:	4950      	ldr	r1, [pc, #320]	; (800c660 <__ieee754_asinf+0x258>)
 800c520:	f7f4 fad8 	bl	8000ad4 <__addsf3>
 800c524:	4631      	mov	r1, r6
 800c526:	f7f4 fbdd 	bl	8000ce4 <__aeabi_fmul>
 800c52a:	494e      	ldr	r1, [pc, #312]	; (800c664 <__ieee754_asinf+0x25c>)
 800c52c:	f7f4 fad0 	bl	8000ad0 <__aeabi_fsub>
 800c530:	4631      	mov	r1, r6
 800c532:	f7f4 fbd7 	bl	8000ce4 <__aeabi_fmul>
 800c536:	494c      	ldr	r1, [pc, #304]	; (800c668 <__ieee754_asinf+0x260>)
 800c538:	f7f4 facc 	bl	8000ad4 <__addsf3>
 800c53c:	4631      	mov	r1, r6
 800c53e:	f7f4 fbd1 	bl	8000ce4 <__aeabi_fmul>
 800c542:	494a      	ldr	r1, [pc, #296]	; (800c66c <__ieee754_asinf+0x264>)
 800c544:	f7f4 fac4 	bl	8000ad0 <__aeabi_fsub>
 800c548:	4631      	mov	r1, r6
 800c54a:	f7f4 fbcb 	bl	8000ce4 <__aeabi_fmul>
 800c54e:	4948      	ldr	r1, [pc, #288]	; (800c670 <__ieee754_asinf+0x268>)
 800c550:	f7f4 fac0 	bl	8000ad4 <__addsf3>
 800c554:	4631      	mov	r1, r6
 800c556:	f7f4 fbc5 	bl	8000ce4 <__aeabi_fmul>
 800c55a:	4946      	ldr	r1, [pc, #280]	; (800c674 <__ieee754_asinf+0x26c>)
 800c55c:	4681      	mov	r9, r0
 800c55e:	4630      	mov	r0, r6
 800c560:	f7f4 fbc0 	bl	8000ce4 <__aeabi_fmul>
 800c564:	4944      	ldr	r1, [pc, #272]	; (800c678 <__ieee754_asinf+0x270>)
 800c566:	f7f4 fab3 	bl	8000ad0 <__aeabi_fsub>
 800c56a:	4631      	mov	r1, r6
 800c56c:	f7f4 fbba 	bl	8000ce4 <__aeabi_fmul>
 800c570:	4942      	ldr	r1, [pc, #264]	; (800c67c <__ieee754_asinf+0x274>)
 800c572:	f7f4 faaf 	bl	8000ad4 <__addsf3>
 800c576:	4631      	mov	r1, r6
 800c578:	f7f4 fbb4 	bl	8000ce4 <__aeabi_fmul>
 800c57c:	4940      	ldr	r1, [pc, #256]	; (800c680 <__ieee754_asinf+0x278>)
 800c57e:	f7f4 faa7 	bl	8000ad0 <__aeabi_fsub>
 800c582:	4631      	mov	r1, r6
 800c584:	f7f4 fbae 	bl	8000ce4 <__aeabi_fmul>
 800c588:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c58c:	f7f4 faa2 	bl	8000ad4 <__addsf3>
 800c590:	4682      	mov	sl, r0
 800c592:	4630      	mov	r0, r6
 800c594:	f000 f902 	bl	800c79c <__ieee754_sqrtf>
 800c598:	4b3a      	ldr	r3, [pc, #232]	; (800c684 <__ieee754_asinf+0x27c>)
 800c59a:	4607      	mov	r7, r0
 800c59c:	4598      	cmp	r8, r3
 800c59e:	dd1a      	ble.n	800c5d6 <__ieee754_asinf+0x1ce>
 800c5a0:	4651      	mov	r1, sl
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	f7f4 fc52 	bl	8000e4c <__aeabi_fdiv>
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	f7f4 fb9b 	bl	8000ce4 <__aeabi_fmul>
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	f7f4 fa90 	bl	8000ad4 <__addsf3>
 800c5b4:	4601      	mov	r1, r0
 800c5b6:	f7f4 fa8d 	bl	8000ad4 <__addsf3>
 800c5ba:	4933      	ldr	r1, [pc, #204]	; (800c688 <__ieee754_asinf+0x280>)
 800c5bc:	f7f4 fa8a 	bl	8000ad4 <__addsf3>
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	4823      	ldr	r0, [pc, #140]	; (800c650 <__ieee754_asinf+0x248>)
 800c5c4:	f7f4 fa84 	bl	8000ad0 <__aeabi_fsub>
 800c5c8:	2d00      	cmp	r5, #0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	f73f af4a 	bgt.w	800c464 <__ieee754_asinf+0x5c>
 800c5d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c5d4:	e735      	b.n	800c442 <__ieee754_asinf+0x3a>
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800c5dc:	f7f4 fa7a 	bl	8000ad4 <__addsf3>
 800c5e0:	4651      	mov	r1, sl
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4648      	mov	r0, r9
 800c5e6:	f7f4 fc31 	bl	8000e4c <__aeabi_fdiv>
 800c5ea:	4601      	mov	r1, r0
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f7f4 fb79 	bl	8000ce4 <__aeabi_fmul>
 800c5f2:	f028 080f 	bic.w	r8, r8, #15
 800c5f6:	4681      	mov	r9, r0
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	4640      	mov	r0, r8
 800c5fc:	f7f4 fb72 	bl	8000ce4 <__aeabi_fmul>
 800c600:	4601      	mov	r1, r0
 800c602:	4630      	mov	r0, r6
 800c604:	f7f4 fa64 	bl	8000ad0 <__aeabi_fsub>
 800c608:	4641      	mov	r1, r8
 800c60a:	4604      	mov	r4, r0
 800c60c:	4638      	mov	r0, r7
 800c60e:	f7f4 fa61 	bl	8000ad4 <__addsf3>
 800c612:	4601      	mov	r1, r0
 800c614:	4620      	mov	r0, r4
 800c616:	f7f4 fc19 	bl	8000e4c <__aeabi_fdiv>
 800c61a:	4601      	mov	r1, r0
 800c61c:	f7f4 fa5a 	bl	8000ad4 <__addsf3>
 800c620:	4601      	mov	r1, r0
 800c622:	480c      	ldr	r0, [pc, #48]	; (800c654 <__ieee754_asinf+0x24c>)
 800c624:	f7f4 fa54 	bl	8000ad0 <__aeabi_fsub>
 800c628:	4601      	mov	r1, r0
 800c62a:	4648      	mov	r0, r9
 800c62c:	f7f4 fa50 	bl	8000ad0 <__aeabi_fsub>
 800c630:	4641      	mov	r1, r8
 800c632:	4604      	mov	r4, r0
 800c634:	4640      	mov	r0, r8
 800c636:	f7f4 fa4d 	bl	8000ad4 <__addsf3>
 800c63a:	4601      	mov	r1, r0
 800c63c:	4813      	ldr	r0, [pc, #76]	; (800c68c <__ieee754_asinf+0x284>)
 800c63e:	f7f4 fa47 	bl	8000ad0 <__aeabi_fsub>
 800c642:	4601      	mov	r1, r0
 800c644:	4620      	mov	r0, r4
 800c646:	f7f4 fa43 	bl	8000ad0 <__aeabi_fsub>
 800c64a:	4601      	mov	r1, r0
 800c64c:	480f      	ldr	r0, [pc, #60]	; (800c68c <__ieee754_asinf+0x284>)
 800c64e:	e7b9      	b.n	800c5c4 <__ieee754_asinf+0x1bc>
 800c650:	3fc90fdb 	.word	0x3fc90fdb
 800c654:	b33bbd2e 	.word	0xb33bbd2e
 800c658:	7149f2ca 	.word	0x7149f2ca
 800c65c:	3811ef08 	.word	0x3811ef08
 800c660:	3a4f7f04 	.word	0x3a4f7f04
 800c664:	3d241146 	.word	0x3d241146
 800c668:	3e4e0aa8 	.word	0x3e4e0aa8
 800c66c:	3ea6b090 	.word	0x3ea6b090
 800c670:	3e2aaaab 	.word	0x3e2aaaab
 800c674:	3d9dc62e 	.word	0x3d9dc62e
 800c678:	3f303361 	.word	0x3f303361
 800c67c:	4001572d 	.word	0x4001572d
 800c680:	4019d139 	.word	0x4019d139
 800c684:	3f799999 	.word	0x3f799999
 800c688:	333bbd2e 	.word	0x333bbd2e
 800c68c:	3f490fdb 	.word	0x3f490fdb

0800c690 <__ieee754_atan2f>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c696:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c69a:	4603      	mov	r3, r0
 800c69c:	dc05      	bgt.n	800c6aa <__ieee754_atan2f+0x1a>
 800c69e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c6a2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c6a6:	4607      	mov	r7, r0
 800c6a8:	dd04      	ble.n	800c6b4 <__ieee754_atan2f+0x24>
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f4 fa12 	bl	8000ad4 <__addsf3>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	e011      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c6b4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c6b8:	d103      	bne.n	800c6c2 <__ieee754_atan2f+0x32>
 800c6ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6be:	f000 b8bf 	b.w	800c840 <atanf>
 800c6c2:	178c      	asrs	r4, r1, #30
 800c6c4:	f004 0402 	and.w	r4, r4, #2
 800c6c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c6cc:	b932      	cbnz	r2, 800c6dc <__ieee754_atan2f+0x4c>
 800c6ce:	2c02      	cmp	r4, #2
 800c6d0:	d04c      	beq.n	800c76c <__ieee754_atan2f+0xdc>
 800c6d2:	2c03      	cmp	r4, #3
 800c6d4:	d100      	bne.n	800c6d8 <__ieee754_atan2f+0x48>
 800c6d6:	4b29      	ldr	r3, [pc, #164]	; (800c77c <__ieee754_atan2f+0xec>)
 800c6d8:	4618      	mov	r0, r3
 800c6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6dc:	b91e      	cbnz	r6, 800c6e6 <__ieee754_atan2f+0x56>
 800c6de:	2f00      	cmp	r7, #0
 800c6e0:	da4a      	bge.n	800c778 <__ieee754_atan2f+0xe8>
 800c6e2:	4b27      	ldr	r3, [pc, #156]	; (800c780 <__ieee754_atan2f+0xf0>)
 800c6e4:	e7f8      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c6e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c6ea:	d10e      	bne.n	800c70a <__ieee754_atan2f+0x7a>
 800c6ec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c6f0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c6f4:	d105      	bne.n	800c702 <__ieee754_atan2f+0x72>
 800c6f6:	2c02      	cmp	r4, #2
 800c6f8:	d83a      	bhi.n	800c770 <__ieee754_atan2f+0xe0>
 800c6fa:	4b22      	ldr	r3, [pc, #136]	; (800c784 <__ieee754_atan2f+0xf4>)
 800c6fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c700:	e7ea      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c702:	2c02      	cmp	r4, #2
 800c704:	d836      	bhi.n	800c774 <__ieee754_atan2f+0xe4>
 800c706:	4b20      	ldr	r3, [pc, #128]	; (800c788 <__ieee754_atan2f+0xf8>)
 800c708:	e7f8      	b.n	800c6fc <__ieee754_atan2f+0x6c>
 800c70a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c70e:	d0e6      	beq.n	800c6de <__ieee754_atan2f+0x4e>
 800c710:	1b92      	subs	r2, r2, r6
 800c712:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800c716:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800c71a:	da17      	bge.n	800c74c <__ieee754_atan2f+0xbc>
 800c71c:	2900      	cmp	r1, #0
 800c71e:	da01      	bge.n	800c724 <__ieee754_atan2f+0x94>
 800c720:	303c      	adds	r0, #60	; 0x3c
 800c722:	db15      	blt.n	800c750 <__ieee754_atan2f+0xc0>
 800c724:	4618      	mov	r0, r3
 800c726:	f7f4 fb91 	bl	8000e4c <__aeabi_fdiv>
 800c72a:	f000 f995 	bl	800ca58 <fabsf>
 800c72e:	f000 f887 	bl	800c840 <atanf>
 800c732:	4603      	mov	r3, r0
 800c734:	2c01      	cmp	r4, #1
 800c736:	d00d      	beq.n	800c754 <__ieee754_atan2f+0xc4>
 800c738:	2c02      	cmp	r4, #2
 800c73a:	d00e      	beq.n	800c75a <__ieee754_atan2f+0xca>
 800c73c:	2c00      	cmp	r4, #0
 800c73e:	d0cb      	beq.n	800c6d8 <__ieee754_atan2f+0x48>
 800c740:	4912      	ldr	r1, [pc, #72]	; (800c78c <__ieee754_atan2f+0xfc>)
 800c742:	4618      	mov	r0, r3
 800c744:	f7f4 f9c6 	bl	8000ad4 <__addsf3>
 800c748:	4911      	ldr	r1, [pc, #68]	; (800c790 <__ieee754_atan2f+0x100>)
 800c74a:	e00c      	b.n	800c766 <__ieee754_atan2f+0xd6>
 800c74c:	4b11      	ldr	r3, [pc, #68]	; (800c794 <__ieee754_atan2f+0x104>)
 800c74e:	e7f1      	b.n	800c734 <__ieee754_atan2f+0xa4>
 800c750:	2300      	movs	r3, #0
 800c752:	e7ef      	b.n	800c734 <__ieee754_atan2f+0xa4>
 800c754:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c758:	e7be      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c75a:	490c      	ldr	r1, [pc, #48]	; (800c78c <__ieee754_atan2f+0xfc>)
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7f4 f9b9 	bl	8000ad4 <__addsf3>
 800c762:	4601      	mov	r1, r0
 800c764:	480a      	ldr	r0, [pc, #40]	; (800c790 <__ieee754_atan2f+0x100>)
 800c766:	f7f4 f9b3 	bl	8000ad0 <__aeabi_fsub>
 800c76a:	e7a1      	b.n	800c6b0 <__ieee754_atan2f+0x20>
 800c76c:	4b08      	ldr	r3, [pc, #32]	; (800c790 <__ieee754_atan2f+0x100>)
 800c76e:	e7b3      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c770:	4b09      	ldr	r3, [pc, #36]	; (800c798 <__ieee754_atan2f+0x108>)
 800c772:	e7b1      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c774:	2300      	movs	r3, #0
 800c776:	e7af      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <__ieee754_atan2f+0x104>)
 800c77a:	e7ad      	b.n	800c6d8 <__ieee754_atan2f+0x48>
 800c77c:	c0490fdb 	.word	0xc0490fdb
 800c780:	bfc90fdb 	.word	0xbfc90fdb
 800c784:	0800ce94 	.word	0x0800ce94
 800c788:	0800cea0 	.word	0x0800cea0
 800c78c:	33bbbd2e 	.word	0x33bbbd2e
 800c790:	40490fdb 	.word	0x40490fdb
 800c794:	3fc90fdb 	.word	0x3fc90fdb
 800c798:	3f490fdb 	.word	0x3f490fdb

0800c79c <__ieee754_sqrtf>:
 800c79c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c7a0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	d309      	bcc.n	800c7c0 <__ieee754_sqrtf+0x24>
 800c7ac:	4601      	mov	r1, r0
 800c7ae:	f7f4 fa99 	bl	8000ce4 <__aeabi_fmul>
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f7f4 f98d 	bl	8000ad4 <__addsf3>
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	4620      	mov	r0, r4
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	d0fb      	beq.n	800c7bc <__ieee754_sqrtf+0x20>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	da06      	bge.n	800c7d6 <__ieee754_sqrtf+0x3a>
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	f7f4 f981 	bl	8000ad0 <__aeabi_fsub>
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	f7f4 fb3c 	bl	8000e4c <__aeabi_fdiv>
 800c7d4:	e7f1      	b.n	800c7ba <__ieee754_sqrtf+0x1e>
 800c7d6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c7da:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c7de:	d029      	beq.n	800c834 <__ieee754_sqrtf+0x98>
 800c7e0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c7e4:	07cb      	lsls	r3, r1, #31
 800c7e6:	f04f 0300 	mov.w	r3, #0
 800c7ea:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c7ee:	f04f 0419 	mov.w	r4, #25
 800c7f2:	461e      	mov	r6, r3
 800c7f4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c7f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c7fc:	bf58      	it	pl
 800c7fe:	0052      	lslpl	r2, r2, #1
 800c800:	1040      	asrs	r0, r0, #1
 800c802:	0052      	lsls	r2, r2, #1
 800c804:	1875      	adds	r5, r6, r1
 800c806:	4295      	cmp	r5, r2
 800c808:	bfde      	ittt	le
 800c80a:	186e      	addle	r6, r5, r1
 800c80c:	1b52      	suble	r2, r2, r5
 800c80e:	185b      	addle	r3, r3, r1
 800c810:	3c01      	subs	r4, #1
 800c812:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c816:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c81a:	d1f3      	bne.n	800c804 <__ieee754_sqrtf+0x68>
 800c81c:	b112      	cbz	r2, 800c824 <__ieee754_sqrtf+0x88>
 800c81e:	3301      	adds	r3, #1
 800c820:	f023 0301 	bic.w	r3, r3, #1
 800c824:	105c      	asrs	r4, r3, #1
 800c826:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c82a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c82e:	e7c5      	b.n	800c7bc <__ieee754_sqrtf+0x20>
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	3201      	adds	r2, #1
 800c834:	0218      	lsls	r0, r3, #8
 800c836:	d5fb      	bpl.n	800c830 <__ieee754_sqrtf+0x94>
 800c838:	3a01      	subs	r2, #1
 800c83a:	1a89      	subs	r1, r1, r2
 800c83c:	e7d0      	b.n	800c7e0 <__ieee754_sqrtf+0x44>
	...

0800c840 <atanf>:
 800c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c848:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c84c:	4604      	mov	r4, r0
 800c84e:	4680      	mov	r8, r0
 800c850:	db0e      	blt.n	800c870 <atanf+0x30>
 800c852:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c856:	dd04      	ble.n	800c862 <atanf+0x22>
 800c858:	4601      	mov	r1, r0
 800c85a:	f7f4 f93b 	bl	8000ad4 <__addsf3>
 800c85e:	4604      	mov	r4, r0
 800c860:	e003      	b.n	800c86a <atanf+0x2a>
 800c862:	2800      	cmp	r0, #0
 800c864:	f300 80ce 	bgt.w	800ca04 <atanf+0x1c4>
 800c868:	4c67      	ldr	r4, [pc, #412]	; (800ca08 <atanf+0x1c8>)
 800c86a:	4620      	mov	r0, r4
 800c86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c870:	4b66      	ldr	r3, [pc, #408]	; (800ca0c <atanf+0x1cc>)
 800c872:	429d      	cmp	r5, r3
 800c874:	dc0e      	bgt.n	800c894 <atanf+0x54>
 800c876:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c87a:	da08      	bge.n	800c88e <atanf+0x4e>
 800c87c:	4964      	ldr	r1, [pc, #400]	; (800ca10 <atanf+0x1d0>)
 800c87e:	f7f4 f929 	bl	8000ad4 <__addsf3>
 800c882:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c886:	f7f4 fbe9 	bl	800105c <__aeabi_fcmpgt>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d1ed      	bne.n	800c86a <atanf+0x2a>
 800c88e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c892:	e01c      	b.n	800c8ce <atanf+0x8e>
 800c894:	f000 f8e0 	bl	800ca58 <fabsf>
 800c898:	4b5e      	ldr	r3, [pc, #376]	; (800ca14 <atanf+0x1d4>)
 800c89a:	4604      	mov	r4, r0
 800c89c:	429d      	cmp	r5, r3
 800c89e:	dc7c      	bgt.n	800c99a <atanf+0x15a>
 800c8a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c8a4:	429d      	cmp	r5, r3
 800c8a6:	dc67      	bgt.n	800c978 <atanf+0x138>
 800c8a8:	4601      	mov	r1, r0
 800c8aa:	f7f4 f913 	bl	8000ad4 <__addsf3>
 800c8ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c8b2:	f7f4 f90d 	bl	8000ad0 <__aeabi_fsub>
 800c8b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7f4 f909 	bl	8000ad4 <__addsf3>
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f7f4 fac1 	bl	8000e4c <__aeabi_fdiv>
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f7f4 fa07 	bl	8000ce4 <__aeabi_fmul>
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	4607      	mov	r7, r0
 800c8da:	f7f4 fa03 	bl	8000ce4 <__aeabi_fmul>
 800c8de:	4605      	mov	r5, r0
 800c8e0:	494d      	ldr	r1, [pc, #308]	; (800ca18 <atanf+0x1d8>)
 800c8e2:	f7f4 f9ff 	bl	8000ce4 <__aeabi_fmul>
 800c8e6:	494d      	ldr	r1, [pc, #308]	; (800ca1c <atanf+0x1dc>)
 800c8e8:	f7f4 f8f4 	bl	8000ad4 <__addsf3>
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	f7f4 f9f9 	bl	8000ce4 <__aeabi_fmul>
 800c8f2:	494b      	ldr	r1, [pc, #300]	; (800ca20 <atanf+0x1e0>)
 800c8f4:	f7f4 f8ee 	bl	8000ad4 <__addsf3>
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	f7f4 f9f3 	bl	8000ce4 <__aeabi_fmul>
 800c8fe:	4949      	ldr	r1, [pc, #292]	; (800ca24 <atanf+0x1e4>)
 800c900:	f7f4 f8e8 	bl	8000ad4 <__addsf3>
 800c904:	4629      	mov	r1, r5
 800c906:	f7f4 f9ed 	bl	8000ce4 <__aeabi_fmul>
 800c90a:	4947      	ldr	r1, [pc, #284]	; (800ca28 <atanf+0x1e8>)
 800c90c:	f7f4 f8e2 	bl	8000ad4 <__addsf3>
 800c910:	4629      	mov	r1, r5
 800c912:	f7f4 f9e7 	bl	8000ce4 <__aeabi_fmul>
 800c916:	4945      	ldr	r1, [pc, #276]	; (800ca2c <atanf+0x1ec>)
 800c918:	f7f4 f8dc 	bl	8000ad4 <__addsf3>
 800c91c:	4639      	mov	r1, r7
 800c91e:	f7f4 f9e1 	bl	8000ce4 <__aeabi_fmul>
 800c922:	4943      	ldr	r1, [pc, #268]	; (800ca30 <atanf+0x1f0>)
 800c924:	4607      	mov	r7, r0
 800c926:	4628      	mov	r0, r5
 800c928:	f7f4 f9dc 	bl	8000ce4 <__aeabi_fmul>
 800c92c:	4941      	ldr	r1, [pc, #260]	; (800ca34 <atanf+0x1f4>)
 800c92e:	f7f4 f8cf 	bl	8000ad0 <__aeabi_fsub>
 800c932:	4629      	mov	r1, r5
 800c934:	f7f4 f9d6 	bl	8000ce4 <__aeabi_fmul>
 800c938:	493f      	ldr	r1, [pc, #252]	; (800ca38 <atanf+0x1f8>)
 800c93a:	f7f4 f8c9 	bl	8000ad0 <__aeabi_fsub>
 800c93e:	4629      	mov	r1, r5
 800c940:	f7f4 f9d0 	bl	8000ce4 <__aeabi_fmul>
 800c944:	493d      	ldr	r1, [pc, #244]	; (800ca3c <atanf+0x1fc>)
 800c946:	f7f4 f8c3 	bl	8000ad0 <__aeabi_fsub>
 800c94a:	4629      	mov	r1, r5
 800c94c:	f7f4 f9ca 	bl	8000ce4 <__aeabi_fmul>
 800c950:	493b      	ldr	r1, [pc, #236]	; (800ca40 <atanf+0x200>)
 800c952:	f7f4 f8bd 	bl	8000ad0 <__aeabi_fsub>
 800c956:	4629      	mov	r1, r5
 800c958:	f7f4 f9c4 	bl	8000ce4 <__aeabi_fmul>
 800c95c:	4601      	mov	r1, r0
 800c95e:	4638      	mov	r0, r7
 800c960:	f7f4 f8b8 	bl	8000ad4 <__addsf3>
 800c964:	4621      	mov	r1, r4
 800c966:	f7f4 f9bd 	bl	8000ce4 <__aeabi_fmul>
 800c96a:	1c73      	adds	r3, r6, #1
 800c96c:	4601      	mov	r1, r0
 800c96e:	d133      	bne.n	800c9d8 <atanf+0x198>
 800c970:	4620      	mov	r0, r4
 800c972:	f7f4 f8ad 	bl	8000ad0 <__aeabi_fsub>
 800c976:	e772      	b.n	800c85e <atanf+0x1e>
 800c978:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c97c:	f7f4 f8a8 	bl	8000ad0 <__aeabi_fsub>
 800c980:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c984:	4605      	mov	r5, r0
 800c986:	4620      	mov	r0, r4
 800c988:	f7f4 f8a4 	bl	8000ad4 <__addsf3>
 800c98c:	4601      	mov	r1, r0
 800c98e:	4628      	mov	r0, r5
 800c990:	f7f4 fa5c 	bl	8000e4c <__aeabi_fdiv>
 800c994:	2601      	movs	r6, #1
 800c996:	4604      	mov	r4, r0
 800c998:	e799      	b.n	800c8ce <atanf+0x8e>
 800c99a:	4b2a      	ldr	r3, [pc, #168]	; (800ca44 <atanf+0x204>)
 800c99c:	429d      	cmp	r5, r3
 800c99e:	dc14      	bgt.n	800c9ca <atanf+0x18a>
 800c9a0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c9a4:	f7f4 f894 	bl	8000ad0 <__aeabi_fsub>
 800c9a8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f7f4 f998 	bl	8000ce4 <__aeabi_fmul>
 800c9b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c9b8:	f7f4 f88c 	bl	8000ad4 <__addsf3>
 800c9bc:	4601      	mov	r1, r0
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f7f4 fa44 	bl	8000e4c <__aeabi_fdiv>
 800c9c4:	2602      	movs	r6, #2
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	e781      	b.n	800c8ce <atanf+0x8e>
 800c9ca:	4601      	mov	r1, r0
 800c9cc:	481e      	ldr	r0, [pc, #120]	; (800ca48 <atanf+0x208>)
 800c9ce:	f7f4 fa3d 	bl	8000e4c <__aeabi_fdiv>
 800c9d2:	2603      	movs	r6, #3
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	e77a      	b.n	800c8ce <atanf+0x8e>
 800c9d8:	4b1c      	ldr	r3, [pc, #112]	; (800ca4c <atanf+0x20c>)
 800c9da:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c9de:	f7f4 f877 	bl	8000ad0 <__aeabi_fsub>
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	f7f4 f874 	bl	8000ad0 <__aeabi_fsub>
 800c9e8:	4b19      	ldr	r3, [pc, #100]	; (800ca50 <atanf+0x210>)
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c9f0:	f7f4 f86e 	bl	8000ad0 <__aeabi_fsub>
 800c9f4:	f1b8 0f00 	cmp.w	r8, #0
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	f6bf af36 	bge.w	800c86a <atanf+0x2a>
 800c9fe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ca02:	e72c      	b.n	800c85e <atanf+0x1e>
 800ca04:	4c13      	ldr	r4, [pc, #76]	; (800ca54 <atanf+0x214>)
 800ca06:	e730      	b.n	800c86a <atanf+0x2a>
 800ca08:	bfc90fdb 	.word	0xbfc90fdb
 800ca0c:	3edfffff 	.word	0x3edfffff
 800ca10:	7149f2ca 	.word	0x7149f2ca
 800ca14:	3f97ffff 	.word	0x3f97ffff
 800ca18:	3c8569d7 	.word	0x3c8569d7
 800ca1c:	3d4bda59 	.word	0x3d4bda59
 800ca20:	3d886b35 	.word	0x3d886b35
 800ca24:	3dba2e6e 	.word	0x3dba2e6e
 800ca28:	3e124925 	.word	0x3e124925
 800ca2c:	3eaaaaab 	.word	0x3eaaaaab
 800ca30:	bd15a221 	.word	0xbd15a221
 800ca34:	3d6ef16b 	.word	0x3d6ef16b
 800ca38:	3d9d8795 	.word	0x3d9d8795
 800ca3c:	3de38e38 	.word	0x3de38e38
 800ca40:	3e4ccccd 	.word	0x3e4ccccd
 800ca44:	401bffff 	.word	0x401bffff
 800ca48:	bf800000 	.word	0xbf800000
 800ca4c:	0800cebc 	.word	0x0800cebc
 800ca50:	0800ceac 	.word	0x0800ceac
 800ca54:	3fc90fdb 	.word	0x3fc90fdb

0800ca58 <fabsf>:
 800ca58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ca5c:	4770      	bx	lr
	...

0800ca60 <nanf>:
 800ca60:	4800      	ldr	r0, [pc, #0]	; (800ca64 <nanf+0x4>)
 800ca62:	4770      	bx	lr
 800ca64:	7fc00000 	.word	0x7fc00000

0800ca68 <_init>:
 800ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6a:	bf00      	nop
 800ca6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6e:	bc08      	pop	{r3}
 800ca70:	469e      	mov	lr, r3
 800ca72:	4770      	bx	lr

0800ca74 <_fini>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	bf00      	nop
 800ca78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7a:	bc08      	pop	{r3}
 800ca7c:	469e      	mov	lr, r3
 800ca7e:	4770      	bx	lr
